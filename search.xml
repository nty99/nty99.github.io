<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mac</title>
      <link href="/blog/2022/08/23/Mac/"/>
      <url>/blog/2022/08/23/Mac/</url>
      
        <content type="html"><![CDATA[<p>十一、Mac</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">一、主机名：</span><br><span class="line">就是HostName。</span><br><span class="line">查看：scutil --get HostName</span><br><span class="line">修改：sudo scutil --set HostName 新的主机名</span><br><span class="line"></span><br><span class="line">二、计算机名：</span><br><span class="line">就是ComputerName。它在隔空投送中显示，</span><br><span class="line">查看：scutil --get ComputerName</span><br><span class="line">修改：</span><br><span class="line">方法一：在“设置”——“共享”下，修改“电脑名称”。</span><br><span class="line">方法二：sudo scutil --set ComputerName 新的计算机名</span><br><span class="line"></span><br><span class="line">三、本地主机名（即：本地局域网主机名）</span><br><span class="line">它在局域网中显示，可在finder下的网络查看。</span><br><span class="line">修改：</span><br><span class="line">在“设置”——“共享”下，再点下图中的“编辑”按钮，进去就可以修改了。</span><br><span class="line"></span><br><span class="line">四、修改xcode作者名</span><br><span class="line">修改：设置——用户与群组——点击左下角小锁，解锁——在当前用户上右键，点“高级选项”，修改“全名”，就可以了</span><br><span class="line"></span><br><span class="line">五、修改终端前缀</span><br><span class="line">macOS 的终端前缀默认是 PS1="%n@%m %1~ %# "。</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">n: 表示用户名称，这里是账户名称，可以在（设置——用户与群组——点击左下角小锁，解锁——在当前用户上右键，点“高级选项”，查看账户名称，这里是改不了的）</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">m: 主机名</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">1~: 所在的当前目录</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash"><span class="comment">#: 最后的分隔符号</span></span></span><br><span class="line">修改：</span><br><span class="line">1. 终端输入 open /etc</span><br><span class="line">2. 在打开的文件夹找到bashrc 或者zshrc（取决于你用的哪种终端命令），复制一份到桌面，打开桌面上的这份修改PS1，比如修改成PS1="%n %1~ %# "，修改前最好把原命令注释一份，然后command+s保存</span><br><span class="line">3.删除 /etc/bashrc 或者/etc/zshrc，桌面上的那份复制或移动过来。</span><br><span class="line">4.终端执行source /etc/bashrc 或者source /etc/zshrc，让文件生效。 </span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/blog/2022/08/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/blog/2022/08/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="1、创建型模式"><a href="#1、创建型模式" class="headerlink" title="1、创建型模式"></a>1、创建型模式</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">主要特点是将对象的创建和使用分离</span><br><span class="line">  </span><br><span class="line">(<span class="number">1</span>)单例模式</span><br><span class="line">    饿汉式：类加载就会导致该实例对象被创建</span><br><span class="line">    懒汉式：首次使用该对象才会创建</span><br><span class="line">    推荐方式：</span><br><span class="line">    枚举方式</span><br><span class="line">    双重检查锁+<span class="keyword">volatile</span>关键字</span><br><span class="line">    静态类部类方式</span><br><span class="line">    破坏单例：</span><br><span class="line">    序列化：解决方案:在序列化的类中新增readResolve()方法,ObjectInputStream会判断有无这个方法，有就执行</span><br><span class="line">    反射：解决方案：通过构造方法创建对象时候，添加判断---(多线程环境加上同步代码块)</span><br><span class="line">(<span class="number">2</span>)工厂方法模式</span><br><span class="line">(<span class="number">3</span>)抽象工厂模式</span><br><span class="line">     抽象工厂模式是工厂模式的升级，工厂模式只生产同一等级的产品，抽象工厂可生产多个等级的产品</span><br><span class="line">     使用场景：</span><br><span class="line">        <span class="number">1</span>、当创建的对象是一系列相互关联或相互依赖的产品族，如电器工厂的洗衣机、电视剧、冰箱</span><br><span class="line">        <span class="number">2</span>、系统中有多个产品族，但每次只使用某一族产品。如穿不同品牌的衣服、鞋子</span><br><span class="line">        <span class="number">3</span>、系统中提供了产品的类库，且所有产品接口相同，客户端不依赖产品实例的创建细节和内部结构</span><br><span class="line">      如输入法皮肤更换等等。</span><br><span class="line">(<span class="number">4</span>)原型模式：用一个已经创建的实例作原型，通过复制该原型对象来创建一个和原型对象相同的新对象</span><br><span class="line">      角色：</span><br><span class="line">        <span class="number">1</span>、抽象原型类：规定了具体原型对象必须实现的clone()方法</span><br><span class="line">        <span class="number">2</span>、具体原型类：实现抽象原型类的clone方法，它是可被复制的对象</span><br><span class="line">        <span class="number">3</span>、访问类：使用具体原型类的clone方法复制新对象</span><br><span class="line">      使用场景:</span><br><span class="line"><span class="number">1</span>、对象创建复杂，可使用原型模式快速克隆</span><br><span class="line">        <span class="number">2</span>、性能和安全要求比较高</span><br><span class="line">        浅克隆：Object的clone方法是浅克隆，克隆的新对象属性和原对象相同，对于非基本类型属性，克隆对象属性内存地址指向原有对象属性</span><br><span class="line">        深克隆：克隆出新对象，原对象属性中的其它对象也会被克隆，不再指向原对象属性内存地址</span><br><span class="line">(<span class="number">5</span>)建造者模式</span><br><span class="line">       将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示</span><br><span class="line">       使用场景：</span><br><span class="line">          <span class="number">1</span>、创建的对象较复杂，由多个部件构成，各部门面临复杂的变化，但是部件间的构造顺序的稳定的</span><br><span class="line">          <span class="number">2</span>、产品构建和装配方式是分离的，即产品的构建过程和最终的表示是相互独立的</span><br><span class="line">创建型模式对比：</span><br><span class="line">          <span class="number">1</span>、工厂方法模式VS建造者模式</span><br><span class="line">          工厂方法模式注重于整体对象的创建</span><br><span class="line">          建造者模式注重于部件的构建过程，意在通过一步步的精确构建出一个复杂的对象</span><br><span class="line">          <span class="number">2</span>、抽象工厂模式VS建造者模式</span><br><span class="line">          抽象工厂模式实现对产品家族的创建，一个产品家族是这样一系列产品；具有不同分类维度的产品组合，采用抽象工厂模式不需要关心构建过程，只关心什么产品由什么工厂生产</span><br><span class="line">          建造者模式主要目的是通过组装零配件产生一个新产品</span><br></pre></td></tr></tbody></table></figure><h4 id="2、结构型模式"><a href="#2、结构型模式" class="headerlink" title="2、结构型模式"></a>2、结构型模式</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   用于描述如何将对象按照某种布局组成更大的结构，分为类结构模式和对象结构型模式，前者采用继承机制来组织接口和类，后者采用组合或聚合来组合对象。后者耦合度低，满足"合成复用原则",所以对象型结构模式比类结构型模式更灵活。</span><br><span class="line">(1)代理模式</span><br><span class="line">(2)适配器模式</span><br><span class="line">(2)装饰者模式</span><br><span class="line">(2)桥接模式</span><br><span class="line">(2)外观模式</span><br><span class="line">(2)组合模式</span><br><span class="line">(2)享元模式</span><br></pre></td></tr></tbody></table></figure><h5 id="1、代理模式"><a href="#1、代理模式" class="headerlink" title="1、代理模式"></a>1、代理模式</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）动态代理</span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">TrainStation</span> <span class="variable">station</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainStation</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">SellTicket</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (SellTicket) Proxy.newProxyInstance(station.getClass().getClassLoader(),         station.getClass().getInterfaces(), <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable {</span><br><span class="line">                System.out.println(<span class="string">"增强"</span>);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(station, args);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">proxyInstance.sellTicket();</span><br><span class="line"></span><br><span class="line">原理:</span><br><span class="line"><span class="number">1</span>、调用proxyInstance.sellTicket()，根据多肽会执行动态代理动态生成的$Proxy0的sellTicket()方法</span><br><span class="line">  <span class="number">2</span>、根据构造方法生成$Proxy0对象，会将自定义的<span class="keyword">new</span> <span class="title class_">InvocationHandler</span>(){}传递给父类Proxy的构造方法，复制给父类的成员变量InvocationHandler</span><br><span class="line">  <span class="number">3</span>、执行<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m3, (Object[])<span class="literal">null</span>)方法会调用自己的invoke方法</span><br><span class="line">  <span class="number">4</span>、invoke方法中会通过反射调用真实对象的Proxy0的sellTicket()方法</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">SellTicket</span> {</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) <span class="keyword">throws</span>  {</span><br><span class="line">        <span class="built_in">super</span>(var1);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">sellTicket</span><span class="params">()</span> <span class="keyword">throws</span>  {</span><br><span class="line">        <span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m3, (Object[])<span class="literal">null</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        m3 = Class.forName(<span class="string">"com.study.nty.design.proxy.SellTicket"</span>).getMethod(<span class="string">"sellTicket"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）CGLIB代理</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">TrainStation</span> <span class="variable">station</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainStation</span>();</span><br><span class="line">  </span><br><span class="line">   <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">   enhancer.setSuperclass(TrainStation.class);</span><br><span class="line">   enhancer.setCallback(</span><br><span class="line">     <span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() {</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable {</span><br><span class="line">          System.out.println(<span class="string">"动态增强"</span>);</span><br><span class="line">          <span class="keyword">return</span> method.invoke(station,args);</span><br><span class="line">   }</span><br><span class="line">   });</span><br><span class="line">   <span class="type">TrainStation</span> <span class="variable">proxy</span> <span class="operator">=</span> (TrainStation) enhancer.create();</span><br><span class="line">   proxy.sellTicket();</span><br><span class="line"></span><br><span class="line">原理:</span><br><span class="line"><span class="number">1</span>、执行proxy.sellTicket()方法会执行MethodInterceptor对象的intercept方法</span><br><span class="line">  Cglib底层采用ASM字节码生成框架，使用字节码技术生成代理类，Cglib不能对<span class="keyword">final</span>修饰的类或方法进行代理，因为Cglib动态生产的类是目标对象的子类。</span><br><span class="line">    </span><br><span class="line">动态代理和静态代理区别</span><br><span class="line">    动态代理会将接口或类中的方法集中在处理器的方法中执行，这样在目标对象的方法比较多的时候能灵活处理，不用像静态代理那样在每个方法都重写、处理。</span><br><span class="line"></span><br><span class="line">代理模式优缺点</span><br><span class="line">    优点</span><br><span class="line">    · 代理模式中客户端和目标对象之间提供中介和保护作用</span><br><span class="line">    · 可以对象目标对象的功能进行增强</span><br><span class="line">      · 使客户端和目标对象分离，降低系统耦合度</span><br><span class="line">    缺点</span><br><span class="line">      · 增加系统复杂度</span><br></pre></td></tr></tbody></table></figure><h5 id="2、适配器模式"><a href="#2、适配器模式" class="headerlink" title="2、适配器模式"></a>2、适配器模式</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">定义：将一个类的接口转换成客户希望的另外的接口，使得原本不能兼容的东西变成兼容。分为类适配器和对象适配器，前者耦合度比较高，应用少</span><br><span class="line">结构：</span><br><span class="line">· 目标接口（Target）：当前系统业务所期待的接口</span><br><span class="line">· 适配者（Adaptee）：被访问和适配现存组件的接口</span><br><span class="line">· 适配器（Adapter）：转换器，通过继承或引用适配者对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="3、装饰者模式"><a href="#3、装饰者模式" class="headerlink" title="3、装饰者模式"></a>3、装饰者模式</h5><h5 id="4、桥接模式"><a href="#4、桥接模式" class="headerlink" title="4、桥接模式"></a>4、桥接模式</h5><p>​    1、角色</p><p>​        (1)抽象化角色：定义抽象类，并包含对实现化角色的引用</p><p>​        (2)扩展抽象化角色：继承抽象化角色，重写父类方法，通过组合关系调用实现化角色的方法</p><p>​        (3)实现化角色：定义接口，供扩展抽象化角色调用</p><p>​        (4)具体实现化角色：给出实现化角色的接口的具体实现</p><h5 id="5、门面模式"><a href="#5、门面模式" class="headerlink" title="5、门面模式"></a>5、门面模式</h5><h5 id="6、组合模式"><a href="#6、组合模式" class="headerlink" title="6、组合模式"></a>6、组合模式</h5><p>​    1、角色</p><p>​        (1)抽象根节点：定义系统各层次对象共有的方法和属性，可以预先定义一些默认方法和属性</p><p>​        (2)树枝节点：定义树枝节点的行为，存储子节点，组合树枝节点和叶子节点形成一个树形结构</p><p>​        (3)叶子节点：叶子节点对象，其下再无分支，是系统层次遍历的最小单位</p><p>​    2、分类</p><p>​        (1)透明模式</p><p>​        (2)安全模式</p><p>3、行为型模式</p><p>（1）用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/blog/2022/08/23/Linux/"/>
      <url>/blog/2022/08/23/Linux/</url>
      
        <content type="html"><![CDATA[<h3 id="七、Linux常用命令"><a href="#七、Linux常用命令" class="headerlink" title="七、Linux常用命令"></a>七、Linux常用命令</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">1、进程端口查看</span><br><span class="line">查看进程：</span><br><span class="line">ps -ef | grep (名称/进程id) 和(ps aux类似，其中ps -aux是显示x用户的进程)</span><br><span class="line">如:ps -ef | grep java </span><br><span class="line">   ps -ef | grep 进程pid </span><br><span class="line">查看端口：</span><br><span class="line">(1) netstat -an|grep 8080</span><br><span class="line">(2) lsof -i:8080</span><br><span class="line">2、压缩解压命令：</span><br><span class="line">压缩：tar -czf all.tar.gz *.jpg</span><br><span class="line">解压：tar -xzf all.tar.gz</span><br><span class="line">3、防火墙端口</span><br><span class="line"> firewall-cmd --query-port=8848/tcp</span><br><span class="line"> firewall-cmd --permanent --remove-port=8848/tcp</span><br><span class="line">   firewall-cmd --zone=public --add-port=8080-8090/tcp --permanent</span><br><span class="line">     systemctl restart firewalld.service</span><br><span class="line">     firewall-cmd --reload</span><br><span class="line">4、不挂断的运行命令</span><br><span class="line">nohup ./test.sh &amp;</span><br><span class="line">5、查看当前后台运行的命令</span><br><span class="line">(1)jobs用于查看当前终端后台运行的任务，换了终端就看不到了。</span><br><span class="line">jobs</span><br><span class="line">jobs -l 选项可显示当前终端所有任务的PID</span><br><span class="line">(2)ps命令用于查看瞬间进程的动态，可以看到别的终端运行的后台进程。</span><br><span class="line">ps -aux | grep "test.sh"    #a:显示所有程序  u:以用户为主的 x:显示所有程序，不以终端机来区分</span><br><span class="line">6、kill命令</span><br><span class="line">(1)kill pid 正常停止该进程 = kill -15 pid = kill -s TERM</span><br><span class="line">(2)kill -9 pid 强制杀死该进程 = kill -s SIGKILL pid</span><br><span class="line">(3)kill -1 pid 重启该进程 = kill -s SIGHUP pid</span><br><span class="line">6、关闭当前后台运行的命令</span><br><span class="line">(1)通过jobs命令查看jobnum，然后执行  kill %jobnum</span><br><span class="line">(2)通过ps命令查看进程号PID，然后执行  kill PID</span><br><span class="line">如果是前台进程的话，直接执行 Ctrl+c 就可以终止了</span><br><span class="line">7、前后台进程的切换与控制</span><br><span class="line">(1)fg </span><br><span class="line">功能：将后台中的命令调至前台继续运行 </span><br><span class="line">如果后台中有多个命令，可以先用jobs查看jobnum，然后用fg %jobnum 将选中的命令调出。</span><br><span class="line">(2)Ctrl+z</span><br><span class="line">功能：将一个正在前台执行的命令放到后台，并且处于暂停状态</span><br><span class="line">(3)bg</span><br><span class="line">功能：将一个在后台暂停的命令，变成在后台继续执行</span><br><span class="line">(4)watch</span><br><span class="line">watch -n 10 sh  test.sh  &amp;  #每10s在后台执行一次test.sh脚本</span><br><span class="line">(5)nohup </span><br><span class="line">功能：如果让程序始终在后台执行，即使关闭当前的终端也执行（之前的&amp;做不到）</span><br><span class="line">nohub ./test.sh &gt; r.log 2&gt;&amp;1 &amp;</span><br><span class="line">8、特殊符号</span><br><span class="line">(1)运行jar包，并且置于后台执行，执行的日志重定向到当前默认的log.txt文件中</span><br><span class="line">java -jar test.jar &gt; log.txt &amp; </span><br><span class="line">(2)&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令。</span><br><span class="line">ls -l &amp;&amp; cd .. </span><br><span class="line">(3)|| 表示上一条命令执行失败后，才执行下一条命令。</span><br><span class="line">als -l || cd ..</span><br><span class="line"><span class="meta prompt_">(4)&gt; </span><span class="language-bash">表示stdout标准输出信息重定向输出，覆盖写。</span></span><br><span class="line">echo 'World' &gt; test.txt</span><br><span class="line"><span class="meta prompt_">(5)&gt;</span><span class="language-bash">&gt; 表示内容追加写。</span></span><br><span class="line">echo 'World' &gt;&gt; test.txt</span><br><span class="line">(6)&amp;&gt; 表示stdout标准输出和stderr错误输出信息，重定向输出，覆盖写。</span><br><span class="line">lll &amp;&gt; test.txt</span><br><span class="line"><span class="meta prompt_">(7)2&gt;</span><span class="language-bash">&amp;1 表示把标准错误的输出重定向到标准输出1，&amp;指示不要把1当做普通文件，而是fd=1即标准输出处理。</span></span><br><span class="line"><span class="meta prompt_">(8)2&gt;</span><span class="language-bash">1 表示把标准错误的输出重定向到1，但这个1不是标准输出，而是一个名为1的文件。</span></span><br></pre></td></tr></tbody></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>中间件</title>
      <link href="/blog/2022/08/23/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/blog/2022/08/23/%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="五、中间件"><a href="#五、中间件" class="headerlink" title="五、中间件"></a>五、中间件</h3><h4 id="5-1、RabbitMQ"><a href="#5-1、RabbitMQ" class="headerlink" title="5.1、RabbitMQ"></a>5.1、RabbitMQ</h4><p>​        工作模式： 1 “Hello World!”、2 Work queues、3 Publish/Subscribe、4 Routing、5 Topics<br>​        (1)1和2使用默认交换机<br>​        (2)Publish/Subscribe使用FANOUT(给所有绑定的队列发送消息，此时不用指定routingKey)<br>​        (3)Routing使用DIRECT(给指定的routingKey发送消息)<br>​        (4)Topics使用TOPIC(给匹配的路由发送消息)</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>部署</title>
      <link href="/blog/2022/08/23/%E9%83%A8%E7%BD%B2/"/>
      <url>/blog/2022/08/23/%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="1、docker常用命令"><a href="#1、docker常用命令" class="headerlink" title="1、docker常用命令"></a>1、docker常用命令</h3><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker pull 服务:tag  服务:版本（拉取服务，不加tag则默认最新版）</span><br><span class="line">docker  images 查看镜像</span><br><span class="line">docker save -o nginx.tar nginx:lastest  将nginx:latest镜像打包</span><br><span class="line">docker load -i nginx.tar  加载镜像</span><br><span class="line">docker rmi  删除镜像</span><br><span class="line">docker rm  删除容器 -f 删除运行的容器</span><br><span class="line">docker ps 查看运行容器状态 -a 则查看所有容器状态</span><br><span class="line">docker <span class="keyword">run</span><span class="language-bash"> --name  取名字  -p 80:80 -d  镜像  运行镜像，-p端口映射，-d后台运行</span></span><br><span class="line">docker logs mn 查看mn容器的日志 -f 动态查看</span><br><span class="line">docker exec -it mn bash  以bash命令进入mn容器</span><br><span class="line">docker stop mn  停止mn容器</span><br><span class="line">docker (un)pause （恢复）暂停镜像</span><br><span class="line">docker restart mn 重启mn容器</span><br></pre></td></tr></tbody></table></figure><h3 id="2、docker镜像结构"><a href="#2、docker镜像结构" class="headerlink" title="2、docker镜像结构"></a>2、docker镜像结构</h3><p>1、镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p><p>2、镜像是分成结构、每一层称为一个Layer</p><p>​    （1）BaseImage层:包含基本的系统函数库、环境变量、文件系统</p><p>​    （2）Entrypoint：入口，是镜像中应用启动的命令</p><p>​    （3）其它：在BaseImage基础上添加依赖、安装程序、完成整改个应用的安装和配置</p>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/blog/2022/08/23/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/blog/2022/08/23/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h4 id="1、Mysql"><a href="#1、Mysql" class="headerlink" title="1、Mysql"></a>1、Mysql</h4><h5 id="1、执行顺序"><a href="#1、执行顺序" class="headerlink" title="1、执行顺序"></a>1、执行顺序</h5><p>​    1、执行where xx对全表数据做筛选，返回第1个结果集</p><p>​    2、针对第1个结果集使用group by分组，返回第2个结果集</p><p>​    3、针对第2个结果集中的每1组数据执行select xx，有几组就执行几次，返回第3个结果集</p><p>​    4、针对第3个结集执行having xx进行筛选，返回第4个结果集</p><p>​    5、针对第4个结果集排序</p><p>​    6、完整顺序:from、join、where、group by、with、having、order</p><h5 id="2、索引"><a href="#2、索引" class="headerlink" title="2、索引"></a>2、索引</h5><p>​    1、数据结构</p><p>​        (1)Innob主键索引是聚集索引方式，数据和索引都在同一个文件里面，主键索引叶子节点存储的是数据，二级索引即非聚簇索引叶子节点存储的是主键key，主索引叶子节点存储的是数据。</p><p>​        (2)MyISAM 用的是非聚集索引方式，即数据和索引落在不同的两个文件上。MyISAM 在建表时以主键作为 KEY 来建立主索引B+树，树的叶子节点存的是对应数据的物理地址。我们拿到这个物理地址后，就可以到 MyISAM 数据文件中直接定位到具体的数据记录了。</p><p>​    2、选择条件</p><p>​        (1)较频繁的作为查询条件的字段应该创建索引；</p><p>​        (2)唯一性太差的字段不适合单独创建索引，即使该字段频繁作为查询条件；</p><p>​        (3)更新非常频繁的字段不适合创建索引。</p><p>​    3、分类</p><p>​        1、聚簇索引:数据存储的一种方式，索引的顺序和数据记录的顺序一致</p><p>​        2、非聚簇索引:索引顺序和存储顺序无关</p><h5 id="3、count"><a href="#3、count" class="headerlink" title="3、count"></a>3、count</h5><p>​    1、count(*)包括了所有的列，相当于行数，在统计结果的时候， 不会忽略列值为NULL</p><p>​    2、count(1)包括了忽略所有列，用1代表代码行，在统计结果的时候， 不会忽略列值为NULL </p><p>​    3、count(列名)只包括列名那一列，在统计结果的时候，会忽略列值为空(这里的空不是只空字符串或者0，而是表示null)的计数， 即某</p><p>个字段值为NULL时，不统计。</p><p>​    4、列名为主键，count(列名)会比count(1)快  </p><p>​    5、列名不为主键，count(1)会比count(列名)快  </p><p>​    6、如果表多个列并且没有主键，则 count（1） 的执行效率优于 count（*）  </p><p>​    7、如果有主键，则 select count（主键）的执行效率是最优的 </p><p>​    8、如果表只有一个字段，则 select count（*）最优</p><h5 id="4、存储引擎"><a href="#4、存储引擎" class="headerlink" title="4、存储引擎"></a>4、存储引擎</h5><p>​    1、类型</p><p>​        InnoDB、MyISAM</p><p>​    2、区别</p><p>​        (1)InnoDB 支持事务，MyISAM不支持事务</p><p>​        (2)InnoDB支持外键，MyISAM不支持</p><p>​        (3)InnoDB支持行锁和表锁，ISAM不支持行锁</p><p>​        (4)InnoDB 不保存表的具体行数，执行 select count(*) from table 时需要全表扫描。而MyISAM 用一个变量保存了整个表的行数，</p><p>执行上述语句时只需要读出该变量即可，速度很快。</p><h5 id="5、执行计划"><a href="#5、执行计划" class="headerlink" title="5、执行计划"></a>5、执行计划</h5><h5 id="6、最左前缀原则"><a href="#6、最左前缀原则" class="headerlink" title="6、最左前缀原则"></a>6、最左前缀原则</h5><p>​        如果你的 SQL 语句中用到了联合索引中的最左边的索引，那么这条 SQL 语句就可以利用这个联合索引去进行匹配，遇到范围查询时</p><p>候停止匹配。</p><h5 id="7、优化器"><a href="#7、优化器" class="headerlink" title="7、优化器"></a>7、优化器</h5><h5 id="8、锁的分类和作用"><a href="#8、锁的分类和作用" class="headerlink" title="8、锁的分类和作用"></a>8、锁的分类和作用</h5><p>​    1、表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。</p><p>​    2、行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</p><p>​    3、页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般</p><h5 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h5><p>​    1、默认查询是不分大小写，若需要区分，可在建表时候指定，或者在查询时候在字段前面加上binary</p><h4 id="2、Oracle"><a href="#2、Oracle" class="headerlink" title="2、Oracle"></a>2、Oracle</h4><h5 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips"></a>Tips</h5><p>​    1、Oracle执行sql的的隐式转换</p><p>​    2、Oracle DROP误删表后恢复</p><p>​        (1)SELECT * FROM USER_RECYCLEBIN</p><p>​        (2)FLASHBACK TABLE TABLE_NAME TO BEFORE DROP;</p><p>​    3、删除Table不进入Recycle的方法：DROP TABLE TABLE_NAME PURGE 即永</p><h4 id="3、Redis"><a href="#3、Redis" class="headerlink" title="3、Redis"></a>3、Redis</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">hash双链集合，set、zset、list单链集合</span><br><span class="line">exists key 查看key是否存在</span><br><span class="line">incr/decr key (key的值增加/减少1)</span><br><span class="line">incrby/decrby key n (key的值增加/减少n)  单个命令实现的所有Redis操作都是原子的，包括对更复杂数据结构的操作。因此，当您使用修改某些值的 Redis 命令时，您不必考虑并发访问。</span><br><span class="line">set key value ex time 设置键的过期时间</span><br><span class="line">ttl key 查看键的过期时间 -1 永久 -2 失效 20 20秒后失效</span><br><span class="line">persist key 移除key的过期时间</span><br><span class="line"></span><br><span class="line">列表：list</span><br><span class="line">llen key 查看列表长度</span><br><span class="line">lpush / rpush  key value（向列表头 / 尾插入信息）</span><br><span class="line">lrange key 0 -1 （遍历从头到尾的值）</span><br><span class="line">lange key 0 -2  （遍历从头到倒数第二个值）</span><br><span class="line">lpop / rpop 删除头 / 尾的key，并把删除的值返回</span><br><span class="line">lpush / rpush  key value1,value2 向列表插入多个值，返回列表长度</span><br><span class="line"></span><br><span class="line">集合：set</span><br><span class="line">sadd key value... 向集合中添加一个或多个元素</span><br><span class="line">smembers key 遍历集合元素</span><br><span class="line">srem key value 删除指定元素，存在返回1，不存在返回0</span><br><span class="line">sismember key value 查看值是否存在，存在返回1，不存在返回0</span><br><span class="line">sunion key1 key2 组合多个集合并返回所有元素</span><br><span class="line">spop key n 随机删除n个元素并返回，默认返回一个</span><br><span class="line">srandmember key n 随机返回集合中的n个元素，不写默认返回一个</span><br><span class="line">sdiff key1 key2返回两个集合的差别</span><br><span class="line"></span><br><span class="line">集合：zset</span><br><span class="line">zadd key_namae score value... 向有序集合添加一个或多个值(可修改指定值的分数)</span><br><span class="line">zrange key_name start end 获取指定范围内按score排序的集合</span><br><span class="line">zrange key start end withscores  打印所有的value，并带有分数</span><br><span class="line">zscore key value 获取指定value的score</span><br><span class="line"></span><br><span class="line">哈希：hash</span><br><span class="line">hset key filed filed 添加一个或多个键值对</span><br><span class="line">hget key filed 获取某个键值对</span><br><span class="line">hgetall key  获取所有键值对</span><br><span class="line">hincrby key filed n 给字段key增加n个整数值</span><br><span class="line">hdel key filed  删除字段的值  </span><br><span class="line">hlen、hkeys、hvals key  打印键值对长度、所有的key、所有的值</span><br><span class="line"></span><br><span class="line">redis两种持久化方案：</span><br><span class="line">RDB: </span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000  （60秒后有10000条数据发生变化则进行持久化）</span><br><span class="line"></span><br><span class="line">AOF: 开启appendonly 为yes </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">appendfsync always  （每次操作进行一次持久化）</span></span><br><span class="line">appendfsync everysec  （每秒进行一次持久化）</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">appendfsync no</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4、ES"><a href="#4、ES" class="headerlink" title="4、ES"></a>4、ES</h4><h5 id="1、配置ES开发环境"><a href="#1、配置ES开发环境" class="headerlink" title="1、配置ES开发环境"></a>1、配置ES开发环境</h5><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -d \</span></span><br><span class="line"><span class="language-bash">--name es \</span></span><br><span class="line"><span class="language-bash">-e <span class="string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span> \</span></span><br><span class="line"><span class="language-bash">-e <span class="string">"discovery.type=single-node"</span> \</span></span><br><span class="line"><span class="language-bash">-v es-data:/usr/share/elasticsearch/data \</span></span><br><span class="line"><span class="language-bash">-v es-plugins:/usr/share/elasticsearch/plugins \</span></span><br><span class="line"><span class="language-bash">--privileged \</span></span><br><span class="line"><span class="language-bash">--network es-net \</span></span><br><span class="line"><span class="language-bash">-p 9200:9200 \</span></span><br><span class="line"><span class="language-bash">-p 9300:9300 \</span></span><br><span class="line"><span class="language-bash">elasticsearch:7.12.1</span></span><br><span class="line"></span><br><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -d \</span></span><br><span class="line"><span class="language-bash">--name kibana \</span></span><br><span class="line"><span class="language-bash">-e ELASTICSEARCH_HOSTS=http://es:9200 \</span></span><br><span class="line"><span class="language-bash">--network es-net \</span></span><br><span class="line"><span class="language-bash">-p 5601:5601 \</span></span><br><span class="line"><span class="language-bash">kibana:7.12.1</span></span><br></pre></td></tr></tbody></table></figure><h5 id="2、DSL语句"><a href="#2、DSL语句" class="headerlink" title="2、DSL语句"></a>2、DSL语句</h5><p>​    1、索引库操作</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#查看索引库</span><br><span class="line">GET /hotel</span><br><span class="line"></span><br><span class="line">#删除索引库</span><br><span class="line">DELETE /hotel</span><br><span class="line"></span><br><span class="line">#修改索引库 只能增添字段</span><br><span class="line">PUT /hotel/_mapping</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"properties"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"age"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"type"</span><span class="punctuation">:</span><span class="string">"integer"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line"># 建立索引库hotel  type数据类型 analyzer分词器</span><br><span class="line">PUT /hotel</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"mappings"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"properties"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"id"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"keyword"</span> </span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"text"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"analyzer"</span><span class="punctuation">:</span> <span class="string">"ik_max_word"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"copy_to"</span><span class="punctuation">:</span> <span class="string">"all"</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"address"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"text"</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">"price"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"integer"</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"all"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"text"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"analyzer"</span><span class="punctuation">:</span> <span class="string">"ik_max_word"</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>​    2、文档操作</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#新增文档id为<span class="number">1</span>的数据</span><br><span class="line">POST /hotel/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"1"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"name"</span><span class="punctuation">:</span><span class="string">"test"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"address"</span><span class="punctuation">:</span><span class="string">"test"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"price"</span><span class="punctuation">:</span><span class="number">11</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#查询id为<span class="number">1</span>的数据</span><br><span class="line">GET /hotel/_doc/<span class="number">1</span></span><br><span class="line"></span><br><span class="line">#删除id为<span class="number">1</span>的数据</span><br><span class="line">DELETE /hotel/_doc/<span class="number">1</span></span><br><span class="line"></span><br><span class="line">#修改数据 全量修改 如果数据不存在则创建</span><br><span class="line">PUT /hotel/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"1"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"name"</span><span class="punctuation">:</span><span class="string">"test"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"address"</span><span class="punctuation">:</span><span class="string">"test"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"price"</span><span class="punctuation">:</span><span class="number">11</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#修改数据 增量修改字段</span><br><span class="line">POST /hotel/_update/<span class="number">1</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"doc"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"address"</span><span class="punctuation">:</span><span class="string">"杭州"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"price"</span><span class="punctuation">:</span><span class="number">10000000</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>​    3、查询操作</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line">#全文搜索</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"match_all"</span><span class="punctuation">:</span> <span class="punctuation">{</span><span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#单字段查询 all 多个字段整合</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">   <span class="attr">"match"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">     <span class="attr">"all"</span><span class="punctuation">:</span> <span class="string">"如家商圈"</span></span><br><span class="line">   <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#多字段查询</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"multi_match"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"query"</span><span class="punctuation">:</span> <span class="string">"如家商圈"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"fields"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"brand"</span><span class="punctuation">,</span><span class="string">"name"</span><span class="punctuation">,</span><span class="string">"business"</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#精确查询</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"term"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"city"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"value"</span><span class="punctuation">:</span> <span class="string">"上海"</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#精确查询 范围查询 带e表示包含等于</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"range"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"price"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"gte"</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"lte"</span><span class="punctuation">:</span> <span class="number">2000</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#位置查询 geo_distance和geo_bounding_box</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"geo_distance"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"distance"</span><span class="punctuation">:</span><span class="string">"10km"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"location"</span><span class="punctuation">:</span><span class="string">"31.20, 121.30"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#function_score查询 会修改最后得分 query_score和function_score来决定分数</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"function_score"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"match"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"酒店"</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"functions"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"filter"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"term"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">              <span class="attr">"brand"</span><span class="punctuation">:</span> <span class="string">"7天酒店"</span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">          <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"weight"</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"boost_mode"</span><span class="punctuation">:</span> <span class="string">"sum"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#bool查询  must_not和filter不会修改算分</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"bool"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"must"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"match"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"如家"</span></span><br><span class="line">          <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"must_not"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"range"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"price"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">              <span class="attr">"gt"</span><span class="punctuation">:</span> <span class="number">500</span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">          <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"filter"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"geo_distance"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"distance"</span><span class="punctuation">:</span> <span class="string">"10km"</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">"location"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">              <span class="attr">"lat"</span><span class="punctuation">:</span> <span class="number">39.945106</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">"lon"</span><span class="punctuation">:</span> <span class="number">116.353827</span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">          <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#sort排序 会放弃打分</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"match_all"</span><span class="punctuation">:</span> <span class="punctuation">{</span><span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"sort"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"score"</span><span class="punctuation">:</span> <span class="string">"asc"</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"price"</span><span class="punctuation">:</span> <span class="string">"desc"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#sort排序 按地理位置排序</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"match_all"</span><span class="punctuation">:</span> <span class="punctuation">{</span><span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"sort"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"_geo_distance"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"location"</span><span class="punctuation">:</span> <span class="string">"10.10,10.10"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"order"</span><span class="punctuation">:</span> <span class="string">"asc"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"unit"</span><span class="punctuation">:</span> <span class="string">"km"</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#分页查询 结果集(from+size)不能超过<span class="number">10000</span> 还可以写成search after(需排序<span class="punctuation">,</span>记录上次查询的最后一个文档<span class="punctuation">,</span>查询下一页数据)</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"match_all"</span><span class="punctuation">:</span> <span class="punctuation">{</span><span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"sort"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"price"</span><span class="punctuation">:</span> <span class="string">"desc"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">"from"</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">"size"</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#高亮</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"match"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"all"</span><span class="punctuation">:</span> <span class="string">"如家"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"highlight"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"fields"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"require_field_match"</span><span class="punctuation">:</span> <span class="string">"false"</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>​    4、聚合查询</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#聚合查询bucket  <span class="number">200</span>元以下的酒店按品牌分组后的数量升序展示<span class="number">10</span>条数据</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"range"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"price"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"lte"</span><span class="punctuation">:</span> <span class="number">200</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">"size"</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"aggs"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"brandAggs"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"terms"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"field"</span><span class="punctuation">:</span> <span class="string">"brand"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"size"</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"order"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"_count"</span><span class="punctuation">:</span> <span class="string">"asc"</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#聚合查询 bucket+metrics  对分组后的品牌按平均分进行降序排序</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"size"</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"aggs"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"brandAggs"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"terms"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"field"</span><span class="punctuation">:</span> <span class="string">"brand"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"size"</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"order"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"scoreAggs.avg"</span><span class="punctuation">:</span> <span class="string">"desc"</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"aggs"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"scoreAggs"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"stats"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"field"</span><span class="punctuation">:</span> <span class="string">"score"</span></span><br><span class="line">          <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>​    5、自定义分词器</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#创建分词器和搜索分词器不能混用 因为有可能词汇汉字不一样但是拼音一样导致搜索结果达不到预期效果</span><br><span class="line">PUT /test</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"settings"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"analysis"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"analyzer"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"my_analyzer"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"tokenizer"</span><span class="punctuation">:</span> <span class="string">"ik_max_word"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"filter"</span><span class="punctuation">:</span> <span class="string">"py"</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"filter"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"py"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"pinyin"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"keep_full_pinyin"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"keep_joined_full_pinyin"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"keep_original"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"limit_first_letter_length"</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span> </span><br><span class="line">          <span class="attr">"remove_duplicated_term"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"none_chinese_pinyin_tokenize"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>框架</title>
      <link href="/blog/2022/08/23/%E6%A1%86%E6%9E%B6/"/>
      <url>/blog/2022/08/23/%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="一、SpringBoot"><a href="#一、SpringBoot" class="headerlink" title="一、SpringBoot"></a>一、SpringBoot</h4><h5 id="1、bean的生命周期"><a href="#1、bean的生命周期" class="headerlink" title="1、bean的生命周期"></a>1、bean的生命周期</h5><p>​    1、Spring启动，查找并加载需要被Spring管理的bean，进行Bean的实例化</p><p>​    2、Bean实例化后对将Bean的引入和值注入到Bean的属性中</p><p>​    3、如果Bean实现了BeanNameAware接口的话，Spring将Bean的Id传递给setBeanName()方法</p><p>​    4、如果Bean实现了BeanFactoryAware接口的话，Spring将调用setBeanFactory()方法，将BeanFactory容器实例传入</p><p>​    5、如果Bean实现了ApplicationContextAware接口的话，Spring将调用Bean的setApplicationContext()方法，将bean所在应用上下</p><p>文引用传入进来。</p><p>​    6、如果Bean实现了BeanPostProcessor接口，Spring就将调用他们的postProcessBeforeInitialization()方法。</p><p>​    7、如果Bean 实现了InitializingBean接口，Spring将调用他们的afterPropertiesSet()方法。类似的，如果bean使用init-method声明了</p><p>初始化方法，该方法也会被调用</p><p>​    8、如果Bean 实现了BeanPostProcessor接口，Spring就将调用他们的postProcessAfterInitialization()方法。</p><p>​    9、此时，Bean已经准备就绪，可以被应用程序使用了。他们将一直驻留在应用上下文中，直到应用上下文被销毁。</p><p>​    10、如果bean实现了DisposableBean接口，Spring将调用它的destory()接口方法，同样，如果bean使用了destory-method 声明销</p><p>毁方法，该方法也会被调用。</p><h5 id="2、SpringMVC的执行流程"><a href="#2、SpringMVC的执行流程" class="headerlink" title="2、SpringMVC的执行流程"></a>2、SpringMVC的执行流程</h5><p>​    1、用户发送请求至前端控制器DispatcherServlet</p><p>​    2、DispatcherServlet收到请求调用处理器映射器HandlerMapping。</p><p>​    3、处理器映射器根据请求url找到具体的处理器，生成处理器执行链HandlerExecutionChain(包括处理器对象和处理器拦截器)一并返</p><p>回给DispatcherServlet。</p><p>​    4、DispatcherServlet根据处理器Handler获取处理器适配器HandlerAdapter执行HandlerAdapter处理一系列的操作，如：参数封</p><p>装，数据格式转换，数据验证等操作</p><p>​    5、执行处理器Handler(Controller，也叫页面控制器)。</p><p>​    6、Handler执行完成返回ModelAndView</p><p>​    7、HandlerAdapter将Handler执行结果ModelAndView返回到DispatcherServlet</p><p>​    8、DispatcherServlet将ModelAndView传给ViewReslover视图解析器</p><p>​    9、ViewReslover解析后返回具体View</p><p>​    10、DispatcherServlet对View进行渲染视图（即将模型数据model填充至视图中）。</p><p>​    11、DispatcherServlet响应用户。</p><h5 id="3、SpringBoot配置优先级"><a href="#3、SpringBoot配置优先级" class="headerlink" title="3、SpringBoot配置优先级"></a>3、SpringBoot配置优先级</h5><p>​    1、配置优先级</p><p>​    （1）命令行参数</p><p>​    （2）来自 java:comp/env 的 JNDI 属性</p><p>​    （3）Java 系统属性（System.getProperties()） </p><p>​    （4）操作系统环境变量</p><p>​    （5）RandomValuePropertySource 配置的 random.* 属性值</p><p>​    （6）配置文件（YAML文件、Properties 文件）</p><p>​    （7）@Configuration 注解类上的 @PropertySource 指定的配置文件</p><p>​    （8）通过SpringApplication.setDefaultProperties 指定的默认属性</p><p>​    2、配置文件优先级</p><h1 id=""><a href="#" class="headerlink" title=""></a><img src="/Applications/Typora.app/Contents/image/springboot配置文件加载顺序.png" alt="springboot配置优先级"></h1><h5 id="4、Gateway"><a href="#4、Gateway" class="headerlink" title="4、Gateway"></a>4、Gateway</h5><p>​        GatewayFilter Factories中有30种过滤器，spring  gateway网关中过滤器执行顺序按照order的值执行，值越小，优先级越高</p><p>globalFilter的order值由我们自己指定，defaultFilter和路由filter由spring声明式指定，如果值一样，则执行defaultFilter、路由</p><p>filter、globalFilter。defaultFilter和路由filter类型是GatewayFilter，globalFilter经过GatewayFilterAdapter转换成GatewayFilter</p><h5 id="5、AOP"><a href="#5、AOP" class="headerlink" title="5、AOP"></a>5、AOP</h5><p>​    1、不存在环绕通知执行顺序：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> before执行</span><br><span class="line"><span class="number">2</span> 方法执行</span><br><span class="line"><span class="number">3</span> AfterThrow执行</span><br><span class="line"><span class="number">4</span> After执行</span><br></pre></td></tr></tbody></table></figure><p>​    2、存在环绕通知@Around执行顺序：</p>   <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before("point()")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>{</span><br><span class="line">    System.out.println(<span class="string">"2 before执行"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@After("point()")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint joinPoint)</span>{</span><br><span class="line">    System.out.println(<span class="string">"5 After执行"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterReturning("point()")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(JoinPoint joinPoint)</span>{</span><br><span class="line">    System.out.println(<span class="string">"4 AfterReturning执行"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterThrowing(pointcut = "point()")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(JoinPoint joinPoint)</span>{</span><br><span class="line">    System.out.println(<span class="string">"4 AfterThrow执行"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Around("point()")</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">test</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable {</span><br><span class="line">    System.out.println(<span class="string">"1 around前执行"</span>);</span><br><span class="line">    <span class="comment">//3、目标方法执行 Controller层方法</span></span><br><span class="line">  <span class="comment">//6、切点执行</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">    System.out.println(<span class="string">"7 around后执行"</span>);</span><br><span class="line">    <span class="keyword">return</span> proceed;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="6、加载顺序"><a href="#6、加载顺序" class="headerlink" title="6、加载顺序"></a>6、加载顺序</h5><p>​    1、同一个类中加载顺序</p><p>​        Constructor &gt;&gt; @Autowired &gt;&gt;@ PostConstruct&gt;&gt;@Bean，跟Bean生命周期有关</p><p>​    2、@Order注解并不能改变Bean加载<a href="https://so.csdn.net/so/search?q=%E4%BC%98%E5%85%88%E7%BA%A7&amp;spm=1001.2101.3001.7020">优先级</a>，@Order注解用于设置装载到list中Bean的顺序，用于比较多的是</p><ul><li>控制AOP的类的加载顺序，也就是被@Aspect标注的类</li><li>控制ApplicationListener实现类的加载顺序</li><li>控制CommandLineRunner实现类的加载顺序</li></ul><p>​    3、@AutoConfigureBefore、@AutoConfigureAfter、@AutoConfigureOrder这三个注解是给Springboot自动配置类排序使用的，注</p><p>意是自动配置类(META_INF下的spring.factories配置文件)，并非是普通的配置类。</p><p>​    4、@DependsOn注解可以用来控制bean的创建顺序，该注解用于声明当前bean依赖于另外一个bean。所依赖的bean会被容器确保</p><p>在当前bean实例化之前被实例化。</p><p>​    5、在@Bean标注的方法上，如果你传入了参数，springboot会自动会为这个参数在spring上下文里寻找这个类型的引用。并先初始化</p><p>这个类的实例。利用此特性，我们也可以控制bean的加载顺序。</p><h5 id="7、约定大于配置"><a href="#7、约定大于配置" class="headerlink" title="7、约定大于配置"></a>7、约定大于配置</h5><p>​    1、开发人员仅需规定应用中不符合约定的部分</p><p>​    2、在没有规定配置的地方，采用默认配置，以力求最简配置为核心思想总的来说，上面两条都遵循了推荐默认配置的思想。当存在特</p><p>殊需求的时候，自定义配置即可。这样可以大大的减少配置工作，这就是所谓的“约定”。</p><h5 id="8、校验"><a href="#8、校验" class="headerlink" title="8、校验"></a>8、校验</h5><p>​    1、官方提供：@NotBlank、@Size等。tips(除了@NotNull、@NotBlank外，其它的不会对null进行校验)</p><p>​    2、自定义: 需在自定义注解上使用元注解@Constraint(validatedBy = xxx.class)，xxx.class实现ConstraintValidator接口进行处理</p><h5 id="9、条件注解"><a href="#9、条件注解" class="headerlink" title="9、条件注解"></a>9、条件注解</h5><p>​    1、@ConditionalOnProperty两个属性matchIfMissing、havingValue</p><p>​            (1)没有havingValue属性时候，matchIfMissing为true时，配置文件缺少字段也会注入成功，为false时有配置信息则可以注入，没有则不会注入</p><p>​            (2)有havingValue时候，havingValue值必须和配置值相同才会注入成功，不管matchIfMissing的值</p><h5 id="10、依赖注入"><a href="#10、依赖注入" class="headerlink" title="10、依赖注入"></a>10、依赖注入</h5><p>​    1、通过构造方法注入</p><p>​        (1)采用构造方法上带有@Autowired注解注入</p><p>​        (2)无@Autowired时候，若有无参构造则采用无参构造，无则采用其它构造方法</p><p>​    2、setter注入</p><p>​        (1)在需要注入的setter方法上加@Autored、@Resource注解</p><p>​        (2)只要setter方法上有@Autored、@Resource注解则一定会执行此注入方式，不管有无构造注入、字段注入</p><h4 id="二、Mybatis"><a href="#二、Mybatis" class="headerlink" title="二、Mybatis"></a>二、Mybatis</h4><h5 id="1、问题"><a href="#1、问题" class="headerlink" title="1、问题"></a>1、问题</h5><p>​        (1)mapper层使用Integer、String等做参数时候，出现There is no getter for property named ‘xxx’ in ‘class java.lang.String’</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1、在mapper层使用@Param映射</span><br><span class="line">2、使用_parameter、value做参数</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">SELECT</span><br><span class="line">...</span><br><span class="line">        <span class="comment">&lt;!--字符串比较加toString()-&gt;</span></span><br><span class="line"><span class="comment">&lt;choose&gt;</span></span><br><span class="line"><span class="comment">&lt;when test="param == '0'.toString()"&gt;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">&lt;/when&gt;</span></span><br><span class="line"><span class="comment">            -------</span></span><br><span class="line"><span class="comment">&lt;when test="_parameter == '0'.toString()"&gt;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">&lt;/when&gt;</span></span><br><span class="line"><span class="comment">&lt;/choose&gt;  </span></span><br><span class="line"><span class="comment">&lt;/select&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="2、-和-区别"><a href="#2、-和-区别" class="headerlink" title="2、#和$区别"></a>2、#和$区别</h5><p>​        (1)使用#{param}，是经过预编译的，会将传递过来的参数换转换成“param”</p><p>​        (2)使用${param}，是未经过预编译的，仅仅是取变量的值，是非安全的，存在SQL注入问题。</p><h5 id="3、一、二级缓存"><a href="#3、一、二级缓存" class="headerlink" title="3、一、二级缓存"></a>3、一、二级缓存</h5><p>​        (1)spring结合mybatis后，在未开启事物的情况之下，每次查询，spring都会关闭旧的sqlSession而创建新的sqlSession,因此此时的</p><p>一级缓存是没有启作用的。在开启事物的情况之下，spring使用threadLocal获取当前资源绑定同一个sqlSession，因此此时一级缓存是</p><p>有效的。</p><p>​        (2)查出的数据都会被默认先放在一级缓存中。只有会话提交或者关闭以后，一级缓存中的数据才会转移到二级缓存中</p><p>​        (3)一级缓存：sqlSession级别的缓存。（相当于一个方法内的缓存）每一次会话都对应自己的一级缓存，作用范围比较小，一旦会话</p><p>关闭就查询不到了；一级缓存默认是一直开启的，是SqlSession级别的一个Map；与数据库同一次会话期间查询到的数据会放在本地缓存</p><p>中。</p><p>​    (4)基于namespace名称空间级别的缓存：一个namespace对应一个二级缓存，一个会话，查询一条数据，这个数据就会被放在当前会</p><p>话的一级缓存中。</p><p>​    (5)如果会话关闭；一级缓存中的数据会被保存到二级缓存中；新的会话查询信息，就可以参照二级缓存中的内容。</p><h5 id="4、二级缓存开启"><a href="#4、二级缓存开启" class="headerlink" title="4、二级缓存开启"></a>4、二级缓存开启</h5><p>​        (1)开启全局二级缓存配置：<setting name="cacheEnabled" value="true"></setting></p><p>​        (2)去mapper.xml中配置使用二级缓存：<cache></cache></p><p>​        (3)我们的POJO需要实现序列化接口</p><h5 id="5、一级缓存失效原因"><a href="#5、一级缓存失效原因" class="headerlink" title="5、一级缓存失效原因"></a>5、一级缓存失效原因</h5><p>​        (1)不同的会话对象</p><p>​        (2)会话对象相同，查询不在缓存中的内容</p><p>​        (3)两次查询期间进行了增删改的操作</p><p>​        (4)会话完成后手动清空缓存    </p><h5 id="6、缓存执行顺序"><a href="#6、缓存执行顺序" class="headerlink" title="6、缓存执行顺序"></a>6、缓存执行顺序</h5><p>​        (1)先判断二级缓存是否开启，如果没开启，再判断一级缓存是否开启，如果没开启，直接查数据库</p><p>​        (2)如果一级缓存关闭，即使二级缓存开启也没有数据，因为二级缓存的数据从一级缓存获取</p><p>​        (3)一般不会关闭一级缓存</p><p>​        (4)二级缓存默认不开启</p><p>​        (5)如果二级缓存关闭，直接判断一级缓存是否有数据，如果没有就查数据库</p><p>​        (6)如果二级缓存开启，先判断二级缓存有没有数据，如果有就直接返回；如果没有，就查询一级缓存，如果有就返回，没有就查询数</p><p>据库。</p><h4 id="三、Nacos"><a href="#三、Nacos" class="headerlink" title="三、Nacos"></a>三、Nacos</h4><p>​    1、负载均衡策略：配置同集群访问后，优先随机访问同集群，当本集群的实例宕机了再访问其他集群的实例，此时会有警告产生，跨</p><p>集群访问</p><p>​    2、服务默认为临时实例，配置服务为非临时实例时，Nacos主动询问实例是否健康，若服务宕机后会立即pull给消费者，且Nacos不会</p><p>剔除服务。</p><p>​    3、配置namespace环境隔离，则不同环境的服务不能通信</p><h4 id="四、Nginx"><a href="#四、Nginx" class="headerlink" title="四、Nginx"></a>四、Nginx</h4><p>​    1、在nginx中配置proxy_pass时，如果在proxy_pass后面的url加/，相当于是绝对根路径，则nginx不会把location中匹配的路径部分代理走。如果没有/，则会把匹配的路径部分给代理走。比如访问：127.0.0.1/a/index.html</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /a {</span><br><span class="line">  <span class="attribute">proxy_pass</span>  http://127.0.0.1/</span><br><span class="line">}</span><br><span class="line">相当于http://127.0.0.1/index.html</span><br><span class="line">location /a {</span><br><span class="line">      <span class="attribute">proxy_pass</span>  http://127.0.0.1</span><br><span class="line">}</span><br><span class="line">相当于http://127.0.0.1/a/index.html</span><br><span class="line"></span><br><span class="line">location /a {</span><br><span class="line">      <span class="attribute">proxy_pass</span>  http://127.0.0.1/linux/</span><br><span class="line">}</span><br><span class="line">相当于http://127.0.0.1/linux/index.html</span><br><span class="line"></span><br><span class="line">location /a {</span><br><span class="line">      <span class="attribute">proxy_pass</span>  http://127.0.0.1/linux</span><br><span class="line">}</span><br><span class="line">相当于http://127.0.0.1/linuxindex.html</span><br></pre></td></tr></tbody></table></figure><h4 id="五、Ribbon"><a href="#五、Ribbon" class="headerlink" title="五、Ribbon"></a>五、Ribbon</h4><h5 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h5><p>​    (1)发送请求被RibbonLoadBalancerClient拦截</p><p>​    (2)获取请求中的服务名称</p><p>​    (3)交给DynamicServerListLoadBalancer去注册中心拉去服务地址</p><p>​    (4)返回服务列表给DynamicServerListLoadBalancer，匹配IRule定义的策略选择服务</p><p>​    (5)用服务地址替换原来的地址发送请求</p><h5 id="2、负载均衡策略"><a href="#2、负载均衡策略" class="headerlink" title="2、负载均衡策略"></a>2、负载均衡策略</h5><p>​    (1)Bean方式，全局</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​    (2)配置方式，局部、灵活</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">服务名称:</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></tbody></table></figure><h5 id="3、Ribbon加载方式"><a href="#3、Ribbon加载方式" class="headerlink" title="3、Ribbon加载方式"></a>3、Ribbon加载方式</h5><p>​    默认采用懒加载所以第一次调用时间会长，可以配置采用饥饿加载，服务启动就把服务地址缓存在DynamicServerListLoadBalancer</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启饥饿加载</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="comment"># 指定饥饿加载的服务名称</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">userservice</span></span><br></pre></td></tr></tbody></table></figure><h4 id="六、Logback"><a href="#六、Logback" class="headerlink" title="六、Logback"></a>六、Logback</h4><h5 id="1、日志两大规范"><a href="#1、日志两大规范" class="headerlink" title="1、日志两大规范"></a>1、日志两大规范</h5><p>​    (1)Commons Logging  (JCL)</p><p>​    (2)Simple Logging Facade for JAVA (slf4j)</p><p>​    由于log4j性能问题，采用logback替代log4j</p><h5 id="2、日志级别"><a href="#2、日志级别" class="headerlink" title="2、日志级别"></a>2、日志级别</h5><p>​    (1)级别程度是：TRACE&lt;DEBUG&lt;INFO&lt;WARN&lt;ERROR</p><pre><code> (2)默认级别debug，只能输出级别大于或者等于此级别的信息，例如设置为INFO，则只能输出INFO、WARN、ERROR的日志信息</code></pre><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基础</title>
      <link href="/blog/2022/08/23/%E5%9F%BA%E7%A1%80/"/>
      <url>/blog/2022/08/23/%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h4 id="一、HashMap"><a href="#一、HashMap" class="headerlink" title="一、HashMap"></a>一、HashMap</h4><h5 id="1、常见Map比较"><a href="#1、常见Map比较" class="headerlink" title="1、常见Map比较"></a>1、常见Map比较</h5><p>​    1、hashmap 线程不安全，只允许有一个key为null，允许多个value为null</p><p>​    2、hashtable线程安全，用的是内置锁synchronized，不允许key或value为null</p><p>​    3、linkedhashmap 能保留put 键值对的顺序</p><p>​    4、treemap实现sortmap接口能默认对put的键值对进行key排序</p><h5 id="2、ConcurrentHashMap"><a href="#2、ConcurrentHashMap" class="headerlink" title="2、ConcurrentHashMap"></a>2、ConcurrentHashMap</h5><p>​    1、concurentHashMap与hashmap本质上并没有什么区别，只是concurrenthashMap是线程安全的</p><p>​    2、jdk1.7 采用了Segment分段锁，锁住几个槽位</p><p>​    3、jdk1.8则采用 Node +CAS+synchronized来保证并发安全，锁的粒度下降了</p><h5 id="3、hashmap是线程不安全"><a href="#3、hashmap是线程不安全" class="headerlink" title="3、hashmap是线程不安全"></a>3、hashmap是线程不安全</h5><p>​    1、多线程下对hashmap进行添加，删除，修改都可能会造成数据覆盖</p><p>​    2、jdk1.7扩容时容易导致死循环</p><h5 id="4、putIfAbsent"><a href="#4、putIfAbsent" class="headerlink" title="4、putIfAbsent"></a>4、putIfAbsent</h5><p>​    1、map.putIfAbsent(key,value)，如果map中存在这个key，则返回key对应的值，如果不存在则返回null然后将值插入进去</p><h4 id="二、比较器"><a href="#二、比较器" class="headerlink" title="二、比较器"></a>二、比较器</h4><p>　　Comparable是排序接口，若一个类实现了Comparable接口，就意味着“该类支持排序”。而Comparator是比较器，我们若需要控制</p><p>某个类的次序，可以建立一个“该类的比较器”来进行排序。</p><p>​        两种方法各有优劣， 用Comparable 简单， 只要实现Comparable 接口的对象直接就成为一个可以比较的对象，但是需要修改源代</p><p>码。 用Comparator 的好处是不需要修改源代码， 而是另外实现一个比较器， 当某个自定义的对象需要作比较的时候，把比较器和对象</p><p>一起传递过去就可以比大小了， 并且在Comparator 里面用户可以自己实现复杂的可以通用的逻辑，使其可以匹配一些比较简单的对象，</p><p>那样就可以节省很多重复劳动了。</p><h4 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h4><h4 id="四、Cookie和Session"><a href="#四、Cookie和Session" class="headerlink" title="四、Cookie和Session"></a>四、Cookie和Session</h4><h5 id="1、存储位置"><a href="#1、存储位置" class="headerlink" title="1、存储位置"></a>1、存储位置</h5><p>​    1、cookie存储在客户端，session存储在服务器</p><h5 id="2、生成方式"><a href="#2、生成方式" class="headerlink" title="2、生成方式"></a>2、生成方式</h5><p>​    1、第一次访问服务端时候，会创建一个session对象，并指定id为Jsessionid（Tomcat），然后响应给客户端，后续访问cookie里携带</p><p>Jsessionid，服务端识别，判断是不是上次会话，如果是则不会创建session对象</p><h4 id="五、线程"><a href="#五、线程" class="headerlink" title="五、线程"></a>五、线程</h4><h5 id="1、进程、线程、协程"><a href="#1、进程、线程、协程" class="headerlink" title="1、进程、线程、协程"></a>1、进程、线程、协程</h5><h5 id="2、线程的地址空间"><a href="#2、线程的地址空间" class="headerlink" title="2、线程的地址空间"></a>2、线程的地址空间</h5><h5 id="3、线程池的七个参数"><a href="#3、线程池的七个参数" class="headerlink" title="3、线程池的七个参数"></a>3、线程池的七个参数</h5><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>​    1、ThreadLocal、ThreadLocalMap、Thread区别</p><p>​        (1)ThreadLocal内部类ThreadLocalMap，ThreadLocalMap的内部类Entry，Entry存储的键是ThreadLocal，值是调用ThreadLocal</p><p>的set方法设置的值Thread有个成员变量ThreadLocalMap， ThreadLocal.ThreadLocalMap threadLocals = null</p><p>​    2、多线程哪些内存是共享的，哪些不是共享的</p><p>​        (1)Java虚拟机在执行Java程序的时候会把它管理的内存划分为5个不同的区域，其中方法区和堆是线程共享的，而虚拟机栈、程序计</p><p>数器、本地方法栈是线程不共享的</p><p>​    3、一个线程能访问到另一个线程的局部变量吗</p><p>​    4、synchronized和volatile区别 </p><h4 id="六、Http"><a href="#六、Http" class="headerlink" title="六、Http"></a>六、Http</h4><h5 id="1、三次握手"><a href="#1、三次握手" class="headerlink" title="1、三次握手"></a>1、三次握手</h5><p>​    1、第一次握手：第一次握手是客户端发送同步报文到服务端，这个时候客户端是知道自己具备发送数据的能力的，但是不知道服务端</p><p>是否有接收和发送数据的能力。</p><p>​    2、第二次握手：当服务端接收到同步报文后，回复确认同步报文，此时服务端是知道客户端具有发送报文的能力，并且知道自己具有</p><p>接收和发送数据的能力，但是并不知道客户端是否有接收数据的能力。</p><p>​    3、第三次握手：当客户端收到服务端的确认报文后，知道服务端具备接收和发送数据的能力，但是此时服务端并不知道自己具有接收</p><p>的能力，所以还需要发送一个确认报文，告知服务端自己是具有接收能力的。</p><h5 id="2、四次挥手"><a href="#2、四次挥手" class="headerlink" title="2、四次挥手"></a>2、四次挥手</h5><p>​    1、第一次挥手客户端发起关闭连接的请求给服务端</p><p>​    2、第二次挥手：服务端收到关闭请求的时候可能这个时候数据还没发送完，所以服务端会先回复一个确认报文，表示自己知道客户端</p><p>想要关闭连接了，但是因为数据还没传输完，所以还需要等待。</p><p>​    3、第三次挥手：当数据传输完了，服务端会主动发送一个 FIN 报文，告诉客户端，表示数据已经发送完了，服务端这边准备关闭连接</p><p>了。</p><p>​    4、第四次挥手：当客户端收到服务端的 FIN 报文过后，会回复一个 ACK 报文，告诉服务端自己`知道了，再等待一会就关闭连接。</p><h5 id="3、Http状态码"><a href="#3、Http状态码" class="headerlink" title="3、Http状态码"></a>3、Http状态码</h5><h5 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h5><p>​    1、为什么握手要三次，挥手却要四次呢</p><p>​        那是因为握手的时候并没有数据传输，所以服务端的 SYN 和 ACK 报文可以一起发送，但是挥手的时候有数据在传输，所以 ACK 和 </p><p>FIN 报文不能同时发送，需要分两步，所以会比握手多一步。</p><p>​    2、为什么客户端在第四次挥手后还会等待 2MSL</p><p>​        等待2MSL是因为保证服务端接收到了ACK报文，因为网络是复杂了，很有可能ACK报文丢失了，如果服务端没接收到ACK报文的</p><p>话，会重新发送FIN报文，只有当客户端等待了2MSL都没有收到重发的FIN报文时就表示服务端是正常收到了ACK报文，那么这个时候客</p><p>户端就可以关闭了。</p><p>​    3、浏览器输入一个url发生了什么</p><p>​        输入网址、解析域名、建立Tcp连接、发送请求报文、响应数据报文、关闭Tcp连接、渲染页面</p><p>​    4、get和post区别</p><p>​        (1)GET在浏览器回退时是无害的，而POST会再次提交请求数据</p><p>​        (2)GET参数通过URL传递，POST放在Request body中</p><p>​        (3)GET请求会被浏览器主动缓存，而POST不会，除非手动设置</p><p>​        (4)GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留</p><p>​        (5)GET请求在URL中传送的参数是有长度限制的，而POST没有</p><p>​        (6)最大区别，get请求发送一个tcp数据包，post请求发送两个tcp数据包</p><h4 id="七、GC"><a href="#七、GC" class="headerlink" title="七、GC"></a>七、GC</h4><h4 id="八、数据在内存中存放的位置"><a href="#八、数据在内存中存放的位置" class="headerlink" title="八、数据在内存中存放的位置"></a>八、数据在内存中存放的位置</h4><h4 id="九、BIO、NIO、AIO"><a href="#九、BIO、NIO、AIO" class="headerlink" title="九、BIO、NIO、AIO"></a>九、BIO、NIO、AIO</h4><h4 id="十、对称加密和非对称加密"><a href="#十、对称加密和非对称加密" class="headerlink" title="十、对称加密和非对称加密"></a>十、对称加密和非对称加密</h4><h4 id="十一、final、finally、finalize"><a href="#十一、final、finally、finalize" class="headerlink" title="十一、final、finally、finalize"></a>十一、final、finally、finalize</h4><p>1、final 可以用来修饰类、方法、变量，分别有不同的意义，final 修饰的 class 代表不可以继承扩展，比如 String 类</p><p>2、final 的变量是不可以修改的；Java 里用 final 修饰符去修饰一个方法的唯一正确用途就是表达：这个方法原本是一个虚方法，现在通</p><p>过 final 来声明这个方法不允许在派生类中进一步被覆写（override）。</p><p>3、finally 是 Java 保证重点代码一定要被执行的一种机制。可以使用 try-finally 或者 try-catch-finally 来进行关闭资源、保证 unlock 锁等</p><p>动作。</p><p>4、finalize 是基础类 java.lang.Object 的一个方法，设计目的是保证对象在被垃圾收集前完成特定资源的回收。</p><p>5、finalize 机制现在已经不推荐使用，并且在 JDK 9 开始被标记为 deprecated</p><p>6、final修饰的变量必须初始化赋值或者构造方法里面赋值</p><p>7、static final修饰的变量必须初始化赋值或者在静态代码块里面赋值</p><h4 id="十二、访问修饰符"><a href="#十二、访问修饰符" class="headerlink" title="十二、访问修饰符"></a>十二、访问修饰符</h4><p>1、public : 对所有类可见。使用对象：类、接口、变量、方法</p><p>2、protected: 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></p><p>3、default (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</p><p>4、private : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></p><h4 id="十三、枚举"><a href="#十三、枚举" class="headerlink" title="十三、枚举"></a>十三、枚举</h4><p>1、每个枚举 其实都是class，且所有的枚举值都是 public static final 的，可用javap xxx.class查看。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span>{</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">通过javap ./Color.class查看</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">com</span>.qz.nty.model.enums.Color <span class="keyword">extends</span> <span class="title class_">java</span>.lang.Enum&lt;com.qz.nty.model.enums.Color&gt; {</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.qz.nty.model.enums.Color RED;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.qz.nty.model.enums.Color GREEN;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.qz.nty.model.enums.Color BLUE;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> com.qz.nty.model.enums.Color[] values();</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> com.qz.nty.model.enums.Color <span class="title function_">valueOf</span><span class="params">(java.lang.String)</span>;</span><br><span class="line">  <span class="keyword">static</span> {};</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">values(), ordinal() 和 valueOf() 方法</span><br><span class="line"><span class="keyword">enum</span> 定义的枚举类默认继承了 java.lang.Enum 类，并实现了 java.lang.Serializable 和 java.lang.Comparable 两个接口。</span><br><span class="line"></span><br><span class="line">values(), ordinal() 和 valueOf() 方法位于 java.lang.Enum 类中：</span><br><span class="line"></span><br><span class="line">values() 返回枚举类中所有的值。</span><br><span class="line">ordinal()方法可以找到每个枚举常量的索引，就像数组索引一样。</span><br><span class="line">valueOf()方法返回指定字符串值的枚举常量。</span><br><span class="line">枚举类中的抽象方法实现，需要枚举类中的每个对象都对其进行实现。</span><br></pre></td></tr></tbody></table></figure><h4 id="十四、序列化"><a href="#十四、序列化" class="headerlink" title="十四、序列化"></a>十四、序列化</h4><h4 id="十五、SPI、factories"><a href="#十五、SPI、factories" class="headerlink" title="十五、SPI、factories"></a>十五、SPI、factories</h4><h5 id="1、SPI介绍"><a href="#1、SPI介绍" class="headerlink" title="1、SPI介绍"></a>1、SPI介绍</h5><p>​        SPI（Service Provider Interface），是JDK内置的一种服务提供发现机制，可以用来启用框架扩展和替换组件。JDK的spi机制提供了 </p><p>ServiceLoader 类用于加载、解析spi接口的配置文件，ServiceLoader实现了Iterable接口，可迭代，但只能以迭代器的方式进行操作。</p><p>使用 hasNext() 时才会加载解析 META-INF/services 下对应的接口配置文件，使用 next() 时才会通过实现类的 Class 对象newInstance() </p><p>方法（实质是通过反射调用无参构造器）创建实例。</p><h5 id="2、使用教程"><a href="#2、使用教程" class="headerlink" title="2、使用教程"></a>2、使用教程</h5><p>​        在模块本身的resources下新建目录 META-INF/services，services目录下新建文件，以服务接口的全限定接口名作为文件名，文件中</p><p>指定该服务接口要使用的具体实现类。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServiceLoader.load(Class&lt;S&gt; service,ClassLoader loader)</span><br></pre></td></tr></tbody></table></figure><h5 id="3、Spring-factories"><a href="#3、Spring-factories" class="headerlink" title="3、Spring factories"></a>3、Spring factories</h5><h5 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h5><p>​    factories可以看做是spring结合自身需要提供的一种spi机制，设计思想和jdk的spi机制差不多。factories机制在spring家族中广泛使用spring、springboot、springcloud中都大量使用了factories机制。spring体系的很多扩展配置都是通过spring.factories 指定的，比如应用初始化器 ApplicationContextInitializer、应用监听器ApplicationListener。注解本质是一种特殊接口，也可以用 factories 指定实现类，比如springboot中的 @EnableAutoConfiguration 注解就使用了factories指定要应用的实现类。</p><h5 id="4、使用教程"><a href="#4、使用教程" class="headerlink" title="4、使用教程"></a>4、使用教程</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpringFactoriesLoader.loadFactories(Class&lt;T&gt; factoryType, <span class="meta">@Nullable</span> ClassLoader classLoader)</span><br><span class="line">SpringFactoriesLoader.loadFactoryNames(Class&lt;T&gt; factoryType, <span class="meta">@Nullable</span> ClassLoader classLoader)</span><br></pre></td></tr></tbody></table></figure><h5 id="5、区别"><a href="#5、区别" class="headerlink" title="5、区别"></a>5、区别</h5><p>​        jdk的spi机制，一个配置文件只能指定一个接口要使用的实现类；spring的factories机制，一个配置文件可以指定多个接口要使用的</p><p>实现类。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>笔记</title>
      <link href="/blog/2021/08/22/%E7%AC%94%E8%AE%B0/"/>
      <url>/blog/2021/08/22/%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><p>1、自定义native方法</p><p>2、自定义idea插件</p><h3 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h3><h4 id="1-1、HashMap"><a href="#1-1、HashMap" class="headerlink" title="1.1、HashMap"></a>1.1、HashMap</h4><p>(1)hashmap，linkedhashmap，treemap，hashtable之间的区别</p><p>​    1.hashmap 线程不安全，只允许有一个key为null，允许多个value为null</p><p>​    2.hashtable线程安全，用的是内置锁synchronized，不允许key或value为null</p><p>​    3.linkedhashmap 能保留put 键值对的顺序</p><p>​    4.treemap实现sortmap接口能默认对put的键值对进行key排序</p><p>(2)ConcurrentHashMap用过吗？简单谈一谈</p><p>​    1.concurentHashMap与hashmap本质上并没有什么区别，只是concurrenthashMap是线程安全的。</p><p>​    2.jdk1.7 采用了Segment分段锁，锁住几个槽位</p><p>​    3.jdk1.8则采用 Node +CAS+synchronized来保证并发安全，锁的粒度下降了。</p><p>(3)为什么称hashmap是线程不安全的</p><p>​    1、多线程下对hashmap进行添加，删除，修改都可能会造成数据覆盖</p><p>​    2、jdk1.7扩容时容易导致死循环</p><p>（4）putIfAbsent</p><p>​    map.putIfAbsent(key,value)，如果map中存在这个key，则返回key对应的值，如果不存在则返回null然后将值插入进去</p><h4 id="1-2、Comparable和Comparator区别比较"><a href="#1-2、Comparable和Comparator区别比较" class="headerlink" title="1.2、Comparable和Comparator区别比较"></a>1.2、Comparable和Comparator区别比较</h4><p>　　Comparable是排序接口，若一个类实现了Comparable接口，就意味着“该类支持排序”。而Comparator是比较器，我们若需要控制某个类的次序，可以建立一个“该类的比较器”来进行排序。</p><p>　　Comparable相当于“内部比较器”，而Comparator相当于“外部比较器”。</p><p>　　两种方法各有优劣， 用Comparable 简单， 只要实现Comparable 接口的对象直接就成为一个可以比较的对象，但是需要修改源代码。 用Comparator 的好处是不需要修改源代码， 而是另外实现一个比较器， 当某个自定义的对象需要作比较的时候，把比较器和对象一起传递过去就可以比大小了， 并且在Comparator 里面用户可以自己实现复杂的可以通用的逻辑，使其可以匹配一些比较简单的对象，那样就可以节省很多重复劳动了。</p><h4 id="1-3、软应用、弱引用、强引用、虚应用区别"><a href="#1-3、软应用、弱引用、强引用、虚应用区别" class="headerlink" title="1.3、软应用、弱引用、强引用、虚应用区别"></a>1.3、软应用、弱引用、强引用、虚应用区别</h4><h4 id="1-4、Cookie和Session"><a href="#1-4、Cookie和Session" class="headerlink" title="1.4、Cookie和Session"></a>1.4、Cookie和Session</h4><p>​    1.cookie存储在客户端，session存储在服务器<br>​    2.第一次访问服务端时候，会创建一个session对象，并指定id为Jsessionid（Tomcat），然后响应给客户端，后续访问cookie里携带Jsessionid，服务端识别，判断是不是上次会话，如果是则不会创建session对象。</p><h4 id="1-5、线程："><a href="#1-5、线程：" class="headerlink" title="1.5、线程："></a>1.5、线程：</h4><p>1、ThreadLocal、ThreadLocalMap、Thread区别<br>        ThreadLocal内部类ThreadLocalMap，ThreadLocalMap的内部类Entry，Entry存储的键是ThreadLocal，值是调用ThreadLocal的set方法设置的值<br>Thread有个成员变量ThreadLocalMap， ThreadLocal.ThreadLocalMap threadLocals = null;</p><p>2、进程、线程、协程的理解<br>3、多线程哪些内存是共享的，哪些不是共享的<br>    Java虚拟机在执行Java程序的时候会把它管理的内存划分为5个不同的区域，其中 【方法区】和【堆】是线程共享的，<br>    而【虚拟机栈】、【程序计数器】、【本地方法栈】是线程不共享的，<br>4、线程的地址空间是什么<br>5、一个线程能访问到另一个线程的局部变量吗<br>6、线程池的七个参数<br>7、synchronized和volatile区别 </p><h4 id="1-6、http"><a href="#1-6、http" class="headerlink" title="1.6、http:"></a>1.6、http:</h4><p>1、浏览器输入一个url发生了什么<br>    输入网址、解析域名、建立Tcp连接、发送请求报文、响应数据报文、关闭Tcp连接、渲染页面</p><p>2、get和post区别<br>    GET在浏览器回退时是无害的，而POST会再次提交请求数据。<br>    GET参数通过URL传递，POST放在Request body中<br>    GET请求会被浏览器主动缓存，而POST不会，除非手动设置。<br>    GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。<br>    GET请求在URL中传送的参数是有长度限制的，而POST没有。<br>    最大区别，get请求发送一个tcp数据包，post请求发送两个tcp数据包</p><p>3、三次握手四次挥手，为什么是三次和四次<br>        第一次握手：第一次握手是客户端发送同步报文到服务端，这个时候客户端是知道自己具备发送数据的能力的，但是不知道服务端是否有接收和发送数据的能力；</p><p>​        第二次握手：当服务端接收到同步报文后，回复确认同步报文，此时服务端是知道客户端具有发送报文的能力，并且知道自己具有接收和发送数据的能力，但是并不知道客户端是否有接收数据的能力；</p><p>​        第三次握手：当客户端收到服务端的确认报文后，知道服务端具备接收和发送数据的能力，但是此时服务端并不知道自己具有接收的能力，所以还需要发送一个确认报文，告知服务端自己是具有接收能力的。</p><p>​        第一次挥手客户端发起关闭连接的请求给服务端；</p><p>​        第二次挥手：服务端收到关闭请求的时候可能这个时候数据还没发送完，所以服务端会先回复一个确认报文，表示自己知道客户端想要关闭连接了，但是因为数据还没传输完，所以还需要等待；</p><p>​        第三次挥手：当数据传输完了，服务端会主动发送一个 FIN 报文，告诉客户端，表示数据已经发送完了，服务端这边准备关闭连接了。</p><p>​        第四次挥手：当客户端收到服务端的 FIN 报文过后，会回复一个 ACK 报文，告诉服务端自己`知道了，再等待一会就关闭连接。</p><p>3.1为什么握手要三次，挥手却要四次呢？</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">那是因为握手的时候并没有数据传输，所以服务端的 SYN 和 ACK 报文可以一起发送，但是挥手的时候有数据在传输，所以 ACK 和 FIN 报文不能同时发送，需要分两步，所以会比握手多一步。</span><br></pre></td></tr></tbody></table></figure><p>3.2为什么客户端在第四次挥手后还会等待 2MSL？</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">等待2MSL是因为保证服务端接收到了ACK报文，因为网络是复杂了，很有可能ACK报文丢失了，如果服务端没接收到ACK报文的话，会重新发送FIN报文，只有当客户端等待了2MSL都没有收到重发的FIN报文时就表示服务端是正常收到了ACK报文，那么这个时候客户端就可以关闭了。</span><br></pre></td></tr></tbody></table></figure><p>4、HTTP状态码</p><h4 id="1-7、GC"><a href="#1-7、GC" class="headerlink" title="1.7、GC"></a>1.7、GC</h4><h4 id="1-8、拆箱装箱"><a href="#1-8、拆箱装箱" class="headerlink" title="1.8、拆箱装箱"></a>1.8、拆箱装箱</h4><p>​    三目运算空指针问题以及Java如何自动拆箱装箱<br>​    进行三元运算时候确保数据类型一致，避免参数自动拆箱导致空指针<br>​    当”==”运算符的两个操作数都是包装器类型的引用，则比较指向的是否是同一个对象，而如果其中有一个操作数是表达式（即包含算术运算）则比较的是数值（即会先触发自动拆箱的过程)。<br>​    对于包装类型,当equals()方法比较的是同一类型时(比如Integer与Integer比较), 实际比较的是他们的数值是否相等; 如比较的不是同一类型(比如Integer与Long比较), 则不会进行类型转换,直接返回false。</p><h4 id="1-9、数据在内存中存放的位置"><a href="#1-9、数据在内存中存放的位置" class="headerlink" title="1.9、数据在内存中存放的位置"></a>1.9、数据在内存中存放的位置</h4><h4 id="1-10、BIO和NIO及AIO的区别，NIO的实现原理"><a href="#1-10、BIO和NIO及AIO的区别，NIO的实现原理" class="headerlink" title="1.10、BIO和NIO及AIO的区别，NIO的实现原理"></a>1.10、BIO和NIO及AIO的区别，NIO的实现原理</h4><h4 id="1-11、对称加密和非对称加密"><a href="#1-11、对称加密和非对称加密" class="headerlink" title="1.11、对称加密和非对称加密"></a>1.11、对称加密和非对称加密</h4><h4 id="1-12、final-finally-finalize区别"><a href="#1-12、final-finally-finalize区别" class="headerlink" title="1.12、final finally finalize区别"></a>1.12、final finally finalize区别</h4><p>​    final 可以用来修饰类、方法、变量，分别有不同的意义，final 修饰的 class 代表不可以继承扩展，比如 String 类；<br>​    final 的变量是不可以修改的；Java 里用 final 修饰符去修饰一个方法的唯一正确用途就是表达：这个方法原本是一个虚方法，现在通过 final 来声明这个方法不允许在派生类中进一步被覆写（override）。<br>​    finally 是 Java 保证重点代码一定要被执行的一种机制。可以使用 try-finally 或者 try-catch-finally 来进行关闭资源、保证 unlock 锁等动作。<br>​    finalize 是基础类 java.lang.Object 的一个方法，设计目的是保证对象在被垃圾收集前完成特定资源的回收。<br>​    finalize 机制现在已经不推荐使用，并且在 JDK 9 开始被标记为 deprecated。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="keyword">final</span>修饰的变量必须初始化赋值或者构造方法里面赋值</span><br><span class="line"><span class="number">2</span>、<span class="keyword">static</span> <span class="keyword">final</span>修饰的变量必须初始化赋值或者在静态代码块里面赋值</span><br></pre></td></tr></tbody></table></figure><h4 id="1-13、访问修饰符"><a href="#1-13、访问修饰符" class="headerlink" title="1.13、访问修饰符"></a>1.13、访问修饰符</h4><ul><li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li><li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li><li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li></ul><h4 id="1-14、枚举"><a href="#1-14、枚举" class="headerlink" title="1.14、枚举"></a>1.14、枚举</h4><p>每个枚举 其实都是class，且所有的枚举值都是 public static final 的，可用javap xxx.class查看。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span>{</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">通过javap ./Color.class查看</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">com</span>.qz.nty.model.enums.Color <span class="keyword">extends</span> <span class="title class_">java</span>.lang.Enum&lt;com.qz.nty.model.enums.Color&gt; {</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.qz.nty.model.enums.Color RED;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.qz.nty.model.enums.Color GREEN;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.qz.nty.model.enums.Color BLUE;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> com.qz.nty.model.enums.Color[] values();</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> com.qz.nty.model.enums.Color <span class="title function_">valueOf</span><span class="params">(java.lang.String)</span>;</span><br><span class="line">  <span class="keyword">static</span> {};</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">values(), ordinal() 和 valueOf() 方法</span><br><span class="line"><span class="keyword">enum</span> 定义的枚举类默认继承了 java.lang.Enum 类，并实现了 java.lang.Serializable 和 java.lang.Comparable 两个接口。</span><br><span class="line"></span><br><span class="line">values(), ordinal() 和 valueOf() 方法位于 java.lang.Enum 类中：</span><br><span class="line"></span><br><span class="line">values() 返回枚举类中所有的值。</span><br><span class="line">ordinal()方法可以找到每个枚举常量的索引，就像数组索引一样。</span><br><span class="line">valueOf()方法返回指定字符串值的枚举常量。</span><br><span class="line">枚举类中的抽象方法实现，需要枚举类中的每个对象都对其进行实现。</span><br></pre></td></tr></tbody></table></figure><h4 id="1-15、序列化"><a href="#1-15、序列化" class="headerlink" title="1.15、序列化"></a>1.15、序列化</h4><h4 id="1-16、SPI、factories"><a href="#1-16、SPI、factories" class="headerlink" title="1.16、SPI、factories"></a>1.16、SPI、factories</h4><p>1、SPI介绍</p><p>​        SPI（Service Provider Interface），是JDK内置的一种服务提供发现机制，可以用来启用框架扩展和替换组件。JDK的spi机制提供了 ServiceLoader 类用于加载、解析spi接口的配置文件，ServiceLoader实现了Iterable接口，可迭代，但只能以迭代器的方式进行操作。使用 hasNext() 时才会加载解析 META-INF/services 下对应的接口配置文件，使用 next() 时才会通过实现类的 Class 对象newInstance() 方法（实质是通过反射调用无参构造器）创建实例。</p><p>2、使用教程</p><p>​        在模块本身的resources下新建目录 META-INF/services，services目录下新建文件，以服务接口的全限定接口名作为文件名<br>文件中指定该服务接口要使用的具体实现类。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServiceLoader.load(Class&lt;S&gt; service,ClassLoader loader)</span><br></pre></td></tr></tbody></table></figure><p>3、Spring factories介绍</p><p>​        factories可以看做是spring结合自身需要提供的一种spi机制，设计思想和jdk的spi机制差不多。factories机制在spring家族中广泛使用，spring、springboot、springcloud中都大量使用了factories机制。spring体系的很多扩展配置都是通过spring.factories 指定的，比如应用初始化器 ApplicationContextInitializer、应用监听器ApplicationListener。注解本质是一种特殊接口，也可以用 factories 指定实现类，比如springboot中的 @EnableAutoConfiguration 注解就使用了factories指定要应用的实现类。</p><p>4、使用教程</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpringFactoriesLoader.loadFactories(Class&lt;T&gt; factoryType, <span class="meta">@Nullable</span> ClassLoader classLoader)</span><br><span class="line">SpringFactoriesLoader.loadFactoryNames(Class&lt;T&gt; factoryType, <span class="meta">@Nullable</span> ClassLoader classLoader)</span><br></pre></td></tr></tbody></table></figure><p>5、区别</p><p>​        jdk的spi机制，一个配置文件只能指定一个接口要使用的实现类；spring的factories机制，一个配置文件可以指定多个接口要使用的实现类。</p><p>​        </p><h3 id="二、框架"><a href="#二、框架" class="headerlink" title="二、框架"></a>二、框架</h3><h4 id="2-1-SpringBoot"><a href="#2-1-SpringBoot" class="headerlink" title="2.1 SpringBoot"></a>2.1 SpringBoot</h4><h5 id="1、bean的生命周期"><a href="#1、bean的生命周期" class="headerlink" title="1、bean的生命周期"></a>1、bean的生命周期</h5><p>​    1、Spring启动，查找并加载需要被Spring管理的bean，进行Bean的实例化<br>​    2、Bean实例化后对将Bean的引入和值注入到Bean的属性中<br>​    3、如果Bean实现了BeanNameAware接口的话，Spring将Bean的Id传递给setBeanName()方法<br>​    4、如果Bean实现了BeanFactoryAware接口的话，Spring将调用setBeanFactory()方法，将BeanFactory容器实例传入<br>​    5、如果Bean实现了ApplicationContextAware接口的话，Spring将调用Bean的setApplicationContext()方法，将bean所在应用上下文引用传入进来。<br>​    6、如果Bean实现了BeanPostProcessor接口，Spring就将调用他们的postProcessBeforeInitialization()方法。<br>​    7、如果Bean 实现了InitializingBean接口，Spring将调用他们的afterPropertiesSet()方法。类似的，如果bean使用init-method声明了初始化方法，该方法也会被调用<br>​    8、如果Bean 实现了BeanPostProcessor接口，Spring就将调用他们的postProcessAfterInitialization()方法。<br>​    9、此时，Bean已经准备就绪，可以被应用程序使用了。他们将一直驻留在应用上下文中，直到应用上下文被销毁。<br>​    10、如果bean实现了DisposableBean接口，Spring将调用它的destory()接口方法，同样，如果bean使用了destory-method 声明销毁方法，该方法也会被调用。</p><h5 id="2、SpringMVC的执行流程"><a href="#2、SpringMVC的执行流程" class="headerlink" title="2、SpringMVC的执行流程"></a>2、SpringMVC的执行流程</h5><p>​    1、用户发送请求至前端控制器DispatcherServlet<br>​    2、DispatcherServlet收到请求调用处理器映射器HandlerMapping。<br>​    3、处理器映射器根据请求url找到具体的处理器，生成处理器执行链HandlerExecutionChain(包括处理器对象和处理器拦截器)一并返回给DispatcherServlet。<br>​    4、DispatcherServlet根据处理器Handler获取处理器适配器HandlerAdapter执行HandlerAdapter处理一系列的操作，如：参数封装，数据格式转换，数据验证等操作<br>​    5、执行处理器Handler(Controller，也叫页面控制器)。<br>​    6、Handler执行完成返回ModelAndView<br>​    7、HandlerAdapter将Handler执行结果ModelAndView返回到DispatcherServlet<br>​    8、DispatcherServlet将ModelAndView传给ViewReslover视图解析器<br>​    9、ViewReslover解析后返回具体View<br>​    10、DispatcherServlet对View进行渲染视图（即将模型数据model填充至视图中）。<br>​    11、DispatcherServlet响应用户。</p><h5 id="3、SpringBoot配置优先级"><a href="#3、SpringBoot配置优先级" class="headerlink" title="3、SpringBoot配置优先级"></a>3、SpringBoot配置优先级</h5><p>1、配置优先级</p><p>（1）命令行参数<br>（2）来自 java:comp/env 的 JNDI 属性<br>（3）Java 系统属性（System.getProperties()）<br>（4）操作系统环境变量<br>（5）RandomValuePropertySource 配置的 random.* 属性值<br>（6）配置文件（YAML文件、Properties 文件）<br>（7）@Configuration 注解类上的 @PropertySource 指定的配置文件<br>（8）通过SpringApplication.setDefaultProperties 指定的默认属性</p><p>2、配置文件优先级</p><h1 id=""><a href="#" class="headerlink" title=""></a><img src="/Applications/Typora.app/Contents/image/springboot配置文件加载顺序.png" alt="springboot配置优先级"></h1><h5 id="4、Gateway"><a href="#4、Gateway" class="headerlink" title="4、Gateway"></a>4、Gateway</h5><p>​    GatewayFilter Factories中有30种过滤器<br>​    spring  gateway网关中过滤器执行顺序按照order的值执行，值越小，优先级越高<br>​    globalFilter的order值由我们自己指定，defaultFilter和路由filter由spring声明式指定<br>​    如果值一样，则执行defaultFilter、路由filter、globalFilter<br>​    defaultFilter和路由filter类型是GatewayFilter，globalFilter经过GatewayFilterAdapter转换成GatewayFilter</p><h5 id="5、AOP"><a href="#5、AOP" class="headerlink" title="5、AOP"></a>5、AOP</h5><p>​    1、不存在环绕通知</p><p>​    执行顺序：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> before执行</span><br><span class="line"><span class="number">2</span> 方法执行</span><br><span class="line"><span class="number">3</span> AfterThrow执行</span><br><span class="line"><span class="number">4</span> After执行</span><br></pre></td></tr></tbody></table></figure><p>​    2、存在环绕通知@Around</p><p>​    执行顺序：</p>   <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="meta">@Before("point()")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>{</span><br><span class="line">    System.out.println(<span class="string">"2 before执行"</span>);</span><br><span class="line">}</span><br><span class="line">   </span><br><span class="line"><span class="meta">@After("point()")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint joinPoint)</span>{</span><br><span class="line">    System.out.println(<span class="string">"5 After执行"</span>);</span><br><span class="line">}</span><br><span class="line">   </span><br><span class="line"><span class="meta">@AfterReturning("point()")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(JoinPoint joinPoint)</span>{</span><br><span class="line">    System.out.println(<span class="string">"4 AfterReturning执行"</span>);</span><br><span class="line">}</span><br><span class="line">   </span><br><span class="line"><span class="meta">@AfterThrowing(pointcut = "point()")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(JoinPoint joinPoint)</span>{</span><br><span class="line">    System.out.println(<span class="string">"4 AfterThrow执行"</span>);</span><br><span class="line">}</span><br><span class="line">   </span><br><span class="line"><span class="meta">@Around("point()")</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">test</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable {</span><br><span class="line">    System.out.println(<span class="string">"1 around前执行"</span>);</span><br><span class="line">    <span class="comment">//3、目标方法执行 Controller层方法</span></span><br><span class="line">  <span class="comment">//6、切点执行</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">    System.out.println(<span class="string">"7 around后执行"</span>);</span><br><span class="line">    <span class="keyword">return</span> proceed;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="6、AOP、-Configutation、-Lazy都是动态代理"><a href="#6、AOP、-Configutation、-Lazy都是动态代理" class="headerlink" title="6、AOP、@Configutation、@Lazy都是动态代理"></a>6、AOP、@Configutation、@Lazy都是动态代理</h5><h5 id="7、加载顺序问题"><a href="#7、加载顺序问题" class="headerlink" title="7、加载顺序问题"></a>7、加载顺序问题</h5><p>（1）同一个类中加载顺序</p><p>​    Constructor &gt;&gt; @Autowired &gt;&gt;@ PostConstruct&gt;&gt;@Bean，跟Bean生命周期有关</p><p>（2）@Order注解并不能改变Bean加载<a href="https://so.csdn.net/so/search?q=%E4%BC%98%E5%85%88%E7%BA%A7&amp;spm=1001.2101.3001.7020">优先级</a>，@Order注解用于设置装载到list中Bean的顺序，用于比较多的是</p><ul><li>控制AOP的类的加载顺序，也就是被@Aspect标注的类</li><li>控制ApplicationListener实现类的加载顺序</li><li>控制CommandLineRunner实现类的加载顺序</li></ul><p>（3）@AutoConfigureBefore、@AutoConfigureAfter、@AutoConfigureOrder这三个注解是给Springboot自动配置类排序使用的，注意是自动配置类(META_INF下的spring.factories配置文件)，并非是普通的配置类。</p><p>（4）@DependsOn注解可以用来控制bean的创建顺序，该注解用于声明当前bean依赖于另外一个bean。所依赖的bean会被容器确保在当前bean实例化之前被实例化。</p><p>（5）参数注入</p><p>​        在@Bean标注的方法上，如果你传入了参数，springboot会自动会为这个参数在spring上下文里寻找这个类型的引用。并先初始化这个类的实例。利用此特性，我们也可以控制bean的加载顺序。</p><h5 id="8、约定大于配置"><a href="#8、约定大于配置" class="headerlink" title="8、约定大于配置"></a>8、约定大于配置</h5><p>（1）开发人员仅需规定应用中不符合约定的部分</p><p>（2）在没有规定配置的地方，采用默认配置，以力求最简配置为核心思想总的来说，上面两条都遵循了推荐默认配置的思想。当存在特殊需求的时候，自定义配置即可。这样可以大大的减少配置工作，这就是所谓的“约定”。</p><h5 id="9、校验"><a href="#9、校验" class="headerlink" title="9、校验"></a>9、校验</h5><p>（1）官方提供：@NotBlank、@Size等。tips(除了@NotNull、@NotBlank外，其它的不会对null进行校验)</p><p>（2）自定义: 需在自定义注解上使用元注解@Constraint(validatedBy = xxx.class)，xxx.class实现ConstraintValidator接口进行处理</p><h5 id="10、条件注解"><a href="#10、条件注解" class="headerlink" title="10、条件注解"></a>10、条件注解</h5><p>（1）@ConditionalOnProperty两个属性matchIfMissing、havingValue</p><p>​            1、没有havingValue属性时候，matchIfMissing为true时，配置文件缺少字段也会注入成功，为false时有配置信息则可以注入，没有则不会注入</p><p>​            2、有havingValue时候，havingValue值必须和配置值相同才会注入成功，不管matchIfMissing的值</p><h5 id="11、依赖注入"><a href="#11、依赖注入" class="headerlink" title="11、依赖注入"></a>11、依赖注入</h5><p>（1）通过构造方法注入</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、采用构造方法上带有<span class="meta">@Autowired</span>注解注入</span><br><span class="line"><span class="number">2</span>、无<span class="meta">@Autowired</span>时候，若有无参构造则采用无参构造，无则采用其它构造方法</span><br></pre></td></tr></tbody></table></figure><p>（2）setter注入</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、在需要注入的setter方法上加<span class="meta">@Autored</span>、<span class="meta">@Resource</span>注解</span><br><span class="line"><span class="number">2</span>、只要setter方法上有<span class="meta">@Autored</span>、<span class="meta">@Resource</span>注解则一定会执行此注入方式，不管有无构造注入、字段注入</span><br></pre></td></tr></tbody></table></figure><h4 id="2-2、Mybatis"><a href="#2-2、Mybatis" class="headerlink" title="2.2、Mybatis"></a>2.2、Mybatis</h4><p>1、问题</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(1)mapper层使用Integer、String等做参数时候，出现There is no getter for property named 'xxx' in 'class java.lang.String'</span><br><span class="line">解决方法：</span><br><span class="line">1、在mapper层使用@Param映射</span><br><span class="line">2、使用_parameter、value做参数</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">SELECT</span><br><span class="line">...</span><br><span class="line">        <span class="comment">&lt;!--字符串比较加toString()-&gt;</span></span><br><span class="line"><span class="comment">&lt;choose&gt;</span></span><br><span class="line"><span class="comment">&lt;when test="param == '0'.toString()"&gt;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">&lt;/when&gt;</span></span><br><span class="line"><span class="comment">            -------</span></span><br><span class="line"><span class="comment">&lt;when test="_parameter == '0'.toString()"&gt;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">&lt;/when&gt;</span></span><br><span class="line"><span class="comment">&lt;/choose&gt;  </span></span><br><span class="line"><span class="comment">&lt;/select&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2、Mybatis的映射文件中#和$区别<br>    使用#{param}，是经过预编译的，会将传递过来的参数换转换成“param”</p><p>​    使用${param}，是未经过预编译的，仅仅是取变量的值，是非安全的，存在SQL注入问题。</p><p>3、Mybatis一级、二级缓存</p><p>​    spring结合mybatis后，在未开启事物的情况之下，每次查询，spring都会关闭旧的sqlSession而创建新的sqlSession,因此此时的一级缓存是没有启作用的。在开启事物的情况之下，spring使用threadLocal获取当前资源绑定同一个sqlSession，因此此时一级缓存是有效的。</p><p>​    查出的数据都会被默认先放在一级缓存中。只有会话提交或者关闭以后，一级缓存中的数据才会转移到二级缓存中<br>​    （1）一级缓存：sqlSession级别的缓存。（相当于一个方法内的缓存）每一次会话都对应自己的一级缓存，作用范围比较小，一旦会话关闭就查询不到了；<br>一级缓存默认是一直开启的，是SqlSession级别的一个Map；与数据库同一次会话期间查询到的数据会放在本地缓存中。<br>​    （2）基于namespace名称空间级别的缓存：一个namespace对应一个二级缓存，一个会话，查询一条数据，这个数据就会被放在当前会话的一级缓存中；<br>如果会话关闭；一级缓存中的数据会被保存到二级缓存中；新的会话查询信息，就可以参照二级缓存中的内容；<br>4、开启二级缓存<br>​    （1）开启全局二级缓存配置：<setting name="cacheEnabled" value="true"><br>​    （2）去mapper.xml中配置使用二级缓存：<cache></cache><br>​    （3）我们的POJO需要实现序列化接口<br>5、一级缓存失效原因<br>​    （1）不同的会话对象<br>​    （2）会话对象相同，查询不在缓存中的内容<br>​    （3）两次查询期间进行了增删改的操作<br>​    （4）会话完成后手动清空缓存<br>6、一二级缓存的执行顺序<br>​    （1）先判断二级缓存是否开启，如果没开启，再判断一级缓存是否开启，如果没开启，直接查数据库<br>​    （2）如果一级缓存关闭，即使二级缓存开启也没有数据，因为二级缓存的数据从一级缓存获取<br>​    （3）一般不会关闭一级缓存<br>​    （4）二级缓存默认不开启<br>​    （5）如果二级缓存关闭，直接判断一级缓存是否有数据，如果没有就查数据库<br>​    （6）如果二级缓存开启，先判断二级缓存有没有数据，如果有就直接返回；如果没有，就查询一级缓存，如果有就返回，没有就查询数据库；</setting></p><h4 id="2-3、Nacos"><a href="#2-3、Nacos" class="headerlink" title="2.3、Nacos"></a>2.3、Nacos</h4><p>​    1、负载均衡策略：配置同集群访问后，优先随机访问同集群，当本集群的实例宕机了再访问其他集群的实例，此时会有警告产生，跨集群访问<br>​    2、服务默认为临时实例，配置服务为非临时实例时，Nacos主动询问实例是否健康，若服务宕机后会立即pull给消费者，且Nacos不会剔除服务。<br>​    3、配置namespace环境隔离，则不同环境的服务不能通信</p><h4 id="2-4、Nginx"><a href="#2-4、Nginx" class="headerlink" title="2.4、Nginx"></a>2.4、Nginx</h4><p>​    在nginx中配置proxy_pass时，如果在proxy_pass后面的url加/，相当于是绝对根路径，则nginx不会把location中匹配的路径部分代理走;<br>​    如果没有/，则会把匹配的路径部分给代理走。<br>​    比如访问：127.0.0.1/a/index.html</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /a {</span><br><span class="line">  <span class="attribute">proxy_pass</span>  http://127.0.0.1/</span><br><span class="line">}</span><br><span class="line">相当于http://127.0.0.1/index.html</span><br><span class="line">location /a {</span><br><span class="line">      <span class="attribute">proxy_pass</span>  http://127.0.0.1</span><br><span class="line">}</span><br><span class="line">相当于http://127.0.0.1/a/index.html</span><br><span class="line"></span><br><span class="line">location /a {</span><br><span class="line">      <span class="attribute">proxy_pass</span>  http://127.0.0.1/linux/</span><br><span class="line">}</span><br><span class="line">相当于http://127.0.0.1/linux/index.html</span><br><span class="line"></span><br><span class="line">location /a {</span><br><span class="line">      <span class="attribute">proxy_pass</span>  http://127.0.0.1/linux</span><br><span class="line">}</span><br><span class="line">相当于http://127.0.0.1/linuxindex.html</span><br></pre></td></tr></tbody></table></figure><h4 id="2-5、Ribbon"><a href="#2-5、Ribbon" class="headerlink" title="2.5、Ribbon"></a>2.5、Ribbon</h4><h5 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、发送请求被RibbonLoadBalancerClient拦截</span><br><span class="line"><span class="number">2</span>、获取请求中的服务名称</span><br><span class="line"><span class="number">3</span>、交给DynamicServerListLoadBalancer去注册中心拉去服务地址</span><br><span class="line"><span class="number">4</span>、返回服务列表给DynamicServerListLoadBalancer，匹配IRule定义的策略选择服务</span><br><span class="line"><span class="number">5</span>、用服务地址替换原来的地址发送请求</span><br></pre></td></tr></tbody></table></figure><h5 id="2、负载均衡策略"><a href="#2、负载均衡策略" class="headerlink" title="2、负载均衡策略"></a>2、负载均衡策略</h5><p>（1）Bean方式，全局</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>（2）配置方式，局部、灵活</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">服务名称:</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></tbody></table></figure><h5 id="3、Ribbon加载方式"><a href="#3、Ribbon加载方式" class="headerlink" title="3、Ribbon加载方式"></a>3、Ribbon加载方式</h5><p>默认采用懒加载所以第一次调用时间会长，可以配置采用饥饿加载，服务启动就把服务地址缓存在DynamicServerListLoadBalancer</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启饥饿加载</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="comment"># 指定饥饿加载的服务名称</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">userservice</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-6、Logback"><a href="#2-6、Logback" class="headerlink" title="2.6、Logback"></a>2.6、Logback</h4><h5 id="1、日志两大规范"><a href="#1、日志两大规范" class="headerlink" title="1、日志两大规范"></a>1、日志两大规范</h5><p>（1）Commons Logging  (JCL)</p><p>（2）Simple Logging Facade for JAVA (slf4j)</p><p>由于log4j性能问题，采用logback替代log4j</p><h5 id="2、日志级别"><a href="#2、日志级别" class="headerlink" title="2、日志级别"></a>2、日志级别</h5><p>（1）级别程度是：TRACE&lt;DEBUG&lt;INFO&lt;WARN&lt;ERROR</p><p> （2）默认级别debug，只能输出级别大于或者等于此级别的信息，例如设置为INFO，则只能输出INFO、WARN、ERROR的日志信息</p><h3 id="三、数据库"><a href="#三、数据库" class="headerlink" title="三、数据库"></a>三、数据库</h3><h4 id="3-1-Mysql"><a href="#3-1-Mysql" class="headerlink" title="3.1 Mysql"></a>3.1 Mysql</h4><p>1、当一个查询语句同时出现了where,group by,having,order by的时候，执行顺序和编写顺序是：</p><p>​    1.执行where xx对全表数据做筛选，返回第1个结果集。</p><p>​    2.针对第1个结果集使用group by分组，返回第2个结果集。</p><p>​    3.针对第2个结果集中的每1组数据执行select xx，有几组就执行几次，返回第3个结果集。</p><p>​    4.针对第3个结集执行having xx进行筛选，返回第4个结果集。</p><p>​    5.针对第4个结果集排序。</p><p>​    完整顺序:from、join、where、group by、with、having、order</p><p>2、索引<br>    1.较频繁的作为查询条件的字段应该创建索引；<br>    2.唯一性太差的字段不适合单独创建索引，即使该字段频繁作为查询条件；<br>    3.更新非常频繁的字段不适合创建索引。<br>3、count(*)、count(1)、count(列名)区别？</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）<span class="built_in">count</span>(<span class="operator">*</span>)包括了所有的列，相当于行数，在统计结果的时候， 不会忽略列值为<span class="keyword">NULL</span> </span><br><span class="line">（<span class="number">2</span>）<span class="built_in">count</span>(<span class="number">1</span>)包括了忽略所有列，用<span class="number">1</span>代表代码行，在统计结果的时候， 不会忽略列值为<span class="keyword">NULL</span> </span><br><span class="line">（<span class="number">3</span>）<span class="built_in">count</span>(列名)只包括列名那一列，在统计结果的时候，会忽略列值为空(这里的空不是只空字符串或者<span class="number">0</span>，而是表示<span class="keyword">null</span>)的计数， 即某个字段值为<span class="keyword">NULL</span>时，不统计。 </span><br><span class="line">（<span class="number">4</span>）列名为主键，<span class="built_in">count</span>(列名)会比<span class="built_in">count</span>(<span class="number">1</span>)快  </span><br><span class="line">（<span class="number">5</span>）列名不为主键，<span class="built_in">count</span>(<span class="number">1</span>)会比<span class="built_in">count</span>(列名)快  </span><br><span class="line">（<span class="number">6</span>）如果表多个列并且没有主键，则 count（<span class="number">1</span>） 的执行效率优于 count（<span class="operator">*</span>）  </span><br><span class="line">（<span class="number">7</span>）如果有主键，则 <span class="keyword">select</span> count（主键）的执行效率是最优的  </span><br><span class="line">（<span class="number">8</span>）如果表只有一个字段，则 <span class="keyword">select</span> count（<span class="operator">*</span>）最优。</span><br></pre></td></tr></tbody></table></figure><p>4、mysql存储引擎两种的区别？叶子节点存放的是什么？<br>        聚簇索引：数据存储的一种方式，索引的顺序和数据记录的顺序一致<br>        非聚簇索引：索引顺序和存储顺序无关<br>        区别：<br>        （1）InnoDB 支持事务，MyISAM不支持事务<br>        （2）InnoDB支持外键，MyISAM不支持<br>        （3）InnoDB支持行锁和表锁，ISAM不支持行锁<br>        （4）InnoDB 不保存表的具体行数，执行 select count(*) from table 时需要全表扫描。而MyISAM 用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快；</p><p>​        结构：<br>          （1）Innob主键索引是聚集索引方式，数据和索引都在同一个文件里面，主键索引叶子节点存储的是数据，二级索引即非聚簇索引叶子节点存储的是主键key，主索引叶子节点存储的是数据。<br>          （2）MyISAM 用的是非聚集索引方式，即数据和索引落在不同的两个文件上。MyISAM 在建表时以主键作为 KEY 来建立主索引 B+树，树的叶子节点存的是对应数据的物理地址。我们拿到这个物理地址后，就可以到 MyISAM 数据文件中直接定位到具体的数据记录了。</p><p>5、explain执行计划、<br>6、数据库最左前缀原则<br>        如果你的 SQL 语句中用到了联合索引中的最左边的索引，那么这条 SQL 语句就可以利用这个联合索引去进行匹配，遇到范围查询时候停止匹配。<br>7、mysql优化器<br>8、mysql锁的分类和作用<br>        表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。<br>        行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。<br>        页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般</p><p>9、默认查询是不分大小写，若需要区分，可在建表时候指定，或者在查询时候在字段前面加上binary</p><p>10、SQL内部执行流程</p><h4 id="3-2-Oracle"><a href="#3-2-Oracle" class="headerlink" title="3.2 Oracle"></a>3.2 Oracle</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Tips:</span><br><span class="line"><span class="number">1</span>、Oracle执行<span class="keyword">sql</span>的的隐式转换</span><br><span class="line"><span class="number">2</span>、Oracle <span class="keyword">DROP</span>误删表后恢复：</span><br><span class="line">      (<span class="number">1</span>)<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> USER_RECYCLEBIN </span><br><span class="line">      (<span class="number">2</span>)FLASHBACK <span class="keyword">TABLE</span> TABLE_NAME <span class="keyword">TO</span> BEFORE <span class="keyword">DROP</span>;</span><br><span class="line"><span class="number">3</span>、删除<span class="keyword">Table</span>不进入Recycle的方法：<span class="keyword">DROP</span> <span class="keyword">TABLE</span> TABLE_NAME PURGE 即永久删除</span><br></pre></td></tr></tbody></table></figure><h4 id="3-3-Redis"><a href="#3-3-Redis" class="headerlink" title="3.3 Redis"></a>3.3 Redis</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">hash双链集合，set、zset、list单链集合</span><br><span class="line">exists key 查看key是否存在</span><br><span class="line">incr/decr key (key的值增加/减少1)</span><br><span class="line">incrby/decrby key n (key的值增加/减少n)  单个命令实现的所有Redis操作都是原子的，包括对更复杂数据结构的操作。因此，当您使用修改某些值的 Redis 命令时，您不必考虑并发访问。</span><br><span class="line">set key value ex time 设置键的过期时间</span><br><span class="line">ttl key 查看键的过期时间 -1 永久 -2 失效 20 20秒后失效</span><br><span class="line">persist key 移除key的过期时间</span><br><span class="line"></span><br><span class="line">列表：list</span><br><span class="line">llen key 查看列表长度</span><br><span class="line">lpush / rpush  key value（向列表头 / 尾插入信息）</span><br><span class="line">lrange key 0 -1 （遍历从头到尾的值）</span><br><span class="line">lange key 0 -2  （遍历从头到倒数第二个值）</span><br><span class="line">lpop / rpop 删除头 / 尾的key，并把删除的值返回</span><br><span class="line">lpush / rpush  key value1,value2 向列表插入多个值，返回列表长度</span><br><span class="line"></span><br><span class="line">集合：set</span><br><span class="line">sadd key value... 向集合中添加一个或多个元素</span><br><span class="line">smembers key 遍历集合元素</span><br><span class="line">srem key value 删除指定元素，存在返回1，不存在返回0</span><br><span class="line">sismember key value 查看值是否存在，存在返回1，不存在返回0</span><br><span class="line">sunion key1 key2 组合多个集合并返回所有元素</span><br><span class="line">spop key n 随机删除n个元素并返回，默认返回一个</span><br><span class="line">srandmember key n 随机返回集合中的n个元素，不写默认返回一个</span><br><span class="line">sdiff key1 key2返回两个集合的差别</span><br><span class="line"></span><br><span class="line">集合：zset</span><br><span class="line">zadd key_namae score value... 向有序集合添加一个或多个值(可修改指定值的分数)</span><br><span class="line">zrange key_name start end 获取指定范围内按score排序的集合</span><br><span class="line">zrange key start end withscores  打印所有的value，并带有分数</span><br><span class="line">zscore key value 获取指定value的score</span><br><span class="line"></span><br><span class="line">哈希：hash</span><br><span class="line">hset key filed filed 添加一个或多个键值对</span><br><span class="line">hget key filed 获取某个键值对</span><br><span class="line">hgetall key  获取所有键值对</span><br><span class="line">hincrby key filed n 给字段key增加n个整数值</span><br><span class="line">hdel key filed  删除字段的值  </span><br><span class="line">hlen、hkeys、hvals key  打印键值对长度、所有的key、所有的值</span><br><span class="line"></span><br><span class="line">redis两种持久化方案：</span><br><span class="line">RDB: </span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000  （60秒后有10000条数据发生变化则进行持久化）</span><br><span class="line"></span><br><span class="line">AOF: 开启appendonly 为yes </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">appendfsync always  （每次操作进行一次持久化）</span></span><br><span class="line">appendfsync everysec  （每秒进行一次持久化）</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">appendfsync no</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3-4-ES"><a href="#3-4-ES" class="headerlink" title="3.4 ES"></a>3.4 ES</h4><h5 id="1、配置ES开发环境"><a href="#1、配置ES开发环境" class="headerlink" title="1、配置ES开发环境"></a>1、配置ES开发环境</h5><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -d \</span></span><br><span class="line"><span class="language-bash">--name es \</span></span><br><span class="line"><span class="language-bash">-e <span class="string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span> \</span></span><br><span class="line"><span class="language-bash">-e <span class="string">"discovery.type=single-node"</span> \</span></span><br><span class="line"><span class="language-bash">-v es-data:/usr/share/elasticsearch/data \</span></span><br><span class="line"><span class="language-bash">-v es-plugins:/usr/share/elasticsearch/plugins \</span></span><br><span class="line"><span class="language-bash">--privileged \</span></span><br><span class="line"><span class="language-bash">--network es-net \</span></span><br><span class="line"><span class="language-bash">-p 9200:9200 \</span></span><br><span class="line"><span class="language-bash">-p 9300:9300 \</span></span><br><span class="line"><span class="language-bash">elasticsearch:7.12.1</span></span><br><span class="line"></span><br><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -d \</span></span><br><span class="line"><span class="language-bash">--name kibana \</span></span><br><span class="line"><span class="language-bash">-e ELASTICSEARCH_HOSTS=http://es:9200 \</span></span><br><span class="line"><span class="language-bash">--network es-net \</span></span><br><span class="line"><span class="language-bash">-p 5601:5601 \</span></span><br><span class="line"><span class="language-bash">kibana:7.12.1</span></span><br></pre></td></tr></tbody></table></figure><h5 id="2、DSL语句"><a href="#2、DSL语句" class="headerlink" title="2、DSL语句"></a>2、DSL语句</h5><p>2.1索引库操作</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#查看索引库</span><br><span class="line">GET /hotel</span><br><span class="line"></span><br><span class="line">#删除索引库</span><br><span class="line">DELETE /hotel</span><br><span class="line"></span><br><span class="line">#修改索引库 只能增添字段</span><br><span class="line">PUT /hotel/_mapping</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"properties"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"age"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"type"</span><span class="punctuation">:</span><span class="string">"integer"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line"># 建立索引库hotel  type数据类型 analyzer分词器</span><br><span class="line">PUT /hotel</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"mappings"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"properties"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"id"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"keyword"</span> </span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"text"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"analyzer"</span><span class="punctuation">:</span> <span class="string">"ik_max_word"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"copy_to"</span><span class="punctuation">:</span> <span class="string">"all"</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"address"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"text"</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">"price"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"integer"</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"all"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"text"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"analyzer"</span><span class="punctuation">:</span> <span class="string">"ik_max_word"</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>2.2文档操作</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#新增文档id为<span class="number">1</span>的数据</span><br><span class="line">POST /hotel/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"1"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"name"</span><span class="punctuation">:</span><span class="string">"test"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"address"</span><span class="punctuation">:</span><span class="string">"test"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"price"</span><span class="punctuation">:</span><span class="number">11</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#查询id为<span class="number">1</span>的数据</span><br><span class="line">GET /hotel/_doc/<span class="number">1</span></span><br><span class="line"></span><br><span class="line">#删除id为<span class="number">1</span>的数据</span><br><span class="line">DELETE /hotel/_doc/<span class="number">1</span></span><br><span class="line"></span><br><span class="line">#修改数据 全量修改 如果数据不存在则创建</span><br><span class="line">PUT /hotel/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"id"</span><span class="punctuation">:</span><span class="string">"1"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"name"</span><span class="punctuation">:</span><span class="string">"test"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"address"</span><span class="punctuation">:</span><span class="string">"test"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"price"</span><span class="punctuation">:</span><span class="number">11</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#修改数据 增量修改字段</span><br><span class="line">POST /hotel/_update/<span class="number">1</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"doc"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"address"</span><span class="punctuation">:</span><span class="string">"杭州"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"price"</span><span class="punctuation">:</span><span class="number">10000000</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>2.3查询操作</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line">#全文搜索</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"match_all"</span><span class="punctuation">:</span> <span class="punctuation">{</span><span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#单字段查询 all 多个字段整合</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">   <span class="attr">"match"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">     <span class="attr">"all"</span><span class="punctuation">:</span> <span class="string">"如家商圈"</span></span><br><span class="line">   <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#多字段查询</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"multi_match"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"query"</span><span class="punctuation">:</span> <span class="string">"如家商圈"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"fields"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"brand"</span><span class="punctuation">,</span><span class="string">"name"</span><span class="punctuation">,</span><span class="string">"business"</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#精确查询</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"term"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"city"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"value"</span><span class="punctuation">:</span> <span class="string">"上海"</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#精确查询 范围查询 带e表示包含等于</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"range"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"price"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"gte"</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"lte"</span><span class="punctuation">:</span> <span class="number">2000</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#位置查询 geo_distance和geo_bounding_box</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"geo_distance"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"distance"</span><span class="punctuation">:</span><span class="string">"10km"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"location"</span><span class="punctuation">:</span><span class="string">"31.20, 121.30"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#function_score查询 会修改最后得分 query_score和function_score来决定分数</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"function_score"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"match"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"酒店"</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"functions"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"filter"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"term"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">              <span class="attr">"brand"</span><span class="punctuation">:</span> <span class="string">"7天酒店"</span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">          <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"weight"</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"boost_mode"</span><span class="punctuation">:</span> <span class="string">"sum"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#bool查询  must_not和filter不会修改算分</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"bool"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"must"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"match"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"如家"</span></span><br><span class="line">          <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"must_not"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"range"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"price"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">              <span class="attr">"gt"</span><span class="punctuation">:</span> <span class="number">500</span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">          <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"filter"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"geo_distance"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"distance"</span><span class="punctuation">:</span> <span class="string">"10km"</span><span class="punctuation">,</span> </span><br><span class="line">            <span class="attr">"location"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">              <span class="attr">"lat"</span><span class="punctuation">:</span> <span class="number">39.945106</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">"lon"</span><span class="punctuation">:</span> <span class="number">116.353827</span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">          <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#sort排序 会放弃打分</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"match_all"</span><span class="punctuation">:</span> <span class="punctuation">{</span><span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"sort"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"score"</span><span class="punctuation">:</span> <span class="string">"asc"</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"price"</span><span class="punctuation">:</span> <span class="string">"desc"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#sort排序 按地理位置排序</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"match_all"</span><span class="punctuation">:</span> <span class="punctuation">{</span><span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"sort"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"_geo_distance"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"location"</span><span class="punctuation">:</span> <span class="string">"10.10,10.10"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"order"</span><span class="punctuation">:</span> <span class="string">"asc"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"unit"</span><span class="punctuation">:</span> <span class="string">"km"</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#分页查询 结果集(from+size)不能超过<span class="number">10000</span> 还可以写成search after(需排序<span class="punctuation">,</span>记录上次查询的最后一个文档<span class="punctuation">,</span>查询下一页数据)</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"match_all"</span><span class="punctuation">:</span> <span class="punctuation">{</span><span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"sort"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"price"</span><span class="punctuation">:</span> <span class="string">"desc"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">"from"</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">"size"</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#高亮</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"match"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"all"</span><span class="punctuation">:</span> <span class="string">"如家"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"highlight"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"fields"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"require_field_match"</span><span class="punctuation">:</span> <span class="string">"false"</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>2.4聚合查询</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#聚合查询bucket  <span class="number">200</span>元以下的酒店按品牌分组后的数量升序展示<span class="number">10</span>条数据</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"query"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"range"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"price"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"lte"</span><span class="punctuation">:</span> <span class="number">200</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">"size"</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"aggs"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"brandAggs"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"terms"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"field"</span><span class="punctuation">:</span> <span class="string">"brand"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"size"</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"order"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"_count"</span><span class="punctuation">:</span> <span class="string">"asc"</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">#聚合查询 bucket+metrics  对分组后的品牌按平均分进行降序排序</span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"size"</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"aggs"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"brandAggs"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"terms"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"field"</span><span class="punctuation">:</span> <span class="string">"brand"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"size"</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"order"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"scoreAggs.avg"</span><span class="punctuation">:</span> <span class="string">"desc"</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"aggs"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"scoreAggs"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"stats"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"field"</span><span class="punctuation">:</span> <span class="string">"score"</span></span><br><span class="line">          <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>2.5自定义分词器</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#创建分词器和搜索分词器不能混用 因为有可能词汇汉字不一样但是拼音一样导致搜索结果达不到预期效果</span><br><span class="line">PUT /test</span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"settings"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"analysis"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"analyzer"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"my_analyzer"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"tokenizer"</span><span class="punctuation">:</span> <span class="string">"ik_max_word"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"filter"</span><span class="punctuation">:</span> <span class="string">"py"</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"filter"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"py"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">          <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"pinyin"</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"keep_full_pinyin"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"keep_joined_full_pinyin"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"keep_original"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"limit_first_letter_length"</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span> </span><br><span class="line">          <span class="attr">"remove_duplicated_term"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">"none_chinese_pinyin_tokenize"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="四、部署"><a href="#四、部署" class="headerlink" title="四、部署"></a>四、部署</h3><h4 id="4-1、docker常用命令"><a href="#4-1、docker常用命令" class="headerlink" title="4.1、docker常用命令"></a>4.1、docker常用命令</h4><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker pull 服务:tag  服务:版本（拉取服务，不加tag则默认最新版）</span><br><span class="line">docker  images 查看镜像</span><br><span class="line">docker save -o nginx.tar nginx:lastest  将nginx:latest镜像打包</span><br><span class="line">docker load -i nginx.tar  加载镜像</span><br><span class="line">docker rmi  删除镜像</span><br><span class="line">docker rm  删除容器 -f 删除运行的容器</span><br><span class="line">docker ps 查看运行容器状态 -a 则查看所有容器状态</span><br><span class="line">docker <span class="keyword">run</span><span class="language-bash"> --name  取名字  -p 80:80 -d  镜像  运行镜像，-p端口映射，-d后台运行</span></span><br><span class="line">docker logs mn 查看mn容器的日志 -f 动态查看</span><br><span class="line">docker exec -it mn bash  以bash命令进入mn容器</span><br><span class="line">docker stop mn  停止mn容器</span><br><span class="line">docker (un)pause （恢复）暂停镜像</span><br><span class="line">docker restart mn 重启mn容器</span><br></pre></td></tr></tbody></table></figure><h4 id="4-2、docker镜像结构"><a href="#4-2、docker镜像结构" class="headerlink" title="4.2、docker镜像结构"></a>4.2、docker镜像结构</h4><p>1、镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p><p>2、镜像是分成结构、每一层称为一个Layer</p><p>​    （1）BaseImage层:包含基本的系统函数库、环境变量、文件系统</p><p>​    （2）Entrypoint：入口，是镜像中应用启动的命令</p><p>​    （3）其它：在BaseImage基础上添加依赖、安装程序、完成整改个应用的安装和配置</p><h3 id="五、中间件"><a href="#五、中间件" class="headerlink" title="五、中间件"></a>五、中间件</h3><h4 id="5-1、RabbitMQ"><a href="#5-1、RabbitMQ" class="headerlink" title="5.1、RabbitMQ"></a>5.1、RabbitMQ</h4><p>​        工作模式： 1 “Hello World!”、2 Work queues、3 Publish/Subscribe、4 Routing、5 Topics<br>​        (1)1和2使用默认交换机<br>​        (2)Publish/Subscribe使用FANOUT(给所有绑定的队列发送消息，此时不用指定routingKey)<br>​        (3)Routing使用DIRECT(给指定的routingKey发送消息)<br>​        (4)Topics使用TOPIC(给匹配的路由发送消息)</p><h3 id="六、Git"><a href="#六、Git" class="headerlink" title="六、Git"></a>六、Git</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、tag标签</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="七、Linux常用命令"><a href="#七、Linux常用命令" class="headerlink" title="七、Linux常用命令"></a>七、Linux常用命令</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">1、进程端口查看</span><br><span class="line">查看进程：</span><br><span class="line">ps -ef | grep (名称/进程id) 和(ps aux类似，其中ps -aux是显示x用户的进程)</span><br><span class="line">如:ps -ef | grep java </span><br><span class="line">   ps -ef | grep 进程pid </span><br><span class="line">查看端口：</span><br><span class="line">(1) netstat -an|grep 8080</span><br><span class="line">(2) lsof -i:8080</span><br><span class="line">2、压缩解压命令：</span><br><span class="line">压缩：tar -czf all.tar.gz *.jpg</span><br><span class="line">解压：tar -xzf all.tar.gz</span><br><span class="line">3、防火墙端口</span><br><span class="line"> firewall-cmd --query-port=8848/tcp</span><br><span class="line"> firewall-cmd --permanent --remove-port=8848/tcp</span><br><span class="line">   firewall-cmd --zone=public --add-port=8080-8090/tcp --permanent</span><br><span class="line">     systemctl restart firewalld.service</span><br><span class="line">     firewall-cmd --reload</span><br><span class="line">4、不挂断的运行命令</span><br><span class="line">nohup ./test.sh &amp;</span><br><span class="line">5、查看当前后台运行的命令</span><br><span class="line">(1)jobs用于查看当前终端后台运行的任务，换了终端就看不到了。</span><br><span class="line">jobs</span><br><span class="line">jobs -l 选项可显示当前终端所有任务的PID</span><br><span class="line">(2)ps命令用于查看瞬间进程的动态，可以看到别的终端运行的后台进程。</span><br><span class="line">ps -aux | grep "test.sh"    #a:显示所有程序  u:以用户为主的 x:显示所有程序，不以终端机来区分</span><br><span class="line">6、kill命令</span><br><span class="line">(1)kill pid 正常停止该进程 = kill -15 pid = kill -s TERM</span><br><span class="line">(2)kill -9 pid 强制杀死该进程 = kill -s SIGKILL pid</span><br><span class="line">(3)kill -1 pid 重启该进程 = kill -s SIGHUP pid</span><br><span class="line">6、关闭当前后台运行的命令</span><br><span class="line">(1)通过jobs命令查看jobnum，然后执行  kill %jobnum</span><br><span class="line">(2)通过ps命令查看进程号PID，然后执行  kill PID</span><br><span class="line">如果是前台进程的话，直接执行 Ctrl+c 就可以终止了</span><br><span class="line">7、前后台进程的切换与控制</span><br><span class="line">(1)fg </span><br><span class="line">功能：将后台中的命令调至前台继续运行 </span><br><span class="line">如果后台中有多个命令，可以先用jobs查看jobnum，然后用fg %jobnum 将选中的命令调出。</span><br><span class="line">(2)Ctrl+z</span><br><span class="line">功能：将一个正在前台执行的命令放到后台，并且处于暂停状态</span><br><span class="line">(3)bg</span><br><span class="line">功能：将一个在后台暂停的命令，变成在后台继续执行</span><br><span class="line">(4)watch</span><br><span class="line">watch -n 10 sh  test.sh  &amp;  #每10s在后台执行一次test.sh脚本</span><br><span class="line">(5)nohup </span><br><span class="line">功能：如果让程序始终在后台执行，即使关闭当前的终端也执行（之前的&amp;做不到）</span><br><span class="line">nohub ./test.sh &gt; r.log 2&gt;&amp;1 &amp;</span><br><span class="line">8、特殊符号</span><br><span class="line">(1)运行jar包，并且置于后台执行，执行的日志重定向到当前默认的log.txt文件中</span><br><span class="line">java -jar test.jar &gt; log.txt &amp; </span><br><span class="line">(2)&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令。</span><br><span class="line">ls -l &amp;&amp; cd .. </span><br><span class="line">(3)|| 表示上一条命令执行失败后，才执行下一条命令。</span><br><span class="line">als -l || cd ..</span><br><span class="line"><span class="meta prompt_">(4)&gt; </span><span class="language-bash">表示stdout标准输出信息重定向输出，覆盖写。</span></span><br><span class="line">echo 'World' &gt; test.txt</span><br><span class="line"><span class="meta prompt_">(5)&gt;</span><span class="language-bash">&gt; 表示内容追加写。</span></span><br><span class="line">echo 'World' &gt;&gt; test.txt</span><br><span class="line">(6)&amp;&gt; 表示stdout标准输出和stderr错误输出信息，重定向输出，覆盖写。</span><br><span class="line">lll &amp;&gt; test.txt</span><br><span class="line"><span class="meta prompt_">(7)2&gt;</span><span class="language-bash">&amp;1 表示把标准错误的输出重定向到标准输出1，&amp;指示不要把1当做普通文件，而是fd=1即标准输出处理。</span></span><br><span class="line"><span class="meta prompt_">(8)2&gt;</span><span class="language-bash">1 表示把标准错误的输出重定向到1，但这个1不是标准输出，而是一个名为1的文件。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="七、重点"><a href="#七、重点" class="headerlink" title="七、重点"></a>七、重点</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、实体类加了ApiModelProperty注解，但是Swagger结果旁边没有注释</span><br><span class="line">解决：如果返回的的结果中有泛型，则需添加，不能省略</span><br><span class="line"><span class="number">2</span>、<span class="keyword">if</span>里面判断的时候，空指针</span><br><span class="line">    引用类型数据和基本类型数据比较时候会自动拆箱，如果为空此时会引发空指针异常</span><br><span class="line"><span class="number">4</span>、后端接收时间 </span><br><span class="line">  (<span class="number">1</span>)用LocateDateTime接收,pattern必须为年月日时分秒  </span><br><span class="line">       <span class="meta">@JsonFormat(locale="zh", timezone="GMT+8", pattern="yyyy-MM-dd HH:mm:ss")</span></span><br><span class="line">    (<span class="number">2</span>)用Date接收，pattern只需和传时间格式对应</span><br><span class="line">    (<span class="number">3</span>)LocalDate和LocalTime接收时间格式对应</span><br><span class="line"><span class="number">5</span>、后端接收参数正则校验时，只能校验字符串</span><br><span class="line">    <span class="meta">@Pattern(regexp = "^[A-Za-z]+$",message = "正则不匹配")</span></span><br><span class="line"><span class="number">6</span>、全局异常处理</span><br><span class="line"><span class="number">7</span>、前端传数字类型以<span class="number">0</span>开头时候比如(<span class="number">03</span>)，需要加配置，此时把<span class="number">03</span>解析成<span class="number">3</span>了</span><br><span class="line">spring:</span><br><span class="line">  jackson:</span><br><span class="line">    parser:</span><br><span class="line">      allow-numeric-leading-zeros: <span class="literal">true</span></span><br><span class="line"><span class="number">8</span>、表数据空的时候记得空指针处理</span><br><span class="line"><span class="number">9</span>、Stream流创建后只能使用一次</span><br><span class="line"><span class="number">10</span>、对同一个对象的操作会影响所有存储这个对象的数据</span><br><span class="line"><span class="number">11</span>、全局返回值包装怎么做</span><br><span class="line"><span class="number">12</span>、权限注解<span class="meta">@Validated</span>用在类上为什么没有开启全局校验？</span><br><span class="line"><span class="number">13</span>、自定义异常注解、</span><br><span class="line"><span class="number">14</span>、lombok <span class="meta">@Data</span>注解原理以及危</span><br><span class="line"><span class="number">15</span>、Oracle执行sql的的隐式转换</span><br><span class="line"><span class="number">16</span>、Oracle DROP误删表后恢复：</span><br><span class="line">      (<span class="number">1</span>)SELECT * FROM <span class="title function_">USER_RECYCLEBIN</span> </span><br><span class="line">      <span class="params">(<span class="number">2</span>)</span>FLASHBACK TABLE TABLE_NAME TO BEFORE DROP;</span><br><span class="line">删除Table不进入Recycle的方法：drop table tableName purge; 即永久删除</span><br><span class="line"><span class="number">17</span>、shell脚本中一定要注意`（倒引号,表示要执行的命令）和<span class="string">'(单引号)</span></span><br></pre></td></tr></tbody></table></figure><h3 id="八、设计模式"><a href="#八、设计模式" class="headerlink" title="八、设计模式"></a>八、设计模式</h3><h4 id="8-1-创建型模式"><a href="#8-1-创建型模式" class="headerlink" title="8.1 创建型模式"></a>8.1 创建型模式</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">主要特点是将对象的创建和使用分离</span><br><span class="line">  </span><br><span class="line">(<span class="number">1</span>)单例模式</span><br><span class="line">    饿汉式：类加载就会导致该实例对象被创建</span><br><span class="line">    懒汉式：首次使用该对象才会创建</span><br><span class="line">    推荐方式：</span><br><span class="line">    枚举方式</span><br><span class="line">    双重检查锁+<span class="keyword">volatile</span>关键字</span><br><span class="line">    静态类部类方式</span><br><span class="line">    破坏单例：</span><br><span class="line">    序列化：解决方案:在序列化的类中新增readResolve()方法,ObjectInputStream会判断有无这个方法，有就执行</span><br><span class="line">    反射：解决方案：通过构造方法创建对象时候，添加判断---(多线程环境加上同步代码块)</span><br><span class="line">(<span class="number">2</span>)工厂方法模式</span><br><span class="line">(<span class="number">3</span>)抽象工厂模式</span><br><span class="line">     抽象工厂模式是工厂模式的升级，工厂模式只生产同一等级的产品，抽象工厂可生产多个等级的产品</span><br><span class="line">     使用场景：</span><br><span class="line">        <span class="number">1</span>、当创建的对象是一系列相互关联或相互依赖的产品族，如电器工厂的洗衣机、电视剧、冰箱</span><br><span class="line">        <span class="number">2</span>、系统中有多个产品族，但每次只使用某一族产品。如穿不同品牌的衣服、鞋子</span><br><span class="line">        <span class="number">3</span>、系统中提供了产品的类库，且所有产品接口相同，客户端不依赖产品实例的创建细节和内部结构</span><br><span class="line">      如输入法皮肤更换等等。</span><br><span class="line">(<span class="number">4</span>)原型模式：用一个已经创建的实例作原型，通过复制该原型对象来创建一个和原型对象相同的新对象</span><br><span class="line">      角色：</span><br><span class="line">        <span class="number">1</span>、抽象原型类：规定了具体原型对象必须实现的clone()方法</span><br><span class="line">        <span class="number">2</span>、具体原型类：实现抽象原型类的clone方法，它是可被复制的对象</span><br><span class="line">        <span class="number">3</span>、访问类：使用具体原型类的clone方法复制新对象</span><br><span class="line">      使用场景:</span><br><span class="line"><span class="number">1</span>、对象创建复杂，可使用原型模式快速克隆</span><br><span class="line">        <span class="number">2</span>、性能和安全要求比较高</span><br><span class="line">        浅克隆：Object的clone方法是浅克隆，克隆的新对象属性和原对象相同，对于非基本类型属性，克隆对象属性内存地址指向原有对象属性</span><br><span class="line">        深克隆：克隆出新对象，原对象属性中的其它对象也会被克隆，不再指向原对象属性内存地址</span><br><span class="line">(<span class="number">5</span>)建造者模式</span><br><span class="line">       将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示</span><br><span class="line">       使用场景：</span><br><span class="line">          <span class="number">1</span>、创建的对象较复杂，由多个部件构成，各部门面临复杂的变化，但是部件间的构造顺序的稳定的</span><br><span class="line">          <span class="number">2</span>、产品构建和装配方式是分离的，即产品的构建过程和最终的表示是相互独立的</span><br><span class="line">创建型模式对比：</span><br><span class="line">          <span class="number">1</span>、工厂方法模式VS建造者模式</span><br><span class="line">          工厂方法模式注重于整体对象的创建</span><br><span class="line">          建造者模式注重于部件的构建过程，意在通过一步步的精确构建出一个复杂的对象</span><br><span class="line">          <span class="number">2</span>、抽象工厂模式VS建造者模式</span><br><span class="line">          抽象工厂模式实现对产品家族的创建，一个产品家族是这样一系列产品；具有不同分类维度的产品组合，采用抽象工厂模式不需要关心构建过程，只关心什么产品由什么工厂生产</span><br><span class="line">          建造者模式主要目的是通过组装零配件产生一个新产品</span><br></pre></td></tr></tbody></table></figure><h4 id="8-2-结构型模式"><a href="#8-2-结构型模式" class="headerlink" title="8.2 结构型模式"></a>8.2 结构型模式</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   用于描述如何将对象按照某种布局组成更大的结构，分为类结构模式和对象结构型模式，前者采用继承机制来组织接口和类，后者采用组合或聚合来组合对象。后者耦合度低，满足"合成复用原则",所以对象型结构模式比类结构型模式更灵活。</span><br><span class="line">(1)代理模式</span><br><span class="line">(2)适配器模式</span><br><span class="line">(2)装饰者模式</span><br><span class="line">(2)桥接模式</span><br><span class="line">(2)外观模式</span><br><span class="line">(2)组合模式</span><br><span class="line">(2)享元模式</span><br></pre></td></tr></tbody></table></figure><h5 id="1、代理模式"><a href="#1、代理模式" class="headerlink" title="1、代理模式"></a>1、代理模式</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）动态代理</span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">TrainStation</span> <span class="variable">station</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainStation</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">SellTicket</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (SellTicket) Proxy.newProxyInstance(station.getClass().getClassLoader(),         station.getClass().getInterfaces(), <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable {</span><br><span class="line">                System.out.println(<span class="string">"增强"</span>);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(station, args);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">proxyInstance.sellTicket();</span><br><span class="line"></span><br><span class="line">原理:</span><br><span class="line"><span class="number">1</span>、调用proxyInstance.sellTicket()，根据多肽会执行动态代理动态生成的$Proxy0的sellTicket()方法</span><br><span class="line">  <span class="number">2</span>、根据构造方法生成$Proxy0对象，会将自定义的<span class="keyword">new</span> <span class="title class_">InvocationHandler</span>(){}传递给父类Proxy的构造方法，复制给父类的成员变量InvocationHandler</span><br><span class="line">  <span class="number">3</span>、执行<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m3, (Object[])<span class="literal">null</span>)方法会调用自己的invoke方法</span><br><span class="line">  <span class="number">4</span>、invoke方法中会通过反射调用真实对象的Proxy0的sellTicket()方法</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">SellTicket</span> {</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) <span class="keyword">throws</span>  {</span><br><span class="line">        <span class="built_in">super</span>(var1);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">sellTicket</span><span class="params">()</span> <span class="keyword">throws</span>  {</span><br><span class="line">        <span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m3, (Object[])<span class="literal">null</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        m3 = Class.forName(<span class="string">"com.study.nty.design.proxy.SellTicket"</span>).getMethod(<span class="string">"sellTicket"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）CGLIB代理</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">TrainStation</span> <span class="variable">station</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainStation</span>();</span><br><span class="line">  </span><br><span class="line">   <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">   enhancer.setSuperclass(TrainStation.class);</span><br><span class="line">   enhancer.setCallback(</span><br><span class="line">     <span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() {</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable {</span><br><span class="line">          System.out.println(<span class="string">"动态增强"</span>);</span><br><span class="line">          <span class="keyword">return</span> method.invoke(station,args);</span><br><span class="line">   }</span><br><span class="line">   });</span><br><span class="line">   <span class="type">TrainStation</span> <span class="variable">proxy</span> <span class="operator">=</span> (TrainStation) enhancer.create();</span><br><span class="line">   proxy.sellTicket();</span><br><span class="line"></span><br><span class="line">原理:</span><br><span class="line"><span class="number">1</span>、执行proxy.sellTicket()方法会执行MethodInterceptor对象的intercept方法</span><br><span class="line">  Cglib底层采用ASM字节码生成框架，使用字节码技术生成代理类，Cglib不能对<span class="keyword">final</span>修饰的类或方法进行代理，因为Cglib动态生产的类是目标对象的子类。</span><br><span class="line">    </span><br><span class="line">动态代理和静态代理区别</span><br><span class="line">    动态代理会将接口或类中的方法集中在处理器的方法中执行，这样在目标对象的方法比较多的时候能灵活处理，不用像静态代理那样在每个方法都重写、处理。</span><br><span class="line"></span><br><span class="line">代理模式优缺点</span><br><span class="line">    优点</span><br><span class="line">    · 代理模式中客户端和目标对象之间提供中介和保护作用</span><br><span class="line">    · 可以对象目标对象的功能进行增强</span><br><span class="line">      · 使客户端和目标对象分离，降低系统耦合度</span><br><span class="line">    缺点</span><br><span class="line">      · 增加系统复杂度</span><br></pre></td></tr></tbody></table></figure><h5 id="2、适配器模式"><a href="#2、适配器模式" class="headerlink" title="2、适配器模式"></a>2、适配器模式</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">定义：将一个类的接口转换成客户希望的另外的接口，使得原本不能兼容的东西变成兼容。分为类适配器和对象适配器，前者耦合度比较高，应用少</span><br><span class="line">结构：</span><br><span class="line">· 目标接口（Target）：当前系统业务所期待的接口</span><br><span class="line">· 适配者（Adaptee）：被访问和适配现存组件的接口</span><br><span class="line">· 适配器（Adapter）：转换器，通过继承或引用适配者对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>3、行为型模式</p><p>（1）用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。</p><h3 id="九、提升代码质量"><a href="#九、提升代码质量" class="headerlink" title="九、提升代码质量"></a>九、提升代码质量</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、规范</span><br><span class="line"><span class="code">（1）方法上使用提示注解@Nullable、@NonNull(Spring提供的注解，在运行过程不会起作用，只会有提示效果)</span></span><br><span class="line"><span class="code">2、SQL</span></span><br><span class="line"><span class="code">（1）查询结果确认只一条时加上limit 1，拿到结果就返回</span></span><br></pre></td></tr></tbody></table></figure><h3 id="十、密码"><a href="#十、密码" class="headerlink" title="十、密码"></a>十、密码</h3><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">阿里云服务器：root   Alynty99</span><br><span class="line">公安备案账号：root   Alynty99</span><br><span class="line">云数据库：root   Alynty99</span><br><span class="line">SecureCRT: Alynty99</span><br><span class="line">docker：workerboy workerboy</span><br><span class="line">bank cardNo:6228483829734108375</span><br><span class="line">JetBrains: nty99 studyHard99@.</span><br><span class="line">Oracle: 1115195406@qq.com Alynty99.</span><br><span class="line">git公钥地址: ~/.ssh/id<span class="built_in">_</span>rsa.pub  </span><br><span class="line">git公钥密匙: Alynty99</span><br><span class="line">IDEA插件存放位置：C:<span class="keyword">\Users</span><span class="keyword">\nty</span><span class="keyword">\AppData</span><span class="keyword">\Roaming</span><span class="keyword">\JetBrains</span></span><br><span class="line">window杀死进程:netstat -anp | findstr 8080----&gt;taskkill -f -pid 进程号 </span><br></pre></td></tr></tbody></table></figure><p>十一、Mac</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">一、主机名：</span><br><span class="line">就是HostName。</span><br><span class="line">查看：scutil --get HostName</span><br><span class="line">修改：sudo scutil --set HostName 新的主机名</span><br><span class="line"></span><br><span class="line">二、计算机名：</span><br><span class="line">就是ComputerName。它在隔空投送中显示，</span><br><span class="line">查看：scutil --get ComputerName</span><br><span class="line">修改：</span><br><span class="line">方法一：在“设置”——“共享”下，修改“电脑名称”。</span><br><span class="line">方法二：sudo scutil --set ComputerName 新的计算机名</span><br><span class="line"></span><br><span class="line">三、本地主机名（即：本地局域网主机名）</span><br><span class="line">它在局域网中显示，可在finder下的网络查看。</span><br><span class="line">修改：</span><br><span class="line">在“设置”——“共享”下，再点下图中的“编辑”按钮，进去就可以修改了。</span><br><span class="line"></span><br><span class="line">四、修改xcode作者名</span><br><span class="line">修改：设置——用户与群组——点击左下角小锁，解锁——在当前用户上右键，点“高级选项”，修改“全名”，就可以了</span><br><span class="line"></span><br><span class="line">五、修改终端前缀</span><br><span class="line">macOS 的终端前缀默认是 PS1="%n@%m %1~ %# "。</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">n: 表示用户名称，这里是账户名称，可以在（设置——用户与群组——点击左下角小锁，解锁——在当前用户上右键，点“高级选项”，查看账户名称，这里是改不了的）</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">m: 主机名</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">1~: 所在的当前目录</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash"><span class="comment">#: 最后的分隔符号</span></span></span><br><span class="line">修改：</span><br><span class="line">1. 终端输入 open /etc</span><br><span class="line">2. 在打开的文件夹找到bashrc 或者zshrc（取决于你用的哪种终端命令），复制一份到桌面，打开桌面上的这份修改PS1，比如修改成PS1="%n %1~ %# "，修改前最好把原命令注释一份，然后command+s保存</span><br><span class="line">3.删除 /etc/bashrc 或者/etc/zshrc，桌面上的那份复制或移动过来。</span><br><span class="line">4.终端执行source /etc/bashrc 或者source /etc/zshrc，让文件生效。 </span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v1 </tag>
            
            <tag> v2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
