<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一路生花</title>
  
  
  <link href="https://nty99.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://nty99.gitee.io/"/>
  <updated>2022-09-20T03:35:41.418Z</updated>
  <id>https://nty99.gitee.io/</id>
  
  <author>
    <name>nty</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Maven</title>
    <link href="https://nty99.gitee.io/2022/09/18/maven/"/>
    <id>https://nty99.gitee.io/2022/09/18/maven/</id>
    <published>2022-09-18T14:56:45.000Z</published>
    <updated>2022-09-20T03:35:41.418Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一、依赖管理"><a href="#一、依赖管理" class="headerlink" title="一、依赖管理"></a>一、依赖管理</h4><h5 id="1、可选依赖"><a href="#1、可选依赖" class="headerlink" title="1、可选依赖"></a>1、可选依赖</h5><p>​        在依赖下添加optional标签，表示对外隐藏当前依赖的资源，隐藏后对应的资源不具有传递性。如A的pom中引用B，B的某个依赖下设置了optional标签的值为true，则A中不会引入B中的那个依赖，但B不受影响。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>xxx.xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h5 id="2、排除依赖"><a href="#2、排除依赖" class="headerlink" title="2、排除依赖"></a>2、排除依赖</h5><p>​        在依赖下添加exclusions、exclusion标签，表示排除该依赖下的某些依赖。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>xxx.xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>xxx.xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="二、聚合与继承"><a href="#二、聚合与继承" class="headerlink" title="二、聚合与继承"></a>二、聚合与继承</h4><h5 id="1、聚合"><a href="#1、聚合" class="headerlink" title="1、聚合"></a>1、聚合</h5><p>​        聚合是指通过一个父工程来管理若干个子工程。在父工程的pom中添加packaging，值设置为pom(不设置默认为jar)，然后添加modules、module标签，写上子模块名称。子模块顺序没影响，打包的顺序是根据各个模块的依赖决定的。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>model-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>server-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>order-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span></code></pre><h5 id="2、继承"><a href="#2、继承" class="headerlink" title="2、继承"></a>2、继承</h5><p>​        继承是描述的多个工程之间的关系，子工程可以继承父工程的信息，这样的可以简化配置、减少版本冲突。在子工程中添加parent标签，引入父工程的坐标，这样父工程依赖的内容可以传递给子工程。公共的功能可在父工程中添加dependencies标签，这样每个子工程都会继承。父工程添加dependencyManagement标签，只是对依赖进行了版本控制，子类可按自己需求去添加该依赖。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>xxx.xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--公共依赖，会传递给子类--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>xxx.xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--对依赖进行版本控制，不会传递给子类--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>xxx.xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="三、属性"><a href="#三、属性" class="headerlink" title="三、属性"></a>三、属性</h4><h5 id="1、属性列表"><a href="#1、属性列表" class="headerlink" title="1、属性列表"></a>1、属性列表</h5><p>​        maven总共有五种属性，如下：</p><table><thead><tr><th align="center">属性分类</th><th align="center">引用格式</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">自定义属性</td><td align="center">${自定义属性}</td><td align="center">${spring.version}</td></tr><tr><td align="center">内置属性</td><td align="center">${内置属性}</td><td align="center">${project.basedir}、{basedir}</td></tr><tr><td align="center">Setting属性</td><td align="center">${setting.属性名}</td><td align="center">${settings.localRepository}</td></tr><tr><td align="center">Java属性</td><td align="center">${系统属性分类.系统属性名}</td><td align="center">${user.name}</td></tr><tr><td align="center">环境变量属性</td><td align="center">${env.环境变量属性名}</td><td align="center">${env.JAVA_HONE}</td></tr></tbody></table><p>​    （1）自定义属性：自定义属性是最常用的，可以对版本进行统一管理，解决版本不一致、重复问题。在工程中添加properties标签，写上名称。然后在依赖中写版本名称就可以了。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">&gt;</span></span>5.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xxx.version</span><span class="token punctuation">&gt;</span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xxx.version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>xxx.xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${xxx.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><p>​    （2）Setting属性：读取maven本地安装目录里面的settings.xml里面的配置信息。</p><p>​    （3）Java系统变量、环境变量属性：通过mvn help:system查看。</p><h5 id="2、属性扩大"><a href="#2、属性扩大" class="headerlink" title="2、属性扩大"></a>2、属性扩大</h5><p>​        当我们想在配置文件中读取pom中定义的属性怎么办？此时可以在pom中这样配置，然后使用${属性名称}就可以了。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>${project.basedir}/src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="四、多环境配置-了解"><a href="#四、多环境配置-了解" class="headerlink" title="四、多环境配置(了解)"></a>四、多环境配置(了解)</h4><p>​        在pom文件中配置profiles标签，然后配置多个profile子标签代表多个环境，配置activation代表默认使用哪个环境。也可以使用maven命令mvn 指令  -p 环境id代表打包时候指定环境，例如mvn install -p dev。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>db.ip</span><span class="token punctuation">&gt;</span></span>127.0.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>db.ip</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>db.ip</span><span class="token punctuation">&gt;</span></span>121.111.11.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>db.ip</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="五、跳过测试-了解"><a href="#五、跳过测试-了解" class="headerlink" title="五、跳过测试(了解)"></a>五、跳过测试(了解)</h4><p>​        当我们执行maven中test后面的命令时，总是会先执行test命令，但有些场景不需要执行test，如何解决这个问题？有三种方法，如下：</p><p>​    （1）有集成工具，如IDEA中，点maven模块又上角的闪电(2022.2新UI之前的版本)，新UI之后在maven模块右边有个按钮可以直接掉过测试。</p><p>​    （2）通过在build标签里面配置，如下：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.22.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--全局，true都跳过--&gt;</span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skipTests</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skipTests</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--也可对哪些类进行单独配置，includes包含，excludes排除--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>**/Xxx.java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">&gt;</span></span>**/Xxx.java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span></code></pre><p>​    （3）通过mvn命令执行，例如mvn package -D skipTests</p><h4 id="六、私服"><a href="#六、私服" class="headerlink" title="六、私服"></a>六、私服</h4><p>​        所谓私服也就是搭建自己的中央仓库。</p><h5 id="1、仓库分类"><a href="#1、仓库分类" class="headerlink" title="1、仓库分类"></a>1、仓库分类</h5><table><thead><tr><th align="center">仓库分类</th><th align="center">英文名称</th><th align="center">功能</th><th align="center">关联操作</th></tr></thead><tbody><tr><td align="center">宿主仓库</td><td align="center">hosted</td><td align="center">保存自主研发+第三方仓库(如中央仓库下载不到的)</td><td align="center">上传</td></tr><tr><td align="center">代理仓库</td><td align="center">proxy</td><td align="center">代理连接中央仓库</td><td align="center">下载</td></tr><tr><td align="center">仓库组</td><td align="center">group</td><td align="center">为仓库编组简化下载操作</td><td align="center">下载</td></tr></tbody></table><h5 id="2、访问私服配置"><a href="#2、访问私服配置" class="headerlink" title="2、访问私服配置"></a>2、访问私服配置</h5><p>​        在maven的settings.xml中进行配置。</p><p>​    （1）访问私服权限</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>私服仓库名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">&gt;</span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">&gt;</span></span></code></pre><p>​    （2）访问私服路径</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>仓库组id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>进行什么操作会走这个仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>仓库组路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span></code></pre><h5 id="3、私服上传和下载"><a href="#3、私服上传和下载" class="headerlink" title="3、私服上传和下载"></a>3、私服上传和下载</h5><p>​        在项目pom工程中添加distributionManagement标签，根据项目的version标签后缀的值，为release表示部署到repository标签对应的url仓库，为snapshot则表示部署到snapshotRepository标签对应的url仓库。</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>distributionManagement</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>release<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshotRepository</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>snapshot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshotRepository</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>distributionManagement</span><span class="token punctuation">&gt;</span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="项目管理" scheme="https://nty99.gitee.io/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://nty99.gitee.io/2022/09/14/git/"/>
    <id>https://nty99.gitee.io/2022/09/14/git/</id>
    <published>2022-09-14T06:54:57.000Z</published>
    <updated>2022-09-19T12:59:33.461Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一、Git"><a href="#一、Git" class="headerlink" title="一、Git"></a>一、Git</h4><h5 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h5><p>​        Git是一款开源的分布式版本控制系统，用于敏捷高效的处理任何大或小的项目。</p><h5 id="2、Git环境配置"><a href="#2、Git环境配置" class="headerlink" title="2、Git环境配置"></a>2、Git环境配置</h5><p>​        git config控制git的行为，来定义环境变量，它提供三个环境参数，system、global、local。当使用如下命令配置时，不同的参数会写到不同的配置文件中。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --system xxx.xxx--system <span class="token comment">#针对任意登录该linux系统的用户都生效，git的配置信息，写入到/etc/gitconfig</span>--global <span class="token comment">#全局，只针对当前登录的用户生效，git配置信息，写入到~/.gitconfig(使用最多)</span>--local <span class="token comment">#本地，只对某个git管理的项目生效，git配置信息，写入到/管理的文件/.git/config</span></code></pre><h5 id="3、用户git信息配置"><a href="#3、用户git信息配置" class="headerlink" title="3、用户git信息配置"></a>3、用户git信息配置</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --system --list  <span class="token comment">#查看系统所有linux用户的通用配置，此命令检查安装目录下的/etc/gitconfig</span><span class="token function">git</span> config --global --list<span class="token comment">#查看当前linux用户的配置，此命令检查~/.gitconfig</span><span class="token function">git</span> config --local --list<span class="token comment">#查看git目录中仓库配置文件，此命令检查.git/config</span><span class="token function">git</span> config --global user.name <span class="token string">""</span>  <span class="token comment">#配置当前linux用户全局用户名，这台机器所有仓库都使用该配置</span><span class="token function">git</span> config --global user.email <span class="token string">""</span>  <span class="token comment">#配置当前linux用户全局邮箱</span><span class="token function">git</span> config --global color.ui <span class="token boolean">true</span>  <span class="token comment">#配置git语法高亮</span><span class="token function">git</span> config --global --unset user.name  <span class="token comment">#删除某个配置</span><span class="token function">git</span> config --list  <span class="token comment">#列出git能找到的所有配置，从不同的文件中读取所有结果</span><span class="token function">git</span> config user.name  <span class="token comment">#列出git的某项配置</span><span class="token function">git</span> config --global credential.helper store  <span class="token comment">#解决git每次提交和拉取代码需要输入用户名和密码问题</span><span class="token function">git</span> config --global alias.ci commit   <span class="token comment">#别名ci是commit的别名,然后git ci等价于git commit</span>core.editor  <span class="token comment">#文本编辑器  </span>merge.tool  <span class="token comment">#差异分析工具  </span>core.paper <span class="token string">"less -N"</span>  <span class="token comment">#配置显示方式  </span>color.diff <span class="token boolean">true</span>  <span class="token comment">#diff颜色配置  </span><span class="token function">git</span> config core.filemode <span class="token boolean">false</span>  <span class="token comment">#忽略修改权限的文件  </span></code></pre><h5 id="4、Git的工作区域"><a href="#4、Git的工作区域" class="headerlink" title="4、Git的工作区域"></a>4、Git的工作区域</h5><p>​        git分为4个工作区域，工作区、暂存区、本地仓库、远程仓库。git命令实质就是用于记录文件在不同区域的改动。</p><h5 id="5、本地仓库结构"><a href="#5、本地仓库结构" class="headerlink" title="5、本地仓库结构"></a>5、本地仓库结构</h5><p>​        git init或者git clone克隆项目后，会生成.git的隐藏文件，也就是本地仓库，其目录结构如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span>├── HEAD<span class="token comment">#git的文件指针，映射到refs引用</span>├── config<span class="token comment">#该git项目独有的配置</span>├── description<span class="token comment">#仓库的描述信息，主要给gitweb等git托管系统使用</span>├── COMMIT_EDITMSG<span class="token comment">#最新提交的一次Commit Message，git系统不会用到，给用户一个参考</span>└── logs<span class="token comment">#保存所有更新的引用记录</span>    ├── HEAD<span class="token comment">#记录所有分支的版本的变动信息</span>    └── refs    └── heads<span class="token comment">#记录各个分支的版本变动记录</span>    └── remotes <span class="token comment">#记录对远程的操作</span>├── FETCH_HEAD<span class="token comment">#是一个版本链接，指向着目前已经从远程仓库取下来的分支的末端版本</span>├── ORIG_HEAD<span class="token comment">#HEAD指针的前一个状态，在logs/HEAD中，最后一条提交记录，当前hash值</span>├── hooks<span class="token comment">#存放一些shell脚本 </span>├── index<span class="token comment">#保存暂存区的信息，二进制文件</span>├── packed-refs<span class="token comment">#当更新一个引用时，git不会packed-refs，而是会在refs/heads下写入一个新文件。当查找一个引用时，git首先在refs目录下查找，如果未找到则到packed-refs文件中去查找</span>├── info│   └── exclude<span class="token comment">#存放仓库的一些信息</span>├── objects<span class="token comment">#存放所有的git对象，例如git log里面的commit_id可以在里面找到</span>└── refs    ├── heads<span class="token comment">#保存各个分支最新的一次提交的哈希值</span>    ├── remotes    └── origin<span class="token comment">#远程分支的名称</span>    ├── HEAD<span class="token comment">#存放下面分支的引用</span>    └── master <span class="token comment">#记录最新的hash值</span>    └── tags<span class="token comment">#记录当前分支所拥有的标签</span>    └── v1.0  <span class="token comment">#存放标签的hash值</span></code></pre><h5 id="6、注意事项"><a href="#6、注意事项" class="headerlink" title="6、注意事项"></a>6、注意事项</h5><p>​        git仓库里面一定要使用git自带命令。如更改文件名称，如果使用mv test.sh test1.sh，则实质会删除test.sh然后重新创建test1.sh，并且没有被git跟踪。使用git mv test.sh test1.sh则没问题。</p><pre class="language-bash" data-language="bash"><code class="language-bash">nty@work git_repo % <span class="token function">git</span> status           On branch masterChanges not staged <span class="token keyword">for</span> commit:  <span class="token punctuation">(</span>use <span class="token string">"git add/rm &lt;file&gt;..."</span> to update what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git restore &lt;file&gt;..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>deleted:    test.shUntracked files:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file&gt;..."</span> to include <span class="token keyword">in</span> what will be committed<span class="token punctuation">)</span>test1.shno changes added to commit <span class="token punctuation">(</span>use <span class="token string">"git add"</span> and/or <span class="token string">"git commit -a"</span><span class="token punctuation">)</span>nty@work git_repo % </code></pre><h5 id="7、基本流程操作"><a href="#7、基本流程操作" class="headerlink" title="7、基本流程操作"></a>7、基本流程操作</h5><h6 id="1、初始化仓库"><a href="#1、初始化仓库" class="headerlink" title="1、初始化仓库"></a>1、初始化仓库</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在当前分支初始化git仓库</span><span class="token function">git</span> init<span class="token comment">#创建名称为blog的git仓库</span><span class="token function">git</span> init blog<span class="token comment">#以https的方式从远程克隆仓库</span><span class="token function">git</span> clone https://gitee.com/nty99/nty99.git<span class="token comment">#以ssh的方式从远程克隆仓库</span><span class="token function">git</span> clone git@gitee.com:nty99/nty99.git</code></pre><h6 id="2、添加变动至暂存区"><a href="#2、添加变动至暂存区" class="headerlink" title="2、添加变动至暂存区"></a>2、添加变动至暂存区</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看工作区文件状态</span><span class="token function">git</span> status<span class="token comment">#添加所有变动的文件至git管理，即将工作区的未跟踪文件、修改的文件、删除的文件全部添加到暂存区</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token comment">#添加具体的一个或多个文件至暂存区</span><span class="token function">git</span> <span class="token function">add</span> 具体文件<span class="token punctuation">..</span>.</code></pre><h6 id="3、提交至本地仓库"><a href="#3、提交至本地仓库" class="headerlink" title="3、提交至本地仓库"></a>3、提交至本地仓库</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#提交暂存区的文件至本地仓库，推荐加上-m，不然需自己在vim编辑器里面添加注释</span><span class="token function">git</span> commit -m <span class="token string">"注释"</span><span class="token comment">#相当于git add . + git commit -m "注释"，前提是文件被git管理</span><span class="token function">git</span> commit -am <span class="token string">"注释"</span><span class="token comment">#修改最新提交的注释信息，注意此时的commit_id会变化，可通过git reflog查看变化记录</span><span class="token function">git</span> commit --amend -m <span class="token string">"修改"</span></code></pre><h6 id="4、提交至代码托管平台"><a href="#4、提交至代码托管平台" class="headerlink" title="4、提交至代码托管平台"></a>4、提交至代码托管平台</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将本地仓库master分支文件添加到远程仓库origin，更多提交参数请调至14小节查看</span><span class="token function">git</span> push origin master</code></pre><h5 id="8、Git删除操作"><a href="#8、Git删除操作" class="headerlink" title="8、Git删除操作"></a>8、Git删除操作</h5><h6 id="1、rm直接删除"><a href="#1、rm直接删除" class="headerlink" title="1、rm直接删除"></a>1、rm直接删除</h6><p>​        （1）未被git管理：和平常使用的文件一样，rm删除就行了。</p><p>​        （2）被git管理：rm效果是删除工作区的文件，如果想把删除提交到本地仓库，还需要git add和git commit。</p><pre class="language-bash" data-language="bash"><code class="language-bash">nty@work git_repo % <span class="token function">rm</span> test.sh nty@work git_repo % <span class="token function">git</span> statusOn branch masterChanges not staged <span class="token keyword">for</span> commit:  <span class="token punctuation">(</span>use <span class="token string">"git add/rm &lt;file&gt;..."</span> to update what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git restore &lt;file&gt;..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>deleted:    test.shno changes added to commit <span class="token punctuation">(</span>use <span class="token string">"git add"</span> and/or <span class="token string">"git commit -a"</span><span class="token punctuation">)</span>nty@work git_repo % <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>nty@work git_repo % <span class="token function">git</span> statusOn branch masterChanges to be committed:  <span class="token punctuation">(</span>use <span class="token string">"git restore --staged &lt;file&gt;..."</span> to unstage<span class="token punctuation">)</span>deleted:    test.sh</code></pre><h6 id="2、git-rm"><a href="#2、git-rm" class="headerlink" title="2、git rm"></a>2、git rm</h6><p>​            注意：以下三种都是针对被git管理的文件。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#注意 git rm删除的文件必须是和版本库的内容是一致的</span><span class="token comment">#git rm会删除工作区的文件，同时将删除的文件添加到暂存区，相当于rm + git add</span><span class="token function">git</span> <span class="token function">rm</span> test.sh  <span class="token comment">#将文件从暂存区和工作区中删除</span>nty@work git_repo % <span class="token function">git</span> <span class="token function">rm</span> test.sh <span class="token function">rm</span> <span class="token string">'test.sh'</span>nty@work git_repo % <span class="token function">git</span> statusOn branch masterChanges to be committed:  <span class="token punctuation">(</span>use <span class="token string">"git restore --staged &lt;file&gt;..."</span> to unstage<span class="token punctuation">)</span>deleted:    test.sh</code></pre><h6 id="3、git-rm-f"><a href="#3、git-rm-f" class="headerlink" title="3、git rm -f"></a>3、git rm -f</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#当工作区的内容改动后，再想使用git rm命令时，必须添加-f</span>nty@work git_repo % <span class="token builtin class-name">echo</span> <span class="token string">"echo add file"</span> <span class="token operator">&gt;&gt;</span> test.shnty@work git_repo % <span class="token function">git</span> <span class="token function">rm</span> test.sherror: the following <span class="token function">file</span> has <span class="token builtin class-name">local</span> modifications:    test.sh<span class="token punctuation">(</span>use --cached to keep the file, or -f to force removal<span class="token punctuation">)</span>nty@work git_repo % <span class="token function">git</span> <span class="token function">rm</span> -f test.sh <span class="token function">rm</span> <span class="token string">'test.sh'</span>nty@work git_repo % <span class="token function">git</span> statusOn branch masterChanges to be committed:  <span class="token punctuation">(</span>use <span class="token string">"git restore --staged &lt;file&gt;..."</span> to unstage<span class="token punctuation">)</span>deleted:    test.sh</code></pre><h6 id="4、git-rm-–cached"><a href="#4、git-rm-–cached" class="headerlink" title="4、git rm –cached"></a>4、git rm –cached</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#会删除暂存区中的文件，但是会保留工作区中的文件(工作区取消了git跟踪)，并将此次删除提交到暂存区</span><span class="token function">git</span> <span class="token function">rm</span> --cached test.shnty@work git_repo % <span class="token function">git</span> <span class="token function">rm</span> --cached test.sh<span class="token function">rm</span> <span class="token string">'test.sh'</span>nty@work git_repo % <span class="token function">git</span> statusOn branch masterChanges to be committed:  <span class="token punctuation">(</span>use <span class="token string">"git restore --staged &lt;file&gt;..."</span> to unstage<span class="token punctuation">)</span>deleted:    test.shUntracked files:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file&gt;..."</span> to include <span class="token keyword">in</span> what will be committed<span class="token punctuation">)</span>test.sh</code></pre><h5 id="9、Git查看版本信息"><a href="#9、Git查看版本信息" class="headerlink" title="9、Git查看版本信息"></a>9、Git查看版本信息</h5><h6 id="1、git-log"><a href="#1、git-log" class="headerlink" title="1、git log"></a>1、git log</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#等价于git log --all,查看全部版本信息</span>nty@work git_repo % <span class="token function">git</span> logcommit 271783295f98eaf41a63c8d9d9ae23c5c8206074 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master<span class="token punctuation">)</span>Author: <span class="token number">123</span> <span class="token operator">&lt;</span><span class="token number">1115195406</span>@qq.com<span class="token operator">&gt;</span>Date:   Thu Sep <span class="token number">15</span> <span class="token number">10</span>:56:29 <span class="token number">2022</span> +0800    second commitcommit 2d7c6a5ed6c30372d4936258b4f7ee5acb0011b6Author: nty <span class="token operator">&lt;</span><span class="token number">1115195406</span>@qq.com<span class="token operator">&gt;</span>Date:   Wed Sep <span class="token number">14</span> <span class="token number">23</span>:39:55 <span class="token number">2022</span> +0800    first commit</code></pre><h6 id="2、git-log-–onlie"><a href="#2、git-log-–onlie" class="headerlink" title="2、git log –onlie"></a>2、git log –onlie</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#一行显示,简略的显示git版本信息</span>nty@work git_repo % <span class="token function">git</span> log --oneline<span class="token number">2717832</span> <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master<span class="token punctuation">)</span> second commit2d7c6a5 first commit</code></pre><h6 id="3、git-log-–all-–graph"><a href="#3、git-log-–all-–graph" class="headerlink" title="3、git log –all –graph"></a>3、git log –all –graph</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用字符图形化显示git版本信息</span>nty@work git_repo % <span class="token function">git</span> log --graph  * commit 271783295f98eaf41a63c8d9d9ae23c5c8206074 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master<span class="token punctuation">)</span><span class="token operator">|</span> Author: <span class="token number">123</span> <span class="token operator">&lt;</span><span class="token number">1115195406</span>@qq.com<span class="token operator">&gt;</span><span class="token operator">|</span> Date:   Thu Sep <span class="token number">15</span> <span class="token number">10</span>:56:29 <span class="token number">2022</span> +0800<span class="token operator">|</span> <span class="token operator">|</span>     second commit<span class="token operator">|</span> * commit 2d7c6a5ed6c30372d4936258b4f7ee5acb0011b6  Author: nty <span class="token operator">&lt;</span><span class="token number">1115195406</span>@qq.com<span class="token operator">&gt;</span>  Date:   Wed Sep <span class="token number">14</span> <span class="token number">23</span>:39:55 <span class="token number">2022</span> +0800        first commit</code></pre><h6 id="4、git-log-n"><a href="#4、git-log-n" class="headerlink" title="4、git log -n"></a>4、git log -n</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#显示最新的n条记录</span>nty@work git_repo % <span class="token function">git</span> log -1commit 271783295f98eaf41a63c8d9d9ae23c5c8206074 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master<span class="token punctuation">)</span>Author: <span class="token number">123</span> <span class="token operator">&lt;</span><span class="token number">1115195406</span>@qq.com<span class="token operator">&gt;</span>Date:   Thu Sep <span class="token number">15</span> <span class="token number">10</span>:56:29 <span class="token number">2022</span> +0800    second commitcommit 2d7c6a5ed6c30372d4936258b4f7ee5acb0011b6Author: nty <span class="token operator">&lt;</span><span class="token number">1115195406</span>@qq.com<span class="token operator">&gt;</span>Date:   Wed Sep <span class="token number">14</span> <span class="token number">23</span>:39:55 <span class="token number">2022</span> +0800    first commit</code></pre><h5 id="10、Git撤销操作"><a href="#10、Git撤销操作" class="headerlink" title="10、Git撤销操作"></a>10、Git撤销操作</h5><p>​        当我们写完代码，add、commit后，此时想撤销commit或者add时候，怎么办？首先我们要了解，git是通过指针进行版本管理，那个指针就是HEAD，HEAD表示当前的版本，HEAD^表示上个版本，HEAD^^表示上上个版本。此时可以使用reset来完成版本变更。git reset有三种方式：</p><p>​    （1）–mixed：不删除工作空间改动代码，撤销commit，并且撤销git add操作。该参数为默认参数。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#回退到上个版本</span><span class="token function">git</span> reset --mixed HEAD^<span class="token comment">#回退到指定版本</span><span class="token function">git</span> reset --mixed 4e107ff</code></pre><p>​    （2）–soft：不删除工作空间改动代码，撤销commit，不撤销git add。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --soft HEAD^</code></pre><p>​    （3）–hard：删除工作空间改动代码，撤销commit，撤销git add。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --hard HEAD^</code></pre><h6 id="1、git-reset"><a href="#1、git-reset" class="headerlink" title="1、git reset"></a>1、git reset</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#git reset --hard HEAD^ 回退到上个版本</span>nty@work git_repo % <span class="token function">git</span> reset --hard HEAD^^^HEAD is now at bcae92e third delete<span class="token comment">#git reset --hard 版本号ID 回退到指定版本</span>nty@work git_repo % <span class="token function">git</span> reset --hard 4e107ffHEAD is now at 4e107ff <span class="token function">git</span> <span class="token function">rm</span> -f <span class="token builtin class-name">test</span></code></pre><h6 id="2、git-reflog"><a href="#2、git-reflog" class="headerlink" title="2、git reflog"></a>2、git reflog</h6><p>​            查看git所有版本变动记录。</p><h6 id="3、git-checkout"><a href="#3、git-checkout" class="headerlink" title="3、git checkout"></a>3、git checkout</h6><p>​            checkout除了常用的切换分支功能外，还有还原操作。有如下场景，我们修改了一个文件Test.java，但是想用git还原，此时怎么办?此时需要考虑三种情况:</p><p>​        （1）还在工作区</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -- Test.java<span class="token comment">#还原所有变动文件</span><span class="token function">git</span> checkout -- <span class="token builtin class-name">.</span></code></pre><p>​        （2）提交到暂存区</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#回退到当前版本，撤销add，然后checkout还原</span><span class="token function">git</span> reset HEAD<span class="token function">git</span> checkout -- Test.java</code></pre><p>​        （3）提交到本地仓库</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#撤销commit，撤销add，checkout还原。也可以直接git reset --hard HEAD^直接撤销操作并且将改动的记录删除。</span><span class="token function">git</span> reset HEAD^<span class="token function">git</span> checkout -- Test.java</code></pre><h5 id="11、Git文件暂存"><a href="#11、Git文件暂存" class="headerlink" title="11、Git文件暂存"></a>11、Git文件暂存</h5><p>​        git stash就是把暂存区中还没提交的文件临时存放到一个区域，以便于其它操作。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash save <span class="token string">"存储"</span> <span class="token comment">#不自定义注释的话可以简写成git stash,临时保存暂存区的数据</span><span class="token function">git</span> stash list <span class="token comment">#查看stash保存的列表及id</span><span class="token function">git</span> stash pop <span class="token comment">#恢复最新的stash记录</span><span class="token function">git</span> stash pop <span class="token function">id</span> <span class="token comment">#恢复指定的stash记录</span><span class="token function">git</span> stash <span class="token function">clear</span> <span class="token comment">#清空所有stash记录</span><span class="token function">git</span> stash drop <span class="token function">id</span> <span class="token comment">#删除某个stash记录</span></code></pre><h5 id="12、Git分支"><a href="#12、Git分支" class="headerlink" title="12、Git分支"></a>12、Git分支</h5><h6 id="1、注意："><a href="#1、注意：" class="headerlink" title="1、注意："></a>1、注意：</h6><p>​        （1）git branch nty或者git checkout -b nty创建的新分支都是以当前分支的最新状态创建的。</p><p>​        （2）只要文件没有在某个分支commit过，则可以在任何分支看到此文件。</p><p>​        （3）在某个分支修改、删除一个提交过的文件，此时必须在当前分支提交后才能切换到其它分支。</p><h6 id="2、分支信息查看"><a href="#2、分支信息查看" class="headerlink" title="2、分支信息查看"></a>2、分支信息查看</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token comment">#查看本地所有分支,并以星号标识当前所在的分支</span><span class="token function">git</span> branch -r <span class="token comment">#显示远程分支信息</span><span class="token function">git</span> branch -a <span class="token comment">#显示本地、远程所有分支</span><span class="token function">git</span> branch -vv <span class="token comment">#查看当前分支与远程分支的跟踪关系</span></code></pre><h6 id="3、分支创建、切换、跟踪"><a href="#3、分支创建、切换、跟踪" class="headerlink" title="3、分支创建、切换、跟踪"></a>3、分支创建、切换、跟踪</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建新分支</span><span class="token function">git</span> branch nty<span class="token comment">#切换分支</span><span class="token function">git</span> checkout nty<span class="token comment">#创建新分支并且立即切换</span><span class="token function">git</span> checkout -b nty<span class="token comment">#切换到标签对应的版本，因为tag相当于是一个快照，此时切换过去后不能修改代码</span><span class="token function">git</span> checkout tag_name<span class="token comment">#根据tag对应的版本创建新分支nty，这样就能操作了</span><span class="token function">git</span> checkout -b nty tag_name<span class="token comment">#创建nty分支并追踪origin/nty，前提是本地没有该分支且远程必须有此分支</span><span class="token function">git</span> checkout -b nty origin/nty<span class="token comment">#创建nty分支并追踪origin/nty，前提是本地没有该分支且远程必须有此分支</span><span class="token function">git</span> branch --track nty origin/nty<span class="token comment">#设置nty分支跟踪远程nty分支,如果nty不写分支则默认设置当前分支跟踪，分支必须存在</span><span class="token function">git</span> branch --set-upstream-to origin/nty nty<span class="token comment">#设置nty分支跟踪远程分支，如果nty不写则默认设置当前分支，分支必须存在</span><span class="token function">git</span> branch -u origin/nty nty<span class="token comment">#将本地nty分支修改成nty1分支</span><span class="token function">git</span> branch -m nty nty1</code></pre><h6 id="4、分支删除"><a href="#4、分支删除" class="headerlink" title="4、分支删除"></a>4、分支删除</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch -d nty <span class="token comment">#删除分支，只有当前分支和目标分支完全合并后才能删除</span><span class="token function">git</span> branch -D nty <span class="token comment">#强制删除分支</span><span class="token function">git</span> branch -d -r nty <span class="token comment">#删除远程分支，删除后还需git push</span></code></pre><h6 id="5、分支合并"><a href="#5、分支合并" class="headerlink" title="5、分支合并"></a>5、分支合并</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge nty <span class="token comment">#合并分支</span><span class="token comment">#git merge 冲突后，需手动查看冲突文件，修改后，git add file解决冲突</span></code></pre><h5 id="13、Git标签"><a href="#13、Git标签" class="headerlink" title="13、Git标签"></a>13、Git标签</h5><p>​        给提交的版本记录打上一个标记，更好的记录版本信息。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token comment">#查看所有标签</span><span class="token function">git</span> show 标签名称 <span class="token comment">#显示标签信息以及关联的版本记录信息</span><span class="token function">git</span> tag -a v1.0 -m <span class="token string">"第一个版本"</span> <span class="token comment">#给最新版本记录新建标签并说明标签注释</span><span class="token function">git</span> tag -a v0.9 commit_id -m <span class="token string">"注释"</span> <span class="token comment">#给指定版本打上标签并说明标签注释</span><span class="token function">git</span> log --oneline --decorate <span class="token comment">#显示简略日志版本号和对应标签信息</span><span class="token function">git</span> tag -d 标签名称 <span class="token comment">#删除标签</span></code></pre><h5 id="14、Git远程"><a href="#14、Git远程" class="headerlink" title="14、Git远程"></a>14、Git远程</h5><p>​        将本地仓库与远程代码托管平台进行关联，如Gitee、GitHub、GitLab。</p><h6 id="1、查看、关联"><a href="#1、查看、关联" class="headerlink" title="1、查看、关联"></a>1、查看、关联</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看远程仓库的名字</span><span class="token function">git</span> remote<span class="token comment">#修改远程仓库的名字</span><span class="token function">git</span> remote <span class="token function">rename</span> origin origin1<span class="token comment">#查看关联的远程仓库地址</span><span class="token function">git</span> remote -v<span class="token comment">#与远程仓库(可多个)建立连接，origin是给远程仓库起的名称，后面是远程仓库地址</span><span class="token function">git</span> remote <span class="token function">add</span> o rigin https://xxx<span class="token comment">#显示远程的配置信息</span><span class="token function">git</span> show-ref</code></pre><h6 id="2、拉取"><a href="#2、拉取" class="headerlink" title="2、拉取"></a>2、拉取</h6><p>​        （1）fetch</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#这个命令将某个远程主机的更新全部取回本地</span><span class="token function">git</span> fetch <span class="token operator">&lt;</span>远程主机名<span class="token operator">&gt;</span><span class="token comment">#如果只想取回特定分支的更新，可以指定分支名</span><span class="token function">git</span> fetch <span class="token operator">&lt;</span>远程主机名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>分支名<span class="token operator">&gt;</span><span class="token comment">#将远程的分支内容拉取到本地dev分支</span><span class="token function">git</span> fetch <span class="token operator">&lt;</span>远程主机名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>分支名<span class="token operator">&gt;</span>:dev<span class="token comment">#取回更新后，会返回一个FETCH_HEAD ，指的是某个branch在服务器上的最新状态，我们可以在本地通过它查看刚取回的更新信息</span><span class="token function">git</span> log -p FETCH_HEAD</code></pre><p>​        （2）pull</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#git pull等价于git fetch + git merge FETCH_HEAD</span><span class="token comment">#将远程主机的某个分支的更新取回，并与本地指定的分支合并，完整格式可表示为</span><span class="token function">git</span> pull <span class="token operator">&lt;</span>远程主机名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>远程分支名<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>本地分支名<span class="token operator">&gt;</span><span class="token comment">#如果远程分支是与当前分支合并，则冒号后面的部分可以省略</span><span class="token function">git</span> pull origin master</code></pre><h6 id="3、推送"><a href="#3、推送" class="headerlink" title="3、推送"></a>3、推送</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将本地master分支代码推送到远程origin仓库master分支</span><span class="token function">git</span> push origin master:refs/for/master<span class="token comment">#如果远程分支被省略，则表示将本地分支推送到与之存在追踪关系的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建</span><span class="token function">git</span> push origin master<span class="token comment">#如你创建分支但是没有设置跟踪，提交时候加上-u，这样提交后就会设置跟踪了，下次提交可简写成git push</span><span class="token function">git</span> push -u origin master<span class="token comment">#如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于git push origin --delete master</span><span class="token function">git</span> push origin:refs/for/master<span class="token comment">#如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支</span><span class="token function">git</span> push origin<span class="token comment">#如果当前分支只有一个远程分支，那么主机名都可以省略</span><span class="token function">git</span> push</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="版本控制" scheme="https://nty99.gitee.io/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://nty99.gitee.io/2022/09/13/design/"/>
    <id>https://nty99.gitee.io/2022/09/13/design/</id>
    <published>2022-09-13T06:53:20.000Z</published>
    <updated>2022-09-20T06:37:13.514Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一、创建型模式"><a href="#一、创建型模式" class="headerlink" title="一、创建型模式"></a>一、创建型模式</h4><p>​        主要特点是将对象的创建和使用分离。</p><h5 id="1、单例模式"><a href="#1、单例模式" class="headerlink" title="1、单例模式"></a>1、单例模式</h5><p>​    1、分类</p><p>​        （1）饿汉式：类加载就会导致该实例对象被创建</p><p>​        （2）懒汉式：首次使用该对象才会创建</p><p>​    2、实现方式</p><p>​        （1）双重检查锁+volatile关键字</p><p>​        （2）静态类部类方式</p><p>​        （3）枚举方式，推荐</p><p>​    3、破坏方法</p><p>​        （1）序列化：解决方案:在序列化的类中新增readResolve()方法,ObjectInputStream会判断有无这个方法，有就执行。</p><p>​        （2）反射：解决方案：通过构造方法创建对象时候，添加判断(多线程环境加上同步代码块)。</p><p>​    4、代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton1</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 防止反射破外单例模式     */</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"已经创建了对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 防止序列化破外单例模式     */</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">readResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Singleton1</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     *  多线程情况下，由于JVM实例化对象会进行优化和指令重排序,使用volatile保证可见性和有序性     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton1</span> instance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton1</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//双重检查锁(DCL)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2、工厂方法模式"><a href="#2、工厂方法模式" class="headerlink" title="2、工厂方法模式"></a>2、工厂方法模式</h5><p>​    1、分类</p><p>​        （1）简单工厂模式</p><p>​        （2）抽象工厂模式</p><p>​    2、抽象工厂使用场景</p><p>​        （1）当创建的对象是一系列相互关联或相互依赖的产品族，如电器工厂的洗衣机、电视剧、冰箱。</p><p>​        （2）系统中有多个产品族，但每次只使用某一族产品。如穿不同品牌的衣服、鞋子。</p><p>​        （3）系统中提供了产品的类库，且所有产品接口相同，客户端不依赖产品实例的创建细节和内部结构，如输入法皮肤更换等等。</p><h5 id="3、原型模式"><a href="#3、原型模式" class="headerlink" title="3、原型模式"></a>3、原型模式</h5><p>​    1、介绍</p><p>​            用一个已经创建的实例作原型，通过复制该原型对象来创建一个和原型对象相同的新对象。</p><p>​    2、角色</p><p>​        （1）抽象原型类：规定了具体原型对象必须实现的clone()方法</p><p>​        （2）具体原型类：实现抽象原型类的clone方法，它是可被复制的对象</p><p>​        （3）访问类：使用具体原型类的clone方法复制新对象</p><p>​    3、使用场景</p><p>​        （1）对象创建复杂，可使用原型模式快速克隆</p><p>​        （2）性能和安全要求比较高</p><p>​    4、解释</p><p>​        （1）浅克隆：Object的clone方法是浅克隆，克隆的新对象属性和原对象相同，对于非基本类型属性，克隆对象属性内存地址指向原有对象属性。</p><p>​        （2）深克隆：克隆出新对象，原对象属性中的其它对象也会被克隆，不再指向原对象属性内存地址</p><h5 id="4、建造者模式"><a href="#4、建造者模式" class="headerlink" title="4、建造者模式"></a>4、建造者模式</h5><p>​    1、介绍</p><p>​            将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示，不必通过构造方法根据参数创建对象，可以自己指定对象的属性。</p><p>​    2、使用场景</p><p>​        （1）创建的对象较复杂，由多个部件构成，各部门面临复杂的变化，但是部件间的构造顺序的稳定的。</p><p>​        （2）产品构建和装配方式是分离的，即产品的构建过程和最终的表示是相互独立的。</p><p>​    3、代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Worker</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token class-name">Builder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> builder<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> builder<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> builder<span class="token punctuation">.</span>sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>        <span class="token class-name">Builder</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Builder</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Builder</span> <span class="token function">sex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Worker</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="5、模式对比"><a href="#5、模式对比" class="headerlink" title="5、模式对比"></a>5、模式对比</h5><p>​    1、工厂方法模式VS建造者模式<br>​            工厂方法模式注重于整体对象的创建，建造者模式注重于部件的构建过程，意在通过一步步的精确构建出一个复杂的对象。</p><p>​    2、抽象工厂模式VS建造者模式<br>​            抽象工厂模式实现对产品家族的创建，一个产品家族是这样一系列产品；具有不同分类维度的产品组合，采用抽象工厂模式不需要关心构建过程，只关心什么产品由什么工厂生产。建造者模式主要目的是通过组装零配件产生一个新产品。</p><h4 id="二、结构型模式"><a href="#二、结构型模式" class="headerlink" title="二、结构型模式"></a>二、结构型模式</h4><p>​        用于描述如何将对象按照某种布局组成更大的结构，分为类结构模式和对象结构型模式，前者采用继承机制来组织接口和类，后者采用组合或聚合来组合对象。后者耦合度低，满足”合成复用原则”,所以对象型结构模式比类结构型模式更灵活。</p><h5 id="1、代理模式"><a href="#1、代理模式" class="headerlink" title="1、代理模式"></a>1、代理模式</h5><p>​    1、分类</p><p>​        （1）静态代理</p><p>​        （2）动态代理，动态代理又分Jdk动态代理和Cglib动态代理</p><p>​    2、Jdk动态代理原理</p><p>​        （1）调用proxyInstance.sellTicket()，根据多肽会执行动态代理动态生成的$Proxy0的sellTicket()方法。</p><p>​        （2）根据构造方法生成$Proxy0对象，会将自定义的new InvocationHandler(){}传递给父类Proxy的构造方法，复制给父类的成员变量InvocationHandler。</p><p>​        （3）执行super.h.invoke(this, m3, (Object[])null)方法会调用自己的invoke方法。</p><p>​        （4）invoke方法中会通过反射调用真实对象的Proxy0的sellTicket()方法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">TrainStation</span> station <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrainStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SellTicket</span> proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SellTicket</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>  station<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  station<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>station<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>proxyInstance<span class="token punctuation">.</span><span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> $<span class="token class-name">Proxy0</span> <span class="token keyword">extends</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">SellTicket</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m3<span class="token punctuation">;</span>    <span class="token keyword">public</span> $<span class="token class-name">Proxy0</span><span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m3<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        m3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.study.nty.design.proxy.SellTicket"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"sellTicket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    3、Cglib动态代理原理</p><p>​        （1）执行proxy.sellTicket()方法会执行MethodInterceptor对象的intercept方法。</p><p>​        （2）Cglib底层采用ASM字节码生成框架，使用字节码技术生成代理类，Cglib不能对final修饰的类或方法进行代理，因为Cglib动态生产的类是目标对象的子类。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">TrainStation</span> station <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrainStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">TrainStation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span>     <span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动态增强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>station<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">TrainStation</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TrainStation</span><span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   proxy<span class="token punctuation">.</span><span class="token function">sellTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    4、两者区别</p><p>​            动态代理会将接口或类中的方法集中在处理器的方法中执行，这样在目标对象的方法比较多的时候能灵活处理，不用像静态代理那样在每个方法都重写、处理。    </p><p>​    5、优缺点</p><p>​        （1）优点：代理模式中客户端和目标对象之间提供中介和保护作用，可以对象目标对象的功能进行增强，使客户端和目标对象分离，降低系统耦合度。</p><p>​        （2）缺点：增加系统复杂度</p><h5 id="2、适配器模式"><a href="#2、适配器模式" class="headerlink" title="2、适配器模式"></a>2、适配器模式</h5><p>​        将一个类的接口转换成客户希望的另外的接口，使得原本不能兼容的东西变成兼容。分为类适配器和对象适配器，前者耦合度比较高，应用少。</p><p>​    1、角色</p><p>​        （1）目标接口(Target)：当前系统业务所期待的接口</p><p>​        （2）适配者(Adaptee)：被访问和适配现存组件的接口</p><p>​        （3）适配器(Adapter)：转换器，通过继承或引用适配者对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。</p><h5 id="3、装饰者模式"><a href="#3、装饰者模式" class="headerlink" title="3、装饰者模式"></a>3、装饰者模式</h5><p>​        暂不展开说明。</p><h5 id="4、桥接模式"><a href="#4、桥接模式" class="headerlink" title="4、桥接模式"></a>4、桥接模式</h5><p>​    1、角色</p><p>​        （1）抽象化角色：定义抽象类，并包含对实现化角色的引用。</p><p>​        （2）扩展抽象化角色：继承抽象化角色，重写父类方法，通过组合关系调用实现化角色的方法</p><p>​        （3）实现化角色：定义接口，供扩展抽象化角色调用。</p><p>​        （4）具体实现化角色：给出实现化角色的接口的具体实现。</p><h5 id="5、门面模式"><a href="#5、门面模式" class="headerlink" title="5、门面模式"></a>5、门面模式</h5><p>​    1、Web项目中的应用</p><p>​        在Tomcat中，提供了RequestFacade作为门面模式的类。</p><h5 id="6、组合模式"><a href="#6、组合模式" class="headerlink" title="6、组合模式"></a>6、组合模式</h5><p>​    1、角色</p><p>​        （1）抽象根节点：定义系统各层次对象共有的方法和属性，可以预先定义一些默认方法和属性。</p><p>​        （2）树枝节点：定义树枝节点的行为，存储子节点，组合树枝节点和叶子节点形成一个树形结构。</p><p>​        （3）叶子节点：叶子节点对象，其下再无分支，是系统层次遍历的最小单位。</p><p>​    2、分类</p><p>​            透明模式、安全模式。</p><p>​    3、应用场景</p><p>​            如菜单模块，一级菜单下会有多个二级菜单，每个二级菜单下会有多个三级菜单。</p><h5 id="7、享元模式"><a href="#7、享元模式" class="headerlink" title="7、享元模式"></a>7、享元模式</h5><p>​    1、结构</p><p>​        （1）内部状态：不会随环境改变而改变的可共享的部分</p><p>​        （2）外部状态：指随环境的改变而改变的不可共享的部分</p><p>​    2、角色</p><p>​        （1）抽象享元角色：通常是一个接口或抽象类，在抽象享元类中声明了具体享元类公共的方法，这些方法可以向外界提供享元对象的内部数据(内部状态)，同时也可以通过这些方法来设置外部数据(外部状态)。</p><p>​        （2）具体享元角色：实现了抽象享元类，称为享元对象。在具体享元类中为内部状态提供了存储空间。通常我们可以结合单利模式来设计具体享元类，为每一个具体享元类提供唯一的享元对象。</p><p>​        （3）非享元角色：并不是所有抽象享元类的子类需要被共享，不能被共享的子类可设计成非共享享元类。当需要非共享具体享元对象时候可以直接实例化创建。</p><p>​        （4）享元工厂角色：负责创建和管理享元角色。当客户对象请求一个享元对象时候，享元工厂检查是否存在符合要求的享元对象，如果存在则提供，不存在则创建。</p><h4 id="三、行为型模式"><a href="#三、行为型模式" class="headerlink" title="三、行为型模式"></a>三、行为型模式</h4><p>​        用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。</p><h5 id="1、模板方法模式"><a href="#1、模板方法模式" class="headerlink" title="1、模板方法模式"></a>1、模板方法模式</h5><p>​    1、角色</p><p>​            抽象类和具体子类。</p><p>​        （1）抽象类：负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成。</p><p>​        （2）具体子类：实现抽象类中定义的抽象方法和钩子方法，它们是一个顶级逻辑的的组成步骤。</p><p>​    2、模版方法</p><p>​            定义了算法的骨架，按某种顺序调用其包含的基本方法。</p><p>​    3、基本方法</p><p>​            是实现算法各个步骤的方法，是模板方法的组成部分。基本方法也可以分为三种：</p><p>​        （1）抽象方法：一个抽象方法由抽象类声明、由其具体子类实现。</p><p>​        （2）具体方法：一个具体方法由一个抽象类或具体类声明实现，其子类可以覆盖也可以直接继承</p><p>​        （3）钩子方法：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法。一般钩子方法是用于判断的逻辑方法，                                     这种方法名一般为isXxx，返回值是boolean类型。</p><h5 id="2、策略模式"><a href="#2、策略模式" class="headerlink" title="2、策略模式"></a>2、策略模式</h5><p>​    1、使用场景</p><p>​        （1）一个类需要动态的在几种算法中选择一种时，可将每个算法封装到策略类中。</p><p>​        （2）系统中各算法彼此完全独立，且要求对客户端隐藏其算法细节时。</p><h5 id="3、命令模式"><a href="#3、命令模式" class="headerlink" title="3、命令模式"></a>3、命令模式</h5><p>​    1、角色</p><p>​        （1）抽象命令类角色：定义命令的接口，声明执行的方法。</p><p>​        （2）具体命令类角色：具体的命令，实现命令接口。通常会持有接受者，并调用接受者功能来完成命令操作</p><p>​        （3）实现者/接受者角色：真正执行命令的对象，任何类都可能成为一个接受者，只要实现命令要求的功能。</p><p>​        （4）调用者/请求者角色：调用命令对象执行请求，通常持有命令对象，可以只有很多命令对象。相当于使用命令对象的入口</p><p>​    2、应用场景</p><p>​            如去餐馆点餐，你(调用者)下命令给服务员(具体命令角色)，服务员传达给厨师(接受者角色)，厨师执行。</p><p>​    3、Jdk中应用</p><p>​            Runnable是一个典型的命令模式，Runnable承担抽象命令角色，Thread担任调用者，Thread类的start方法是执行方法(入口)。</p><h5 id="4、责任链模式"><a href="#4、责任链模式" class="headerlink" title="4、责任链模式"></a>4、责任链模式</h5><p>​    1、应用场景</p><p>​            例如公司假条审批，在我–&gt;负责人–&gt;主管–&gt;老板的层级审批的链路。</p><p>​    2、Web项目中的应用</p><p>​            FilterChain是责任链的典型应用，Filter子实现类通过FilterChain组成链路调用。</p><h5 id="5、状态模式"><a href="#5、状态模式" class="headerlink" title="5、状态模式"></a>5、状态模式</h5><p>​        暂不展开说明。</p><h5 id="6、观察者模式"><a href="#6、观察者模式" class="headerlink" title="6、观察者模式"></a>6、观察者模式</h5><p>​    1、Jdk中应用</p><p>​        （1）Observable抽象目标类(发布者)，它有一个Vector集合成员变量，存储需要通知的观察者。当它的状态发生改变后(调用setChange方法)，然后去通知观察者(调用notifyObservers方法)。后添加到集合中的观察者会先收到通知。</p><p>​        （2）Observer抽象观察者(消费者、订阅者)，它监视目标对象的变化，当收到通知后，会调用update方法工作。</p><h5 id="7、中介者模式"><a href="#7、中介者模式" class="headerlink" title="7、中介者模式"></a>7、中介者模式</h5><p>​        暂不展开说明。    </p><h5 id="8、迭代器模式"><a href="#8、迭代器模式" class="headerlink" title="8、迭代器模式"></a>8、迭代器模式</h5><p>​    1、Jdk中应用</p><p>​            ArrayList的内部类Itr实现了Iterable接口，ArrayList中定义iterator方法，来获取具体迭代器。</p><h5 id="9、访问者模式"><a href="#9、访问者模式" class="headerlink" title="9、访问者模式"></a>9、访问者模式</h5><p>1、分派技术</p><p>​    1、概念</p><p>​            变量被声明时的类型叫做变量的静态类型，而变量引用对象的真实类型又叫做变量的实际类型。如Map map = new HashMap();   map变量的静态类型是Map，动态类型是HashMap。根据变量的类型而对方法进行的选择，叫做分派。</p><p>​    2、分类</p><p>​        （1）静态分派：发生在编译时期，分派根据静态类型信息发生。方法重载就是静态分派。</p><p>​        （2）动态分配：发生在运行时期，动态分派动态的置换某个方法。Java通过方法的重写支持动态分派。</p><p>​        （3）双分派：指在选择一个方法的时候，不仅仅要根据消息接受者的运行时的区别，还要根据参数的运行时的区别。</p><p>​    3、例子(双分派)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment">/**     *  Animal a1 = new Animal(); 静态类型Animal，动态类型右边     *  调用printInfo方法，重载根据静态类型选择，所以都进入第一个方法。     *  调用animal.eat()方法，是真实对象调用，所以会执行真实类型的eat方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Animal</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Animal</span> a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Animal</span> a3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printInfo</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printInfo</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printInfo</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> animal<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"animal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token class-name">Cat</span> cat<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token class-name">Dog</span> dog<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="10、备忘录模式"><a href="#10、备忘录模式" class="headerlink" title="10、备忘录模式"></a>10、备忘录模式</h5><p>​        暂不展开说明。</p><h5 id="11、解释器模式"><a href="#11、解释器模式" class="headerlink" title="11、解释器模式"></a>11、解释器模式</h5><p>​        暂不展开说明。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="设计模式" scheme="https://nty99.gitee.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Logback</title>
    <link href="https://nty99.gitee.io/2022/09/11/log/"/>
    <id>https://nty99.gitee.io/2022/09/11/log/</id>
    <published>2022-09-11T14:58:31.000Z</published>
    <updated>2022-09-11T15:16:01.597Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一、Logback"><a href="#一、Logback" class="headerlink" title="一、Logback"></a>一、Logback</h4><h5 id="1、日志两大规范"><a href="#1、日志两大规范" class="headerlink" title="1、日志两大规范"></a>1、日志两大规范</h5><p>​    1、Commons Logging  (JCL)</p><p>​    2、Simple Logging Facade for JAVA (slf4j)</p><p>​    由于log4j性能问题，采用logback替代log4j</p><h5 id="2、日志级别"><a href="#2、日志级别" class="headerlink" title="2、日志级别"></a>2、日志级别</h5><p>​    1、级别程度是：TRACE&lt;DEBUG&lt;INFO&lt;WARN&lt;ERROR</p><p>​    2、默认级别debug，只能输出级别大于或者等于此级别的信息，例如设置为INFO，则只能输出INFO、WARN、ERROR的日志信息。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="日志" scheme="https://nty99.gitee.io/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Ribbon</title>
    <link href="https://nty99.gitee.io/2022/09/11/ribbon/"/>
    <id>https://nty99.gitee.io/2022/09/11/ribbon/</id>
    <published>2022-09-11T14:58:20.000Z</published>
    <updated>2022-09-11T16:15:44.846Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一、Ribbon"><a href="#一、Ribbon" class="headerlink" title="一、Ribbon"></a>一、Ribbon</h4><h5 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h5><p>​    1、发送请求被RibbonLoadBalancerClient拦截</p><p>​    2、获取请求中的服务名称</p><p>​    3、交给DynamicServerListLoadBalancer去注册中心拉去服务地址</p><p>​    4、返回服务列表给DynamicServerListLoadBalancer，匹配IRule定义的策略选择服务</p><p>​    5、用服务地址替换原来的地址发送请求</p><h5 id="2、负载均衡策略"><a href="#2、负载均衡策略" class="headerlink" title="2、负载均衡策略"></a>2、负载均衡策略</h5><p>​    1、Bean方式，全局</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">randomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    2、配置方式，局部、灵活</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">服务名称</span><span class="token punctuation">:</span><span class="token key atrule">ribbon</span><span class="token punctuation">:</span><span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.netflix.loadbalancer.RandomRule</code></pre><h5 id="3、Ribbon加载方式"><a href="#3、Ribbon加载方式" class="headerlink" title="3、Ribbon加载方式"></a>3、Ribbon加载方式</h5><p>​        默认采用懒加载所以第一次调用时间会长，可以配置采用饥饿加载，服务启动就把服务地址缓存在DynamicServerListLoadBalancer</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>  <span class="token key atrule">eager-load</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启饥饿加载</span>    <span class="token key atrule">clients</span><span class="token punctuation">:</span> <span class="token comment"># 指定饥饿加载的服务名称</span>      <span class="token punctuation">-</span> userservice</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="负载均衡器" scheme="https://nty99.gitee.io/categories/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Nginx</title>
    <link href="https://nty99.gitee.io/2022/09/11/nginx/"/>
    <id>https://nty99.gitee.io/2022/09/11/nginx/</id>
    <published>2022-09-11T14:57:58.000Z</published>
    <updated>2022-09-11T15:15:03.986Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一、Nginx"><a href="#一、Nginx" class="headerlink" title="一、Nginx"></a>一、Nginx</h4><p>1、在nginx中配置proxy_pass时，如果在proxy_pass后面的url加/，相当于是绝对根路径，则nginx不会把location中匹配的路径部分代理走。如果没有/，则会把匹配的路径部分给代理走。比如访问：127.0.0.1/a/index.html</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> /a</span> <span class="token punctuation">{</span>  proxy_pass  http://127.0.0.1/<span class="token punctuation">}</span>相当于http://127.0.0.1/index.html<span class="token directive"><span class="token keyword">location</span> /a</span> <span class="token punctuation">{</span>      proxy_pass  http://127.0.0.1<span class="token punctuation">}</span>相当于http://127.0.0.1/a/index.html<span class="token directive"><span class="token keyword">location</span> /a</span> <span class="token punctuation">{</span>      proxy_pass  http://127.0.0.1/linux/<span class="token punctuation">}</span>相当于http://127.0.0.1/linux/index.html<span class="token directive"><span class="token keyword">location</span> /a</span> <span class="token punctuation">{</span>      proxy_pass  http://127.0.0.1/linux<span class="token punctuation">}</span>相当于http://127.0.0.1/linuxindex.html</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="反向代理" scheme="https://nty99.gitee.io/categories/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
    <category term="负载均衡" scheme="https://nty99.gitee.io/categories/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>Nacos</title>
    <link href="https://nty99.gitee.io/2022/09/11/nacos/"/>
    <id>https://nty99.gitee.io/2022/09/11/nacos/</id>
    <published>2022-09-11T14:57:52.000Z</published>
    <updated>2022-09-11T15:34:30.649Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一、Nacos"><a href="#一、Nacos" class="headerlink" title="一、Nacos"></a>一、Nacos</h4><p>1、负载均衡策略：配置同集群访问后，优先随机访问同集群，当本集群的实例宕机了再访问其他集群的实例，此时会有警告产生，跨集群访问。</p><p>2、服务默认为临时实例，配置服务为非临时实例时，Nacos主动询问实例是否健康，若服务宕机后会立即pull给消费者，且Nacos不会剔除服务。</p><p>3、配置namespace环境隔离，则不同环境的服务不能通信</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="注册中心" scheme="https://nty99.gitee.io/categories/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    
    
  </entry>
  
  <entry>
    <title>Mybatis</title>
    <link href="https://nty99.gitee.io/2022/09/11/mybatis/"/>
    <id>https://nty99.gitee.io/2022/09/11/mybatis/</id>
    <published>2022-09-11T14:57:46.000Z</published>
    <updated>2022-09-15T02:30:13.217Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一、Mybatis"><a href="#一、Mybatis" class="headerlink" title="一、Mybatis"></a>一、Mybatis</h4><h5 id="1、-和-区别"><a href="#1、-和-区别" class="headerlink" title="1、#和$区别"></a>1、#和$区别</h5><p>​    1、使用#{param}，是经过预编译的，会将传递过来的参数换转换成”param”。</p><p>​    2、使用${param}，是未经过预编译的，仅仅是取变量的值，是非安全的，存在SQL注入问题。</p><h5 id="2、一、二级缓存"><a href="#2、一、二级缓存" class="headerlink" title="2、一、二级缓存"></a>2、一、二级缓存</h5><p>​    1、spring结合mybatis后，在未开启事物的情况之下，每次查询，spring都会关闭旧的sqlSession而创建新的sqlSession,因此此时的一级缓存是没有启作用的。在开启事物的情况之下，spring使用threadLocal获取当前资源绑定同一个sqlSession，因此此时一级缓存是有效的。</p><p>​    2、查出的数据都会被默认先放在一级缓存中。只有会话提交或者关闭以后，一级缓存中的数据才会转移到二级缓存中。</p><p>​    3、一级缓存：sqlSession级别的缓存。（相当于一个方法内的缓存）每一次会话都对应自己的一级缓存，作用范围比较小，一旦会话关闭就查询不到了；一级缓存默认是一直开启的，是SqlSession级别的一个Map；与数据库同一次会话期间查询到的数据会放在本地缓存中。</p><p>​    4、基于namespace名称空间级别的缓存：一个namespace对应一个二级缓存，一个会话，查询一条数据，这个数据就会被放在当前会话的一级缓存中。</p><p>​    5、如果会话关闭；一级缓存中的数据会被保存到二级缓存中；新的会话查询信息，就可以参照二级缓存中的内容。</p><h5 id="3、二级缓存开启"><a href="#3、二级缓存开启" class="headerlink" title="3、二级缓存开启"></a>3、二级缓存开启</h5><p>​    1、开启全局二级缓存配置</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span></code></pre><p>​    2、去mapper.xml中配置使用二级缓存</p><pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;cache&gt;&lt;/cache&gt;</code></pre><p>​    3、我们的POJO需要实现序列化接口</p><h5 id="4、缓存选择顺序"><a href="#4、缓存选择顺序" class="headerlink" title="4、缓存选择顺序"></a>4、缓存选择顺序</h5><p>​    1、先判断二级缓存是否开启，如果没开启，再判断一级缓存是否开启，如果没开启，直接查数据库。</p><p>​    2、如果一级缓存关闭，即使二级缓存开启也没有数据，因为二级缓存的数据从一级缓存获取。</p><p>​    3、一般不会关闭一级缓存，二级缓存默认不开启。</p><p>​    4、如果二级缓存关闭，直接判断一级缓存是否有数据，如果没有就查数据库。</p><p>​    5、如果二级缓存开启，先判断二级缓存有没有数据，如果有就直接返回；如果没有，就查询一级缓存，如果有就返回，没有就查询数据库。</p><h5 id="5、一级缓存失效原因"><a href="#5、一级缓存失效原因" class="headerlink" title="5、一级缓存失效原因"></a>5、一级缓存失效原因</h5><p>​    1、不同的会话对象</p><p>​    2、会话对象相同，查询不在缓存中的内容</p><p>​    3、两次查询期间进行了增删改的操作</p><p>​    4、会话完成后手动清空缓存    </p><h5 id="1、问题"><a href="#1、问题" class="headerlink" title="1、问题"></a>1、问题</h5><p>​    1、mapper层使用Integer、String等做参数时候，出现There is no getter for property named ‘xxx’ in ‘class java.lang.String’</p><p>​        （1）在mapper层使用@Param映射</p><p>​        （2）使用_parameter、value做参数</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>SELECT...       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--字符串比较加toString()-</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>param == <span class="token punctuation">'</span>0<span class="token punctuation">'</span>.toString()<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">&gt;</span></span>           -------<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_parameter == <span class="token punctuation">'</span>0<span class="token punctuation">'</span>.toString()<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据库框架" scheme="https://nty99.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac常用命令</title>
    <link href="https://nty99.gitee.io/2022/08/23/mac/"/>
    <id>https://nty99.gitee.io/2022/08/23/mac/</id>
    <published>2022-08-23T07:05:13.000Z</published>
    <updated>2022-09-21T15:23:11.724Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、Mac</p><pre class="language-bash" data-language="bash"><code class="language-bash">一、主机名：就是HostName。查看：scutil --get HostName修改：sudo scutil --set HostName 新的主机名二、计算机名：就是ComputerName。它在隔空投送中显示，查看：scutil --get ComputerName修改：方法一：在“设置”——“共享”下，修改“电脑名称”。方法二：sudo scutil --set ComputerName 新的计算机名三、本地主机名（即：本地局域网主机名）它在局域网中显示，可在finder下的网络查看。修改：在“设置”——“共享”下，再点下图中的“编辑”按钮，进去就可以修改了。四、修改xcode作者名修改：设置——用户与群组——点击左下角小锁，解锁——在当前用户上右键，点“高级选项”，修改“全名”，就可以了五、修改终端前缀macOS 的终端前缀默认是 <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">"%n@%m %1~ %# "</span>。%n: 表示用户名称，这里是账户名称，可以在（设置——用户与群组——点击左下角小锁，解锁——在当前用户上右键，点“高级选项”，查看账户名称，这里是改不了的）%m: 主机名%1~: 所在的当前目录%<span class="token comment">#: 最后的分隔符号</span>修改：<span class="token number">1</span>. 终端输入 <span class="token function">open</span> /etc<span class="token number">2</span>. 在打开的文件夹找到bashrc 或者zshrc（取决于你用的哪种终端命令），复制一份到桌面，打开桌面上的这份修改<span class="token environment constant">PS1</span>，比如修改成<span class="token environment constant">PS1</span><span class="token operator">=</span><span class="token string">"%n %1~ %# "</span>，修改前最好把原命令注释一份，然后command+s保存<span class="token number">3</span>.删除 /etc/bashrc 或者/etc/zshrc，桌面上的那份复制或移动过来。<span class="token number">4</span>.终端执行source /etc/bashrc 或者source /etc/zshrc，让文件生效。 六、.bash_profile和.zshrc区别.bash_profile只对当前窗口生效.zshrc在每次电脑自启时都会生效<span class="token punctuation">(</span>永久有效<span class="token punctuation">)</span>,可以在.zshrc后添加source .bash_profile这样bash_profile这样的内容也会始终有效</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="https://nty99.gitee.io/2022/08/23/linux/"/>
    <id>https://nty99.gitee.io/2022/08/23/linux/</id>
    <published>2022-08-23T06:53:03.000Z</published>
    <updated>2022-09-22T15:26:03.471Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一、特殊符号"><a href="#一、特殊符号" class="headerlink" title="一、特殊符号"></a>一、特殊符号</h4><h5 id="1、-amp-和-amp-amp"><a href="#1、-amp-和-amp-amp" class="headerlink" title="1、&amp; 和 &amp;&amp;"></a>1、&amp; 和 &amp;&amp;</h5><p>​        （1）&amp; 表示在后台执行任务，关闭终端后，进程消失。</p><p>​        （2）&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令。</p><h5 id="2、-和"><a href="#2、-和" class="headerlink" title="2、| 和 ||"></a>2、| 和 ||</h5><p>​        （1）| 表示管道，上一条命令的输出，作为下一条命令参数(输入)。</p><p>​        （2）|| 表示上一条命令执行失败后，才执行下一条命令。</p><h5 id="3、-gt-和-gt-gt"><a href="#3、-gt-和-gt-gt" class="headerlink" title="3、> 和 >>"></a>3、&gt; 和 &gt;&gt;</h5><p>​        （1）&gt; 表示stdout标准输出信息重定向输出，覆盖写。</p><p>​        （2）&gt;&gt; 表示内容追加写。</p><h5 id="4、-amp-gt-、2-gt-amp-1-和-2-gt-1"><a href="#4、-amp-gt-、2-gt-amp-1-和-2-gt-1" class="headerlink" title="4、&amp;> 、2>&amp;1 和  2>1"></a>4、&amp;&gt; 、2&gt;&amp;1 和  2&gt;1</h5><p>​        （1）&amp;&gt; 表示stdout标准输出和stderr错误输出信息，重定向输出，覆盖写。</p><p>​        （2）2&gt;&amp;1 表示把标准错误的输出重定向到标准输出1，&amp;指示不要把1当做普通文件，而是fd=1即标准输出处理。</p><p>​        （3）2&gt;1 表示把标准错误的输出重定向到1，但这个1不是标准输出，而是一个名为1的文件。</p><p>​    5、重定向设备代码</p><p>​        （1）空设备文件/dev/null，表示把所有写入的东西通通扔掉。</p><p>​        （2）标准输入(stdin) 代码为0，实际映射关系：/dev/stdin -&gt; /proc/self/fd/0。</p><p>​        （3）标准输出(stdout)代码为1，实际映射关系：/dev/stdout -&gt; /proc/self/fd/1。</p><p>​        （4）标准错误输出(stderr)代码为2，实际映射关系：/dev/stderr -&gt;/pro/self/fd/2。</p><h4 id="二、压缩解压"><a href="#二、压缩解压" class="headerlink" title="二、压缩解压"></a>二、压缩解压</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将所有jpg的文件压缩成all.tar.gz</span><span class="token function">tar</span> -czf all.tar.gz *.jpg<span class="token comment">#解压all.tar.gz文件</span><span class="token function">tar</span> -xzf all.tar.gz</code></pre><h4 id="三、进程"><a href="#三、进程" class="headerlink" title="三、进程"></a>三、进程</h4><h5 id="1、查找进程"><a href="#1、查找进程" class="headerlink" title="1、查找进程"></a>1、查找进程</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#显示所有的进程</span><span class="token function">ps</span> -A<span class="token comment">#显示指定用户的进程（这里选定root用户）</span><span class="token function">ps</span> -u root<span class="token comment">#查找相关进程，最常用</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> php<span class="token comment">#将目前属于您自己这次登入的 PID 与相关信息列示出來</span><span class="token function">ps</span> -l</code></pre><h5 id="2、杀死进程"><a href="#2、杀死进程" class="headerlink" title="2、杀死进程"></a>2、杀死进程</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#正常停止该进程 = kill -15 pid = kill -s TERM</span><span class="token function">kill</span> pid<span class="token comment">#强制杀死该进程 = kill -s SIGKILL pid</span><span class="token function">kill</span> -9 pid<span class="token comment">#重启该进程 = kill -s SIGHUP pid</span><span class="token function">kill</span> -1 pid</code></pre><h5 id="3、改变进程状态"><a href="#3、改变进程状态" class="headerlink" title="3、改变进程状态"></a>3、改变进程状态</h5><h6 id="1、基本命令"><a href="#1、基本命令" class="headerlink" title="1、基本命令"></a>1、基本命令</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看作业</span><span class="token function">jobs</span> -l<span class="token comment">#将后台中的命令调至前台继续运行，jobnum指通过jobs命令显示的任务编号</span><span class="token function">fg</span> % jobnum<span class="token comment">#中断该进程</span>Ctrl + c<span class="token comment">#将一个正在前台执行的命令放到后台，并且处于暂停状态</span>Ctrl + z<span class="token comment">#将一个在后台暂停的命令，变成在后台继续执行</span><span class="token function">bg</span> % jobnum<span class="token comment">#通过作业编号杀死进程</span><span class="token function">kill</span> % jobnum</code></pre><h6 id="2、详解"><a href="#2、详解" class="headerlink" title="2、详解"></a>2、详解</h6><p>​        （1）shell：命令解释器，其实就是一个脚本语言解释器，有很多种(bash,ash,tcsh等)，最常用的是bash。</p><p>​        （2）job：是相对shell 来说的，在shell中执行一条命令，实际上就是提交了一个job，只不过有的job需要运行很长时间，有的job很快就结束。所以作业是shell里面的一个概念，jobs命令只能查看当前shell自己的job，不同的shell 之间相互隔离。我们在shell里执行一条命令的时候就开启了一个作业，一个作业对应着系统中的一个进程组，如果作业中的某个进程又创建了子进程，则子进程不属于作业。</p><h5 id="4、定时执行"><a href="#4、定时执行" class="headerlink" title="4、定时执行"></a>4、定时执行</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#参数详解</span>-n 指定间隔的时间，默认单位秒，不指定间隔时间则默认2秒执行一次-d 会高亮显示变化的区域-t 会关闭watch命令在顶部的时间间隔<span class="token comment">#每10s在后台执行一次test.sh脚本</span><span class="token function">watch</span> -n <span class="token number">10</span> <span class="token function">bash</span> test.sh <span class="token operator">&amp;</span><span class="token comment">#每隔一秒高亮显示http链接数的变化情况,后面接的命令若带有管道符，需要加''将命令区域归整</span><span class="token function">watch</span> -n <span class="token number">1</span> -d <span class="token string">'pstree|grep http'</span></code></pre><h5 id="5、后台挂载"><a href="#5、后台挂载" class="headerlink" title="5、后台挂载"></a>5、后台挂载</h5><h6 id="1、基本命令-1"><a href="#1、基本命令-1" class="headerlink" title="1、基本命令"></a>1、基本命令</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让程序始终在后台执行，即使关闭当前的终端也执行</span><span class="token function">nohup</span> ./test.sh <span class="token operator">&gt;</span> r.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>运行jar包，并且置于后台执行，执行的日志重定向到当前默认的log.txt文件中java -jar test.jar <span class="token operator">&gt;</span> log.txt <span class="token operator">&amp;</span> </code></pre><h6 id="2、详解-1"><a href="#2、详解-1" class="headerlink" title="2、详解"></a>2、详解</h6><p>​            nohup命令，在默认情况下(非重定向时)，会输出一个名叫 nohup.out 的文件到当前目录下，如果当前目录的 nohup.out 文件不可写，输出重定向到 $HOME/nohup.out 文件中。nohup不挂断地运行命令，正常退出终端不会影响程序的运行，&amp; 让命令在后台执行，关闭终端后，进程消失。</p><h6 id="3、原理"><a href="#3、原理" class="headerlink" title="3、原理"></a>3、原理</h6><p>​        （1）nohup ./start.sh时候，关闭shell，此时进程还存在(对SIGHUP信号免疫)，但是， 要注意， 如果你直接在shell中用Ctrl C, 那么start.sh进程也是会消失的(因为对SIGINT信号不免疫)。</p><p>​        （2）&amp;的意思是在后台运行，什么意思呢?意思是说，当你在执行 ./start.sh &amp; 的时候，即使你用Ctrl C，那么start.sh照样运行(因为对SIGINT信号免疫)。但是要注意，如果你直接关掉shell后， 那么，start.sh进程同样消失。 可见，&amp;的后台并不硬（因为对SIGHUP信号不免疫)。</p><h4 id="三、网络"><a href="#三、网络" class="headerlink" title="三、网络"></a>三、网络</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#显示详细的网络状况</span><span class="token function">netstat</span> -a<span class="token comment">#显示TCP端口号的使用情况，mac中使用netstat -p tcp</span><span class="token function">netstat</span> -apt<span class="token comment">#显示网卡列表 </span><span class="token function">netstat</span> -i<span class="token comment">#显示网络统计信息</span><span class="token function">netstat</span> -s<span class="token comment">#查找端口占用情况</span><span class="token function">netstat</span> -apt <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">8080</span></code></pre><h4 id="四、查看日志"><a href="#四、查看日志" class="headerlink" title="四、查看日志"></a>四、查看日志</h4><h5 id="1、cat"><a href="#1、cat" class="headerlink" title="1、cat"></a>1、cat</h5><p>​        由第一行开始显示文件所有内容。</p><p>​    1、参数说明</p><pre class="language-bash" data-language="bash"><code class="language-bash">-A <span class="token builtin class-name">:</span> 相当于-vET 的整合参数，可列出一些特殊字符，而不是空白而已-b <span class="token builtin class-name">:</span> 列出行号，仅针对非空白行做行号显示，空白行不标行号-E <span class="token builtin class-name">:</span> 将结尾的断行字符$显示出来-n <span class="token builtin class-name">:</span> 打印行号，连同空白行也会有行号，与-b的参数不同</code></pre><p>​    2、适用场景</p><p>​        （1）cat是Concatenate的缩写，主要功能是将一个文件的内容连续显示在屏幕上面。</p><p>​        （2）一般文件内容行数较少时，如40行之内，适合用cat。</p><p>​        （3）如果是一般的DOS文件时，就需要特别留意一些奇怪的符号，例如断行与[Tab]等，要显示出来，就得加入-a之类的参数了。</p><h5 id="2、tac"><a href="#2、tac" class="headerlink" title="2、tac"></a>2、tac</h5><p>​        从最后一行开始显示，可以看出tac是cat的倒写形式。</p><p>​    1、参数说明</p><pre class="language-bash" data-language="bash"><code class="language-bash">-b, --before           <span class="token builtin class-name">:</span> 在之前而不是之后连接分隔符。-r, --regex            <span class="token builtin class-name">:</span> 将分隔符作为基础正则表达式（BRE）处理。-s, --separator<span class="token operator">=</span>STRING <span class="token builtin class-name">:</span> 使用STRING作为分隔符代替默认的换行符。--help                 <span class="token builtin class-name">:</span> 显示帮助信息并退出。--version              <span class="token builtin class-name">:</span> 显示版本信息并退出。</code></pre><p>​    2、适用场景</p><p>​            tac 的功能跟cat相反，cat是由第一行到最后一行连续显示在屏幕上，而tac则是由最后一行到第一行反向在屏幕上显示出来。</p><h5 id="3、head"><a href="#3、head" class="headerlink" title="3、head"></a>3、head</h5><p>​        显示文件开头的内容，以行为单位，默认文件开头的前10行。</p><p>​    1、参数说明</p><pre class="language-bash" data-language="bash"><code class="language-bash">-n <span class="token builtin class-name">:</span> 显示的行数，如 -10 显示10行-q <span class="token builtin class-name">:</span> 隐藏文件名-v <span class="token builtin class-name">:</span> 显示文件名-c <span class="token builtin class-name">:</span> 显示字节数，如 -c1024 显示1024个字节<span class="token comment">#例如</span></code></pre><h5 id="4、tail"><a href="#4、tail" class="headerlink" title="4、tail"></a>4、tail</h5><p>​            查看文件的内容，也是以行为单位，默认10行，从尾往前看。监听Java动态日志时，一般跟<code>-f</code>参数配合使用。</p><p>​    1、参数说明</p><pre class="language-bash" data-language="bash"><code class="language-bash">-f <span class="token builtin class-name">:</span> 循环读取-q <span class="token builtin class-name">:</span> 不显示处理信息-v <span class="token builtin class-name">:</span> 显示详细的处理信息-c <span class="token builtin class-name">:</span> 显示的字节数-n <span class="token builtin class-name">:</span> 显示文件的尾部 n 行内容</code></pre><p>​    2、适用场景</p><p>​            tail -f用来动态监听Java日志，开发联调经常使用到，它一般跟grep 一起搭档使用。</p><h5 id="5、more"><a href="#5、more" class="headerlink" title="5、more"></a>5、more</h5><p>​            一页一页地显示文件内容，每页显示条数根据当前窗口决定。</p><p>​    1、参数说明</p><pre class="language-bash" data-language="bash"><code class="language-bash">-num      <span class="token builtin class-name">:</span> 一次显示的行数，如 -10 表示每页显示10行+num      <span class="token builtin class-name">:</span> 从第 num 行开始显示-p       <span class="token builtin class-name">:</span> 不以卷动的方式显示每一页，而是先清除萤幕后再显示内容-c        <span class="token builtin class-name">:</span> 跟 -p 相似，不同的是先显示内容再清除其他旧资料-s        <span class="token builtin class-name">:</span> 当遇到有连续两行以上的空白行，就代换为一行的空白行+/pattern <span class="token builtin class-name">:</span> 在每个文档显示前搜寻该字串（pattern），然后从该字串之后开始显示-u        <span class="token builtin class-name">:</span> 不显示下引号 （根据环境变数 <span class="token environment constant">TERM</span> 指定的 terminal 而有所不同）fileNames <span class="token builtin class-name">:</span> 欲显示内容的文档，可为复数个数</code></pre><p>​    2、阅读后常用操作</p><p>​            按q离开，按Enter往下滚动一行，按空格键往下翻页，按b往回翻页，以及/字符串搜索功能。更多操作如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">空格键  <span class="token builtin class-name">:</span> 代表往下翻一页。Enter  <span class="token builtin class-name">:</span> 代表往下滚动一行。/字符串 <span class="token builtin class-name">:</span> 代表在这个显示的内容当中，向下查询字符串这个关键字，重复查询同一个字符串，可以直接按下n。:f     <span class="token builtin class-name">:</span> 立刻显示出文件名以及目前显示的行数。q      <span class="token builtin class-name">:</span> 代表立刻离开more，不再显示该文件内容。b      <span class="token builtin class-name">:</span> 代表往回翻页，不过这操作只对文件有用，对管道无用。</code></pre><p>​    3、适用场景</p><p>​            more使用日志比较大的文件查看，可以一页一页查看，不会让前面的数据看不到。</p><h5 id="6、less"><a href="#6、less" class="headerlink" title="6、less"></a>6、less</h5><p>​            less 与 more 类似，但less的用法比起more又更加有弹性，每页显示条数根据当前窗口决定。    </p><p>​    1、参数说明</p><pre class="language-bash" data-language="bash"><code class="language-bash">-b <span class="token builtin class-name">:</span> 设置缓冲区的大小，如-b1024-e <span class="token builtin class-name">:</span> 当文件显示结束后，自动离开-f <span class="token builtin class-name">:</span> 强迫打开特殊文件，例如外围设备代号、目录和二进制文件-F <span class="token builtin class-name">:</span> 和tail -f效果类似-g <span class="token builtin class-name">:</span> 只标志最后搜索的关键词-i <span class="token builtin class-name">:</span> 忽略搜索时的大小写-m <span class="token builtin class-name">:</span> 显示类似more命令的百分比-N <span class="token builtin class-name">:</span> 显示行号</code></pre><p>​    2、阅读后常用操作</p><pre class="language-bash" data-language="bash"><code class="language-bash">空格键      <span class="token builtin class-name">:</span> 往下翻动一页<span class="token punctuation">[</span>pagedown<span class="token punctuation">]</span> <span class="token builtin class-name">:</span> 向下翻动一页<span class="token punctuation">[</span>pageup<span class="token punctuation">]</span>   <span class="token builtin class-name">:</span> 向上翻动一页Enter      <span class="token builtin class-name">:</span> 代表往下滚动一行/字符串     <span class="token builtin class-name">:</span> 向下搜索<span class="token string">"字符串"</span>的功能?字符串     <span class="token builtin class-name">:</span> 向上搜索<span class="token string">"字符串"</span>的功能g          <span class="token builtin class-name">:</span> 移动到第一行G          <span class="token builtin class-name">:</span> 移动到最后一行m          <span class="token builtin class-name">:</span> 标记，输入一个字符’          <span class="token builtin class-name">:</span> 回到标记处，例如输入mk标记，输入'k回到标记处n          <span class="token builtin class-name">:</span> 重复前一个搜索（与 / 或 ? 有关）N          <span class="token builtin class-name">:</span> 反向重复前一个搜索（与 / 或 ? 有关）q          <span class="token builtin class-name">:</span> 离开less这个程序</code></pre><p>​    3、适用场景</p><p>​            less适合日志比较大的文件查看，可以一页一页查看，并且比more更灵活，也可以动态查看日志，一般用它查看Java日志。</p><p>​    4、常用命令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#ps查看进程信息并通过less分页显示</span><span class="token function">ps</span> -ef <span class="token operator">|</span><span class="token function">less</span><span class="token comment">#查看两个文件，输入:n，切换到b.text，再输入:p返回到a.text</span><span class="token function">less</span> a.text b.text</code></pre><h4 id="五、性能查看"><a href="#五、性能查看" class="headerlink" title="五、性能查看"></a>五、性能查看</h4><p>​        性能测试时，通常用top命令观察cpu、内存使用情况。free指令会显示内存的使用情况，包括实体内存，虚拟的交换文件内存，共享内存区段，以及系统核心使用的缓冲区等。</p><h5 id="1、top基本信息"><a href="#1、top基本信息" class="headerlink" title="1、top基本信息"></a>1、top基本信息</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#输入top命令后，有如下信息</span><span class="token punctuation">[</span>root@iZbp1990f69tlsyjyxqqs8Z /<span class="token punctuation">]</span><span class="token comment"># top</span><span class="token function">top</span> - <span class="token number">22</span>:26:36 up <span class="token number">392</span> days,  <span class="token number">7</span>:01,  <span class="token number">1</span> user,  load average: <span class="token number">0.12</span>, <span class="token number">0.10</span>, <span class="token number">0.08</span>Tasks:  <span class="token number">92</span> total,   <span class="token number">1</span> running,  <span class="token number">91</span> sleeping,   <span class="token number">0</span> stopped,   <span class="token number">0</span> zombie%Cpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:  <span class="token number">1.3</span> us,  <span class="token number">1.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">97.6</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> stKiB Mem <span class="token builtin class-name">:</span>  <span class="token number">1776404</span> total,    <span class="token number">81040</span> free,  <span class="token number">1342048</span> used,   <span class="token number">353316</span> buff/cacheKiB Swap:        <span class="token number">0</span> total,        <span class="token number">0</span> free,        <span class="token number">0</span> used.   <span class="token number">255236</span> avail Mem   PID <span class="token environment constant">USER</span>      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND    <span class="token number">30211</span> root      <span class="token number">10</span> -10  <span class="token number">148920</span>  <span class="token number">21816</span>   <span class="token number">6776</span> S   <span class="token number">4.3</span>  <span class="token number">1.2</span>   <span class="token number">1258</span>:22 AliYunDun  <span class="token number">20206</span> admin     <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">1116532</span> <span class="token number">243096</span>   <span class="token number">8868</span> S   <span class="token number">0.7</span> <span class="token number">13.7</span>  <span class="token number">11</span>:43.36 <span class="token function">node</span>        <span class="token number">1256</span> root      <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">1318628</span>  <span class="token number">42752</span>   <span class="token number">1660</span> S   <span class="token number">0.3</span>  <span class="token number">2.4</span> <span class="token number">100</span>:13.44 dockerd    <span class="token number">19725</span> root      <span class="token number">10</span> -10  <span class="token number">436912</span>    <span class="token number">920</span>    <span class="token number">320</span> S   <span class="token number">0.3</span>  <span class="token number">0.1</span>  <span class="token number">55</span>:57.24 AliSecGuard<span class="token number">19922</span> admin     <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">3265824</span> <span class="token number">881100</span>  <span class="token number">13440</span> S   <span class="token number">0.3</span> <span class="token number">49.6</span>  <span class="token number">31</span>:29.62 java       </code></pre><p>​        （1）第一行：当前时间22:26:36，系统运行天数392，当前1个用户登录，系统平均负载压力情况为0.12(1min的平均负载压力)、0.10(5min的平均负载压力)、0.0.8(15min的平均负载压力)。注：load average：每隔5s检查一次活跃的进程数，然后按特定算法计算出来的。一般当这个数值除以CPU的核数得到的值大于3~5时，就标明系统的负载压力已经很高了。</p><p>​        （2）第二行：显示的是任务信息，总共92个进程，1个进程正在执行，91个进程正在休眠，0个进程停止，0个进程假死。</p><p>​        （3）第三行：显示的是CPU运行信息，1.3us表示用户模式下CPU占比为1.3%，1.0sy标识系统模式下CPU占比1.0%，0.0ni表示改变过优先级的进程的CPU占比为0.0%，97.6id表示空闲状态的CPU占比为97.6%，0.0wa表示因为I/O等待造成的CPU占用比为0.0%，0.0st表示CPU等待虚拟机调度的时间占比，这个指标一般在虚拟机中才有，在物理机中该值一般为0。</p><p>​        （4）第四行：显示的是内存信息，1776404 total显示的是物理内存总量，1342048 used显示已使用的物理内存，81040 free表示空闲物理内存，353316 buffers 表示用于缓存内存大小，以上单位都是kb。</p><p>​        （5）第五行：显示虚拟内存使用信息，0 total 表示虚拟内存空间总大小，0 used 表示虚拟内存使用大小，0 free 表示空闲虚拟内存，255236 avail Mem 表示还可以被使用的物理内存大小，cached Mem表示缓存虚拟内存，以上单位都是kb。</p><p>​        （6）第六行：</p><table><thead><tr><th align="center"><strong>PID</strong></th><th align="center"><strong>USER</strong></th><th align="center"><strong>PR</strong></th><th align="center"><strong>NI</strong></th><th align="center"><strong>VIRT</strong></th><th align="center"><strong>RES</strong></th></tr></thead><tbody><tr><td align="center"><strong>进程号</strong></td><td align="center"><strong>进程的持有用户</strong></td><td align="center"><strong>进程运行的优先级，值越小优先级越高，会越早获取CPU的执行权</strong></td><td align="center"><strong>进程的nice值，表示进程可被执行的优先级的修正数值</strong></td><td align="center"><strong>进程使用虚拟内存，单位kb</strong></td><td align="center"><strong>常驻内存，单位kb</strong></td></tr><tr><td align="center"><strong>SHR</strong></td><td align="center"><strong>S</strong></td><td align="center"><strong>%CPU</strong></td><td align="center"><strong>%MEM</strong></td><td align="center"><strong>TIME+</strong></td><td align="center"><strong>COMMAND</strong></td></tr><tr><td align="center"><strong>进程使用的共享内存，单位kb</strong></td><td align="center"><strong>进程运行状态。</strong></td><td align="center"><strong>进行运行时CPU的占用比</strong></td><td align="center"><strong>进程使用的内存占用比</strong></td><td align="center"><strong>进程占用的CPU总时长</strong></td><td align="center"><strong>进程名</strong></td></tr></tbody></table><h5 id="2、top常用命令"><a href="#2、top常用命令" class="headerlink" title="2、top常用命令"></a>2、top常用命令</h5><p>​        （1）查看指定进程的信息</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZbp1990f69tlsyjyxqqs8Z /<span class="token punctuation">]</span><span class="token comment"># top -p 19922</span><span class="token function">top</span> - <span class="token number">22</span>:57:53 up <span class="token number">392</span> days,  <span class="token number">7</span>:32,  <span class="token number">1</span> user,  load average: <span class="token number">0.10</span>, <span class="token number">0.09</span>, <span class="token number">0.12</span>Tasks:   <span class="token number">1</span> total,   <span class="token number">0</span> running,   <span class="token number">1</span> sleeping,   <span class="token number">0</span> stopped,   <span class="token number">0</span> zombie%Cpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:  <span class="token number">1.0</span> us,  <span class="token number">1.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">98.0</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> stKiB Mem <span class="token builtin class-name">:</span>  <span class="token number">1776404</span> total,    <span class="token number">80424</span> free,  <span class="token number">1344592</span> used,   <span class="token number">351388</span> buff/cacheKiB Swap:        <span class="token number">0</span> total,        <span class="token number">0</span> free,        <span class="token number">0</span> used.   <span class="token number">253116</span> avail Mem   PID <span class="token environment constant">USER</span>      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                            <span class="token number">19922</span> admin     <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">3265896</span> <span class="token number">881004</span>  <span class="token number">13280</span> S   <span class="token number">0.0</span> <span class="token number">49.6</span>  <span class="token number">32</span>:04.95 java  </code></pre><p>​        （2）查看指定进程的所有线程的信息</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZbp1990f69tlsyjyxqqs8Z /<span class="token punctuation">]</span><span class="token comment"># top -H -p 19922</span><span class="token function">top</span> - <span class="token number">23</span>:03:23 up <span class="token number">392</span> days,  <span class="token number">7</span>:38,  <span class="token number">1</span> user,  load average: <span class="token number">0.09</span>, <span class="token number">0.13</span>, <span class="token number">0.13</span>Threads:  <span class="token number">72</span> total,   <span class="token number">0</span> running,  <span class="token number">72</span> sleeping,   <span class="token number">0</span> stopped,   <span class="token number">0</span> zombie%Cpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:  <span class="token number">2.0</span> us,  <span class="token number">1.0</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">97.0</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> stKiB Mem <span class="token builtin class-name">:</span>  <span class="token number">1776404</span> total,    <span class="token number">79864</span> free,  <span class="token number">1343716</span> used,   <span class="token number">352824</span> buff/cacheKiB Swap:        <span class="token number">0</span> total,        <span class="token number">0</span> free,        <span class="token number">0</span> used.   <span class="token number">253960</span> avail Mem   PID <span class="token environment constant">USER</span>      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                             <span class="token number">21146</span> admin     <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">3265912</span> <span class="token number">880832</span>  <span class="token number">13108</span> S  <span class="token number">0.7</span> <span class="token number">49.6</span>   <span class="token number">3</span>:01.67 elasticsearch<span class="token punctuation">[</span><span class="token number">0</span>                     <span class="token number">21161</span> admin     <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">3265912</span> <span class="token number">880832</span>  <span class="token number">13108</span> S  <span class="token number">0.3</span> <span class="token number">49.6</span>   <span class="token number">2</span>:13.15 elasticsearch<span class="token punctuation">[</span><span class="token number">0</span>                     <span class="token number">19922</span> admin     <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">3265912</span> <span class="token number">880832</span>  <span class="token number">13108</span> S  <span class="token number">0.0</span> <span class="token number">49.6</span>   <span class="token number">0</span>:00.01 java                                <span class="token number">20076</span> admin     <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">3265912</span> <span class="token number">880832</span>  <span class="token number">13108</span> S  <span class="token number">0.0</span> <span class="token number">49.6</span>   <span class="token number">0</span>:11.33 java                                                  </code></pre><h5 id="3、free基本信息"><a href="#3、free基本信息" class="headerlink" title="3、free基本信息"></a>3、free基本信息</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZbp1990f69tlsyjyxqqs8Z /<span class="token punctuation">]</span><span class="token comment"># free</span>              total        used        <span class="token function">free</span>      shared  buff/cache   availableMem:        <span class="token number">1776404</span>     <span class="token number">1343792</span>       <span class="token number">78148</span>         <span class="token number">608</span>      <span class="token number">354464</span>      <span class="token number">253664</span>Swap:             <span class="token number">0</span>           <span class="token number">0</span>           <span class="token number">0</span></code></pre><p>​        （1）第一行：Mem表示物理内存统计，total表示总物理内存的大小，used表示已使用多少，free表示可用内存多少，shared表示多个进程共享的内存总额，buffers/cached表示磁盘缓存的大小。</p><p>​        （2）第二行：Swap表示硬盘上的交换分区的使用情况。</p><h5 id="4、free常用命令"><a href="#4、free常用命令" class="headerlink" title="4、free常用命令"></a>4、free常用命令</h5><p>​        （1）基本查看</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#以Byte、KB、MB、G、合适来显示内存使用情况</span><span class="token function">free</span> -b <span class="token operator">|</span> -k <span class="token operator">|</span> -m <span class="token operator">|</span> -g <span class="token operator">|</span> -h<span class="token comment">#以总和的形式查询内存的使用信息</span><span class="token function">free</span> -m -t</code></pre><p>​        （2）周期性的查询内存使用信息</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#每10s 执行一次命令</span><span class="token function">free</span> -s <span class="token number">10</span></code></pre><p>​        （3）free 与 available区别</p><p>​                在 free 命令的输出中，有一个 free 列，同时还有一个 available 列。这二者到底有何区别？free 是真正尚未被使用的物理内存数量。至于 available 就比较有意思了，它是从应用程序的角度看到的可用内存数量。Linux 内核为了提升磁盘操作的性能，会消耗一部分内存去缓存磁盘数据，就是我们介绍的 buffer 和 cache。所以对于内核来说，buffer 和 cache 都属于已经被使用的内存。当应用程序需要内存时，如果没有足够的 free 内存可以用，内核就会从 buffer 和 cache 中回收内存来满足应用程序的请求。所以从应用程序的角度来说，available  = free + buffer + cache。请注意，这只是一个很理想的计算方式，实际中的数据往往有较大的误差。</p><h4 id="六、防火墙"><a href="#六、防火墙" class="headerlink" title="六、防火墙"></a>六、防火墙</h4><h5 id="1、防火墙配置"><a href="#1、防火墙配置" class="headerlink" title="1、防火墙配置"></a>1、防火墙配置</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#设置开机启用防火墙：</span>systemctl <span class="token builtin class-name">enable</span> firewalld.service<span class="token comment">#设置开机禁用防火墙</span>systemctl disable firewalld.service<span class="token comment">#启动防火墙</span>systemctl start firewalld<span class="token comment">#重启防火墙服务</span>systemctl restart firewalld<span class="token comment">#关闭防火墙</span>systemctl stop firewalld<span class="token comment">#检查防火墙状态</span>systemctl status firewalld</code></pre><h5 id="2、端口配置"><a href="#2、端口配置" class="headerlink" title="2、端口配置"></a>2、端口配置</h5><p>​            使用firewall配置策略有两种模式：运行时模式(runtime)、永久模式(permanent)。运行时模式又称为当前生效模式，而且随着系统的重启会失效，它是默认的模式。而如果需要配置永久生效，就需要添加–permanent 参数。主要注意的是永久模式配置的策略只有重启之后才能自动生效，如果想让配置的策略立即生效，需要手动执行firewall-cmd –reload 命令。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看防火墙状态</span>firewall-cmd --state<span class="token comment">#重新加载配置</span>firewall-cmd --reload<span class="token comment">#查看开放的端口</span>firewall-cmd --list-ports<span class="token comment">#开启防火墙端口</span>firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">9200</span>/tcp --permanent<span class="token comment">#开启防火墙多个端口</span>firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">80</span>-90/tcp --permanent<span class="token comment">#移除防火墙端口</span>firewall-cmd --zone<span class="token operator">=</span>public --remove-port<span class="token operator">=</span><span class="token number">80</span>/tcp --permanent</code></pre><p>​    3、防火墙配置文件</p><p>​            配置文件说明:firewalld 存放配置文件有两个目录，/usr/lib/firewalld/和/etc/firewalld/。前者存放了一些默认的文件，后者主要是存放用户自定义的数据，所以我们添加的service或者rule都在后者下面进行。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZbp1990f69tlsyjyxqqs8Z ~<span class="token punctuation">]</span><span class="token comment"># ls /usr/lib/firewalld/</span>helpers  icmptypes  ipsets  services  xmlschema  zones<span class="token punctuation">[</span>root@iZbp1990f69tlsyjyxqqs8Z ~<span class="token punctuation">]</span><span class="token comment"># ls /etc/firewalld/</span>firewalld.conf  helpers  icmptypes  ipsets  lockdown-whitelist.xml  services  zonesservices       <span class="token builtin class-name">:</span> 存储服务数据，就是一组定义好的规则。zones          <span class="token builtin class-name">:</span> 存储区域规则。firewalld.conf <span class="token builtin class-name">:</span> 默认配置文件，可以设置默认使用的区域，默认区域为public，对应zones目录下的public.xml。</code></pre><p>​    4、其它常用配置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看当前使用的区域</span>firewall-cmd --get-default-zone<span class="token comment">#查看当前使用的区域是否允许请求ssh和https协议的流量</span>firewall-cmd --zone<span class="token operator">=</span>public --query-service<span class="token operator">=</span>sshfirewall-cmd --zone<span class="token operator">=</span>public --query-service<span class="token operator">=</span>https<span class="token comment">#设置https协议流量为永久允许并立即生效</span>firewall-cmd --zone<span class="token operator">=</span>public --add-service<span class="token operator">=</span>https --permanentfirewall-cmd --reload<span class="token comment">#允许8080和8081端口流量，仅限当前生效</span>firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">8080</span>-8081/tcp</code></pre><h4 id="七、拓展知识点"><a href="#七、拓展知识点" class="headerlink" title="七、拓展知识点"></a>七、拓展知识点</h4><h5 id="1、进程状态"><a href="#1、进程状态" class="headerlink" title="1、进程状态"></a>1、进程状态</h5><p>​        常见的五种如下，所有的状态如下面表格。</p><p>​    （1）运行(正在运行或在运行队列中等待) ，状态码D。</p><p>​    （2）中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)，状态码S。</p><p>​    （3）不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生) ，状态码D。</p><p>​    （4）僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)，状态码Z 。</p><p>​    （5）停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行) ，状态码T。</p><table><thead><tr><th>状态</th><th align="center">D</th><th align="center">R</th><th align="center">S</th><th align="center">T</th><th align="center">Z</th></tr></thead><tbody><tr><td>含义</td><td align="center">无法中断的休眠状态 (通常 IO 的进程)</td><td align="center">正在执行中</td><td align="center">静止状态</td><td align="center">暂停执行</td><td align="center">不存在但暂时无法消除</td></tr><tr><td>状态</td><td align="center">W</td><td align="center">&lt;</td><td align="center">N</td><td align="center">L</td><td align="center"></td></tr><tr><td>含义</td><td align="center">没有足够的记忆体分页可分配</td><td align="center">高优先序的行程</td><td align="center">低优先序的行程</td><td align="center">有记忆体分页分配并锁在记忆体内</td><td align="center"></td></tr></tbody></table><h5 id="2、进程详情信息"><a href="#2、进程详情信息" class="headerlink" title="2、进程详情信息"></a>2、进程详情信息</h5><p>​        ps是Process Status的缩写，用来列出系统中当前运行的那些进程。ps命令列出的是当前进程的快照，就是执行ps命令这个时刻的进程，可以使用top命令获取动态的进程信息。</p><table><thead><tr><th align="center">USER</th><th align="center">PID</th><th align="center">%CPU</th><th align="center">%MEM</th><th align="center">VSZ</th><th align="center">RSS</th></tr></thead><tbody><tr><td align="center">进程拥有者</td><td align="center">pid</td><td align="center">占用的 CPU 使用率</td><td align="center">占用的记忆体使用率</td><td align="center">虚拟记忆体大小</td><td align="center">占用的记忆体大小</td></tr><tr><td align="center">TT</td><td align="center">STAT</td><td align="center">STARTED</td><td align="center">TIME</td><td align="center">COMMAND</td><td align="center"></td></tr><tr><td align="center">终端的次要装置号码</td><td align="center">该进程的状态</td><td align="center">行程开始时间</td><td align="center">执行的时间</td><td align="center">所执行的指令</td><td align="center"></td></tr></tbody></table><h5 id="3、进程和作业的联系"><a href="#3、进程和作业的联系" class="headerlink" title="3、进程和作业的联系"></a>3、进程和作业的联系</h5><p>​    （1）shell：命令解释器，其实就是一个脚本语言解释器，有很多种(bash,ash,tcsh等),最常用的是bash。</p><p>​    （2）job：是相对shell 来说的，在shell中执行一条命令，实际上就是提交了一个job，只不过有的job需要运行很长时间，有的job很快就结束。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Shell" scheme="https://nty99.gitee.io/categories/Shell/"/>
    
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="https://nty99.gitee.io/2022/08/23/mq/"/>
    <id>https://nty99.gitee.io/2022/08/23/mq/</id>
    <published>2022-08-23T06:52:44.000Z</published>
    <updated>2022-09-12T14:59:32.780Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一、RabbitMQ"><a href="#一、RabbitMQ" class="headerlink" title="一、RabbitMQ"></a>一、RabbitMQ</h4><h5 id="1、工作模式"><a href="#1、工作模式" class="headerlink" title="1、工作模式"></a>1、工作模式</h5><p>​    1、Hello World</p><p>​    2、Work queues</p><p>​    3、Publish/Subscribe</p><p>​    4、Routing</p><p>​    5、Topics</p><h5 id="2、基本原理"><a href="#2、基本原理" class="headerlink" title="2、基本原理"></a>2、基本原理</h5><p>​    1、1和2使用默认交换机 </p><p>​    2、Publish/Subscribe使用FANOUT(给所有绑定的队列发送消息，此时不用指定routingKey) </p><p>​    3、Routing使用DIRECT(给指定的routingKey发送消息)</p><p>​    4、Topics使用TOPIC(给匹配的路由发送消息)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="消息队列" scheme="https://nty99.gitee.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>部署</title>
    <link href="https://nty99.gitee.io/2022/08/23/deploy/"/>
    <id>https://nty99.gitee.io/2022/08/23/deploy/</id>
    <published>2022-08-23T06:52:35.000Z</published>
    <updated>2022-09-12T15:00:17.402Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、docker常用命令"><a href="#1、docker常用命令" class="headerlink" title="1、docker常用命令"></a>1、docker常用命令</h3><pre class="language-docker" data-language="docker"><code class="language-docker">docker pull 服务:tag  服务:版本（拉取服务，不加tag则默认最新版）docker  images 查看镜像docker save -o nginx.tar nginx:lastest  将nginx:latest镜像打包docker load -i nginx.tar  加载镜像docker rmi  删除镜像docker rm  删除容器 -f 删除运行的容器docker ps 查看运行容器状态 -a 则查看所有容器状态docker run --name  取名字  -p 80:80 -d  镜像  运行镜像，-p端口映射，-d后台运行docker logs mn 查看mn容器的日志 -f 动态查看docker exec -it mn bash  以bash命令进入mn容器docker stop mn  停止mn容器docker (un)pause （恢复）暂停镜像docker restart mn 重启mn容器</code></pre><h3 id="2、docker镜像结构"><a href="#2、docker镜像结构" class="headerlink" title="2、docker镜像结构"></a>2、docker镜像结构</h3><p>1、镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p><p>2、镜像是分成结构、每一层称为一个Layer</p><p>​    （1）BaseImage层:包含基本的系统函数库、环境变量、文件系统</p><p>​    （2）Entrypoint：入口，是镜像中应用启动的命令</p><p>​    （3）其它：在BaseImage基础上添加依赖、安装程序、完成整改个应用的安装和配置</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="云原生" scheme="https://nty99.gitee.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>数据库</title>
    <link href="https://nty99.gitee.io/2022/08/23/database/"/>
    <id>https://nty99.gitee.io/2022/08/23/database/</id>
    <published>2022-08-23T06:52:23.000Z</published>
    <updated>2022-09-13T12:18:39.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一、Mysql"><a href="#一、Mysql" class="headerlink" title="一、Mysql"></a>一、Mysql</h4><h5 id="1、执行顺序"><a href="#1、执行顺序" class="headerlink" title="1、执行顺序"></a>1、执行顺序</h5><p>​    1、执行where xx对全表数据做筛选，返回第1个结果集</p><p>​    2、针对第1个结果集使用group by分组，返回第2个结果集</p><p>​    3、针对第2个结果集中的每1组数据执行select xx，有几组就执行几次，返回第3个结果集</p><p>​    4、针对第3个结集执行having xx进行筛选，返回第4个结果集</p><p>​    5、针对第4个结果集排序</p><p>​    6、完整顺序:from、join、where、group by、with、having、order</p><h5 id="2、索引"><a href="#2、索引" class="headerlink" title="2、索引"></a>2、索引</h5><p>​    1、数据结构</p><p>​        （1）Innob主键索引是聚集索引方式，数据和索引都在同一个文件里面，主键索引叶子节点存储的是数据，二级索引即非聚簇索引叶子节点存储的是主键key，主索引叶子节点存储的是数据。</p><p>​        （2）MyISAM 用的是非聚集索引方式，即数据和索引落在不同的两个文件上。MyISAM 在建表时以主键作为 KEY 来建立主索引B+树，树的叶子节点存的是对应数据的物理地址。我们拿到这个物理地址后，就可以到 MyISAM 数据文件中直接定位到具体的数据记录了。</p><p>​    2、选择条件</p><p>​        (1)较频繁的作为查询条件的字段应该创建索引</p><p>​        (2)唯一性太差的字段不适合单独创建索引，即使该字段频繁作为查询条件</p><p>​        (3)更新非常频繁的字段不适合创建索引</p><p>​    3、分类</p><p>​        1、聚簇索引：数据存储的一种方式，索引的顺序和数据记录的顺序一致</p><p>​        2、非聚簇索引：索引顺序和存储顺序无关</p><h5 id="3、count"><a href="#3、count" class="headerlink" title="3、count"></a>3、count</h5><p>​    1、count(*)包括了所有的列，相当于行数，在统计结果的时候，不会忽略列值为NULL。</p><p>​    2、count(1)包括了忽略所有列，用1代表代码行，在统计结果的时候，不会忽略列值为NULL。 </p><p>​    3、count(列名)只包括列名那一列，在统计结果的时候，会忽略列值为空(这里的空不是只空字符串或者0，而是表示null)的计数， 即某</p><p>个字段值为NULL时，不统计。</p><p>​    4、列名为主键，count(列名)会比count(1)快。</p><p>​    5、列名不为主键，count(1)会比count(列名)快。  </p><p>​    6、如果表多个列并且没有主键，则 count(1) 的执行效率优于 count(*)。</p><p>​    7、如果有主键，则 select count(主键)的执行效率是最优的。</p><p>​    8、如果表只有一个字段，则 select count(*)最优。</p><h5 id="4、存储引擎"><a href="#4、存储引擎" class="headerlink" title="4、存储引擎"></a>4、存储引擎</h5><p>​    1、类型</p><p>​        InnoDB、MyISAM</p><p>​    2、区别</p><p>​        （1）InnoDB 支持事务，MyISAM不支持事务。</p><p>​        （2）InnoDB支持外键，MyISAM不支持。</p><p>​        （3）InnoDB支持行锁和表锁，ISAM不支持行锁。</p><p>​        （4）InnoDB 不保存表的具体行数，执行 select count(*) from table 时需要全表扫描。而MyISAM 用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快。</p><h5 id="5、执行计划"><a href="#5、执行计划" class="headerlink" title="5、执行计划"></a>5、执行计划</h5><h5 id="6、最左前缀原则"><a href="#6、最左前缀原则" class="headerlink" title="6、最左前缀原则"></a>6、最左前缀原则</h5><p>​        如果你的 SQL 语句中用到了联合索引中的最左边的索引，那么这条 SQL 语句就可以利用这个联合索引去进行匹配，遇到范围查询时候停止匹配。</p><h5 id="7、优化器"><a href="#7、优化器" class="headerlink" title="7、优化器"></a>7、优化器</h5><h5 id="8、锁的分类和作用"><a href="#8、锁的分类和作用" class="headerlink" title="8、锁的分类和作用"></a>8、锁的分类和作用</h5><p>​    1、表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。</p><p>​    2、行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</p><p>​    3、页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</p><h5 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h5><p>​    1、默认查询是不分大小写，若需要区分，可在建表时候指定，或者在查询时候在字段前面加上binary。</p><h4 id="二、Oracle"><a href="#二、Oracle" class="headerlink" title="二、Oracle"></a>二、Oracle</h4><h5 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips"></a>Tips</h5><p>​    1、Oracle执行sql的的隐式转换</p><p>​    2、Oracle DROP误删表后恢复</p><p>​        （1）SELECT * FROM USER_RECYCLEBIN</p><p>​        （2）FLASHBACK TABLE TABLE_NAME TO BEFORE DROP</p><p>​    3、删除Table不进入Recycle的方法：DROP TABLE TABLE_NAME PURGE即永久删除</p><h4 id="三、Redis"><a href="#三、Redis" class="headerlink" title="三、Redis"></a>三、Redis</h4><pre class="language-bash" data-language="bash"><code class="language-bash">hash双链集合，set、zset、list单链集合exists key 查看key是否存在incr/decr key <span class="token punctuation">(</span>key的值增加/减少1<span class="token punctuation">)</span>incrby/decrby key n <span class="token punctuation">(</span>key的值增加/减少n<span class="token punctuation">)</span>  单个命令实现的所有Redis操作都是原子的，包括对更复杂数据结构的操作。因此，当您使用修改某些值的 Redis 命令时，您不必考虑并发访问。<span class="token builtin class-name">set</span> key value ex <span class="token function">time</span> 设置键的过期时间ttl key 查看键的过期时间 -1 永久 -2 失效 <span class="token number">20</span> <span class="token number">20</span>秒后失效persist key 移除key的过期时间列表：listllen key 查看列表长度lpush / rpush  key value（向列表头 / 尾插入信息）lrange key <span class="token number">0</span> -1 （遍历从头到尾的值）lange key <span class="token number">0</span> -2  （遍历从头到倒数第二个值）lpop / rpop 删除头 / 尾的key，并把删除的值返回lpush / rpush  key value1,value2 向列表插入多个值，返回列表长度集合：setsadd key value<span class="token punctuation">..</span>. 向集合中添加一个或多个元素smembers key 遍历集合元素srem key value 删除指定元素，存在返回1，不存在返回0sismember key value 查看值是否存在，存在返回1，不存在返回0sunion key1 key2 组合多个集合并返回所有元素spop key n 随机删除n个元素并返回，默认返回一个srandmember key n 随机返回集合中的n个元素，不写默认返回一个<span class="token function">sdiff</span> key1 key2返回两个集合的差别集合：zsetzadd key_namae score value<span class="token punctuation">..</span>. 向有序集合添加一个或多个值<span class="token punctuation">(</span>可修改指定值的分数<span class="token punctuation">)</span>zrange key_name start end 获取指定范围内按score排序的集合zrange key start end withscores  打印所有的value，并带有分数zscore key value 获取指定value的score哈希：hashhset key filed filed 添加一个或多个键值对hget key filed 获取某个键值对hgetall key  获取所有键值对hincrby key filed n 给字段key增加n个整数值hdel key filed  删除字段的值  hlen、hkeys、hvals key  打印键值对长度、所有的key、所有的值redis两种持久化方案：RDB: save <span class="token number">900</span> <span class="token number">1</span>save <span class="token number">300</span> <span class="token number">10</span>save <span class="token number">60</span> <span class="token number">10000</span>  （60秒后有10000条数据发生变化则进行持久化）AOF: 开启appendonly 为yes <span class="token comment"># appendfsync always  （每次操作进行一次持久化）</span>appendfsync everysec  （每秒进行一次持久化）<span class="token comment"># appendfsync no</span></code></pre><h4 id="四、ES"><a href="#四、ES" class="headerlink" title="四、ES"></a>四、ES</h4><h5 id="1、配置ES开发环境"><a href="#1、配置ES开发环境" class="headerlink" title="1、配置ES开发环境"></a>1、配置ES开发环境</h5><pre class="language-docker" data-language="docker"><code class="language-docker">docker run -d \--name es \-e "ES_JAVA_OPTS=-Xms512m -Xmx512m" \-e "discovery.type=single-node" \-v es-data:/usr/share/elasticsearch/data \-v es-plugins:/usr/share/elasticsearch/plugins \--privileged \--network es-net \-p 9200:9200 \-p 9300:9300 \elasticsearch:7.12.1docker run -d \--name kibana \-e ELASTICSEARCH_HOSTS=http://es:9200 \--network es-net \-p 5601:5601 \kibana:7.12.1</code></pre><h5 id="2、DSL语句"><a href="#2、DSL语句" class="headerlink" title="2、DSL语句"></a>2、DSL语句</h5><p>​    1、索引库操作</p><pre class="language-json" data-language="json"><code class="language-json">#查看索引库GET /hotel#删除索引库DELETE /hotel#修改索引库 只能增添字段PUT /hotel/_mapping<span class="token punctuation">{</span>  <span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"age"</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"integer"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span># 建立索引库hotel  type数据类型 analyzer分词器PUT /hotel<span class="token punctuation">{</span>  <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"name"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>        <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>        <span class="token property">"copy_to"</span><span class="token operator">:</span> <span class="token string">"all"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"address"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token property">"price"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"integer"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"all"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>        <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    2、文档操作</p><pre class="language-json" data-language="json"><code class="language-json">#新增文档id为<span class="token number">1</span>的数据POST /hotel/_doc/<span class="token number">1</span><span class="token punctuation">{</span>  <span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"test"</span><span class="token punctuation">,</span>  <span class="token property">"address"</span><span class="token operator">:</span><span class="token string">"test"</span><span class="token punctuation">,</span>  <span class="token property">"price"</span><span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">}</span>#查询id为<span class="token number">1</span>的数据GET /hotel/_doc/<span class="token number">1</span>#删除id为<span class="token number">1</span>的数据DELETE /hotel/_doc/<span class="token number">1</span>#修改数据 全量修改 如果数据不存在则创建PUT /hotel/_doc/<span class="token number">1</span><span class="token punctuation">{</span>  <span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"test"</span><span class="token punctuation">,</span>  <span class="token property">"address"</span><span class="token operator">:</span><span class="token string">"test"</span><span class="token punctuation">,</span>  <span class="token property">"price"</span><span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">}</span>#修改数据 增量修改字段POST /hotel/_update/<span class="token number">1</span><span class="token punctuation">{</span>  <span class="token property">"doc"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"address"</span><span class="token operator">:</span><span class="token string">"杭州"</span><span class="token punctuation">,</span>    <span class="token property">"price"</span><span class="token operator">:</span><span class="token number">10000000</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    3、查询操作</p><pre class="language-json" data-language="json"><code class="language-json">#全文搜索GET /hotel/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>#单字段查询 all 多个字段整合GET /hotel/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>   <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"all"</span><span class="token operator">:</span> <span class="token string">"如家商圈"</span>   <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>#多字段查询GET /hotel/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"multi_match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"query"</span><span class="token operator">:</span> <span class="token string">"如家商圈"</span><span class="token punctuation">,</span>      <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"brand"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"business"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>#精确查询GET /hotel/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"city"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"上海"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>#精确查询 范围查询 带e表示包含等于GET /hotel/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"price"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"gte"</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>        <span class="token property">"lte"</span><span class="token operator">:</span> <span class="token number">2000</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>#位置查询 geo_distance和geo_bounding_boxGET /hotel/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"geo_distance"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"distance"</span><span class="token operator">:</span><span class="token string">"10km"</span><span class="token punctuation">,</span>      <span class="token property">"location"</span><span class="token operator">:</span><span class="token string">"31.20, 121.30"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>#function_score查询 会修改最后得分 query_score和function_score来决定分数GET /hotel/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"function_score"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"酒店"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"functions"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"brand"</span><span class="token operator">:</span> <span class="token string">"7天酒店"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token property">"weight"</span><span class="token operator">:</span> <span class="token number">10</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"boost_mode"</span><span class="token operator">:</span> <span class="token string">"sum"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>#bool查询  must_not和filter不会修改算分GET /hotel/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"如家"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"must_not"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"price"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"gt"</span><span class="token operator">:</span> <span class="token number">500</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"geo_distance"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"distance"</span><span class="token operator">:</span> <span class="token string">"10km"</span><span class="token punctuation">,</span>             <span class="token property">"location"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"lat"</span><span class="token operator">:</span> <span class="token number">39.945106</span><span class="token punctuation">,</span>              <span class="token property">"lon"</span><span class="token operator">:</span> <span class="token number">116.353827</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>#sort排序 会放弃打分GET /hotel/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"score"</span><span class="token operator">:</span> <span class="token string">"asc"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"price"</span><span class="token operator">:</span> <span class="token string">"desc"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span>#sort排序 按地理位置排序GET /hotel/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"_geo_distance"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">"10.10,10.10"</span><span class="token punctuation">,</span>        <span class="token property">"order"</span><span class="token operator">:</span> <span class="token string">"asc"</span><span class="token punctuation">,</span>        <span class="token property">"unit"</span><span class="token operator">:</span> <span class="token string">"km"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span>#分页查询 结果集(from+size)不能超过<span class="token number">10000</span> 还可以写成search after(需排序<span class="token punctuation">,</span>记录上次查询的最后一个文档<span class="token punctuation">,</span>查询下一页数据)GET /hotel/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"price"</span><span class="token operator">:</span> <span class="token string">"desc"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token property">"from"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span>#高亮GET /hotel/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"all"</span><span class="token operator">:</span> <span class="token string">"如家"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"highlight"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"require_field_match"</span><span class="token operator">:</span> <span class="token string">"false"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    4、聚合查询</p><pre class="language-json" data-language="json"><code class="language-json">#聚合查询bucket  <span class="token number">200</span>元以下的酒店按品牌分组后的数量升序展示<span class="token number">10</span>条数据GET /hotel/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"price"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"lte"</span><span class="token operator">:</span> <span class="token number">200</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"brandAggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"brand"</span><span class="token punctuation">,</span>        <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token property">"order"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"_count"</span><span class="token operator">:</span> <span class="token string">"asc"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>#聚合查询 bucket+metrics  对分组后的品牌按平均分进行降序排序GET /hotel/_search<span class="token punctuation">{</span>  <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"brandAggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"brand"</span><span class="token punctuation">,</span>        <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token property">"order"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"scoreAggs.avg"</span><span class="token operator">:</span> <span class="token string">"desc"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"scoreAggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"stats"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"score"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    5、自定义分词器</p><pre class="language-json" data-language="json"><code class="language-json">#创建分词器和搜索分词器不能混用 因为有可能词汇汉字不一样但是拼音一样导致搜索结果达不到预期效果PUT /test<span class="token punctuation">{</span>  <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"analysis"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"my_analyzer"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"tokenizer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>          <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token string">"py"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"py"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"pinyin"</span><span class="token punctuation">,</span>          <span class="token property">"keep_full_pinyin"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token property">"keep_joined_full_pinyin"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token property">"keep_original"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token property">"limit_first_letter_length"</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>           <span class="token property">"remove_duplicated_term"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token property">"none_chinese_pinyin_tokenize"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据库" scheme="https://nty99.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>框架</title>
    <link href="https://nty99.gitee.io/2022/08/23/frame/"/>
    <id>https://nty99.gitee.io/2022/08/23/frame/</id>
    <published>2022-08-23T06:52:10.000Z</published>
    <updated>2022-09-13T16:10:06.560Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一、SpringBoot"><a href="#一、SpringBoot" class="headerlink" title="一、SpringBoot"></a>一、SpringBoot</h4><h5 id="1、bean的生命周期"><a href="#1、bean的生命周期" class="headerlink" title="1、bean的生命周期"></a>1、bean的生命周期</h5><p>​    1、Spring启动，查找并加载需要被Spring管理的bean，进行Bean的实例化。</p><p>​    2、Bean实例化后对将Bean的引入和值注入到Bean的属性中。</p><p>​    3、如果Bean实现了BeanNameAware接口的话，Spring将Bean的Id传递给setBeanName()方法。</p><p>​    4、如果Bean实现了BeanFactoryAware接口的话，Spring将调用setBeanFactory()方法，将BeanFactory容器实例传入。</p><p>​    5、如果Bean实现了ApplicationContextAware接口的话，Spring将调用Bean的setApplicationContext()方法，将bean所在应用上下文引用传入进来。</p><p>​    6、如果Bean实现了BeanPostProcessor接口，Spring就将调用他们的postProcessBeforeInitialization()方法。</p><p>​    7、如果Bean 实现了InitializingBean接口，Spring将调用他们的afterPropertiesSet()方法。类似的，如果bean使用init-method声明了初始化方法，该方法也会被调用。</p><p>​    8、如果Bean 实现了BeanPostProcessor接口，Spring就将调用他们的postProcessAfterInitialization()方法。</p><p>​    9、此时，Bean已经准备就绪，可以被应用程序使用了。他们将一直驻留在应用上下文中，直到应用上下文被销毁。</p><p>​    10、如果bean实现了DisposableBean接口，Spring将调用它的destory()接口方法，同样，如果bean使用了destory-method 声明销毁方法，该方法也会被调用。</p><h5 id="2、SpringMVC的执行流程"><a href="#2、SpringMVC的执行流程" class="headerlink" title="2、SpringMVC的执行流程"></a>2、SpringMVC的执行流程</h5><p>​    1、用户发送请求至前端控制器DispatcherServlet。</p><p>​    2、DispatcherServlet收到请求调用处理器映射器HandlerMapping。</p><p>​    3、处理器映射器根据请求url找到具体的处理器，生成处理器执行链HandlerExecutionChain(包括处理器对象和处理器拦截器)一并返回给DispatcherServlet。</p><p>​    4、DispatcherServlet根据处理器Handler获取处理器适配器HandlerAdapter执行HandlerAdapter处理一系列的操作，如：参数封装，数据格式转换，数据验证等操作。</p><p>​    5、执行处理器Handler(Controller，也叫页面控制器)。</p><p>​    6、Handler执行完成返回ModelAndView。</p><p>​    7、HandlerAdapter将Handler执行结果ModelAndView返回到DispatcherServlet。</p><p>​    8、DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</p><p>​    9、ViewReslover解析后返回具体View。</p><p>​    10、DispatcherServlet对View进行渲染视图(即将模型数据model填充至视图中)。</p><p>​    11、DispatcherServlet响应用户。</p><h5 id="3、SpringBoot配置优先级"><a href="#3、SpringBoot配置优先级" class="headerlink" title="3、SpringBoot配置优先级"></a>3、SpringBoot配置优先级</h5><p>​    1、配置优先级</p><p>​    （1）命令行参数</p><p>​    （2）来自 java:comp/env 的 JNDI 属性</p><p>​    （3）Java 系统属性（System.getProperties()） </p><p>​    （4）操作系统环境变量</p><p>​    （5）RandomValuePropertySource 配置的 random.* 属性值</p><p>​    （6）配置文件（YAML文件、Properties 文件）</p><p>​    （7）@Configuration 注解类上的 @PropertySource 指定的配置文件</p><p>​    （8）通过SpringApplication.setDefaultProperties 指定的默认属性</p><p>​    2、配置文件优先级</p><h1 id=""><a href="#" class="headerlink" title=""></a><img src="/medias/typora/springboot_config_load_order.png"></h1><h5 id="4、Gateway"><a href="#4、Gateway" class="headerlink" title="4、Gateway"></a>4、Gateway</h5><p>​        GatewayFilter Factories中有30种过滤器，spring  gateway网关中过滤器执行顺序按照order的值执行，值越小，优先级越高globalFilter的order值由我们自己指定，defaultFilter和路由filter由spring声明式指定，如果值一样，则执行defaultFilter、路由filter、globalFilter。defaultFilter和路由filter类型是GatewayFilter，globalFilter经过GatewayFilterAdapter转换成GatewayFilter。</p><h5 id="5、AOP"><a href="#5、AOP" class="headerlink" title="5、AOP"></a>5、AOP</h5><p>​    1、不存在环绕通知执行顺序：</p><p>​            before执行、目标方法执行、AfterThrow执行、After执行。</p><p>​    2、存在环绕通知@Around执行顺序：</p>   <pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"point()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2 before执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"point()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5 After执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">"point()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4 AfterReturning执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"point()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4 AfterThrow执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"point()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 around前执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3、目标方法执行 Controller层方法</span>  <span class="token comment">//6、切点执行</span>    <span class="token class-name">Object</span> proceed <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"7 around后执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> proceed<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="6、加载顺序"><a href="#6、加载顺序" class="headerlink" title="6、加载顺序"></a>6、加载顺序</h5><p>​    1、同一个类中加载顺序</p><p>​            Constructor &gt;&gt; @Autowired &gt;&gt;@ PostConstruct&gt;&gt;@Bean，跟Bean生命周期有关。</p><p>​    2、@Order注解并不能改变Bean加载<a href="https://so.csdn.net/so/search?q=%E4%BC%98%E5%85%88%E7%BA%A7&amp;spm=1001.2101.3001.7020">优先级</a>，@Order注解用于设置装载到list中Bean的顺序，用于比较多的是：</p><p>​        （1）控制AOP的类的加载顺序，也就是被@Aspect标注的类</p><p>​        （2）控制ApplicationListener实现类的加载顺序</p><p>​        （3）控制CommandLineRunner实现类的加载顺序</p><p>​    3、@AutoConfigureBefore、@AutoConfigureAfter、@AutoConfigureOrder这三个注解是给Springboot自动配置类排序使用的，注意是自动配置类(META_INF下的spring.factories配置文件)，并非是普通的配置类。</p><p>​    4、@DependsOn注解可以用来控制bean的创建顺序，该注解用于声明当前bean依赖于另外一个bean。所依赖的bean会被容器确保在当前bean实例化之前被实例化。</p><p>​    5、在@Bean标注的方法上，如果你传入了参数，springboot会自动会为这个参数在spring上下文里寻找这个类型的引用。并先初始化这个类的实例。利用此特性，我们也可以控制bean的加载顺序。</p><h5 id="7、约定大于配置"><a href="#7、约定大于配置" class="headerlink" title="7、约定大于配置"></a>7、约定大于配置</h5><p>​    1、开发人员仅需规定应用中不符合约定的部分</p><p>​    2、在没有规定配置的地方，采用默认配置，以力求最简配置为核心思想总的来说，上面两条都遵循了推荐默认配置的思想。当存在特殊需求的时候，自定义配置即可。这样可以大大的减少配置工作，这就是所谓的“约定”。</p><h5 id="8、校验"><a href="#8、校验" class="headerlink" title="8、校验"></a>8、校验</h5><p>​    1、官方提供：@NotBlank、@Size等。tips(除了@NotNull、@NotBlank外，其它的不会对null进行校验)</p><p>​    2、自定义: 需在自定义注解上使用元注解@Constraint(validatedBy = xxx.class)，xxx.class实现ConstraintValidator接口进行处理</p><h5 id="9、条件注解"><a href="#9、条件注解" class="headerlink" title="9、条件注解"></a>9、条件注解</h5><p>​    1、@ConditionalOnProperty两个属性matchIfMissing、havingValue</p><p>​        （1）没有havingValue属性时候，matchIfMissing为true时，配置文件缺少字段也会注入成功，为false时有配置信息则可以注入，没有则不会注入。</p><p>​        （2）有havingValue时候，havingValue值必须和配置值相同才会注入成功，不管matchIfMissing的值。</p><h5 id="10、依赖注入"><a href="#10、依赖注入" class="headerlink" title="10、依赖注入"></a>10、依赖注入</h5><p>​    1、通过构造方法注入</p><p>​        （1）采用构造方法上带有@Autowired注解注入。</p><p>​        （2）无@Autowired时候，若有无参构造则采用无参构造，无则采用其它构造方法。</p><p>​    2、Setter注入</p><p>​        （1）在需要注入的setter方法上加@Autored、@Resource注解。</p><p>​        （2）只要setter方法上有@Autored、@Resource注解则一定会执行此注入方式，不管有无构造注入、字段注入。</p><h5 id="11、热部署"><a href="#11、热部署" class="headerlink" title="11、热部署"></a>11、热部署</h5><p>​        JRebel &amp; XRebel</p><h4 id="二、Spring"><a href="#二、Spring" class="headerlink" title="二、Spring"></a>二、Spring</h4><h5 id="1、容器接口"><a href="#1、容器接口" class="headerlink" title="1、容器接口"></a>1、容器接口</h5><p>​    （1）容器顶级父接口：BeanFactory规范容器中的对象是延时加载的。</p><p>​    （2）ApplicationContext接口：规范容器中的bean对象时非延时加载的，即创建容器对象的时候就对bean对象进行初始化，并存到容器中。</p><h5 id="2、核心对象"><a href="#2、核心对象" class="headerlink" title="2、核心对象"></a>2、核心对象</h5><p>​    1、BeanDefinition：封装bean对象。</p><p>​    2、BeanDefinitionReader：解析配置文件的中的bean元素，封装成BeanDefinition对象。</p><p>​    3、BeanDefinitionRegistry：存储bean名称和对应的BeanDefinition对象，存储中Map里面。</p><h5 id="3、创建容器"><a href="#3、创建容器" class="headerlink" title="3、创建容器"></a>3、创建容器</h5><p>​        ClassPathXmlApplicationContext对bean配置资源的载入从调用父类的refresh()方法开始。refresh()是模版方法，规定了IOC容器的启动流程，有些逻辑需要交给子类实现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Spring" scheme="https://nty99.gitee.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>基础</title>
    <link href="https://nty99.gitee.io/2022/08/23/base/"/>
    <id>https://nty99.gitee.io/2022/08/23/base/</id>
    <published>2022-08-23T06:51:21.000Z</published>
    <updated>2022-09-20T15:12:18.104Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一、HashMap"><a href="#一、HashMap" class="headerlink" title="一、HashMap"></a>一、HashMap</h4><h5 id="1、常见Map比较"><a href="#1、常见Map比较" class="headerlink" title="1、常见Map比较"></a>1、常见Map比较</h5><p>​    1、hashmap 线程不安全，只允许有一个key为null，允许多个value为null。</p><p>​    2、hashtable线程安全，用的是内置锁synchronized，不允许key或value为null。</p><p>​    3、linkedhashmap 能保留put 键值对的顺序。</p><p>​    4、treemap实现sortmap接口能默认对put的键值对进行key排序。</p><h5 id="2、ConcurrentHashMap"><a href="#2、ConcurrentHashMap" class="headerlink" title="2、ConcurrentHashMap"></a>2、ConcurrentHashMap</h5><p>​    1、concurentHashMap与hashmap本质上并没有什么区别，只是concurrenthashMap是线程安全的</p><p>​    2、jdk1.7 采用了Segment分段锁，锁住几个槽位。</p><p>​    3、jdk1.8则采用 Node +CAS+synchronized来保证并发安全，锁的粒度下降了。</p><h5 id="3、hashmap是线程不安全"><a href="#3、hashmap是线程不安全" class="headerlink" title="3、hashmap是线程不安全"></a>3、hashmap是线程不安全</h5><p>​    1、多线程下对hashmap进行添加，删除，修改都可能会造成数据覆盖。</p><p>​    2、jdk1.7扩容时容易导致死循环。</p><h5 id="4、putIfAbsent"><a href="#4、putIfAbsent" class="headerlink" title="4、putIfAbsent"></a>4、putIfAbsent</h5><p>​    1、map.putIfAbsent(key,value)，如果map中存在这个key，则返回key对应的值，如果不存在则返回null然后将值插入进去。</p><h4 id="二、比较器"><a href="#二、比较器" class="headerlink" title="二、比较器"></a>二、比较器</h4><p>　　Comparable是排序接口，若一个类实现了Comparable接口，就意味着“该类支持排序”。而Comparator是比较器，我们若需要控制某个类的次序，可以建立一个“该类的比较器”来进行排序。两种方法各有优劣， 用Comparable 简单， 只要实现Comparable 接口的对象直接就成为一个可以比较的对象，但是需要修改源代码。 用Comparator 的好处是不需要修改源代码， 而是另外实现一个比较器， 当某个自定义的对象需要作比较的时候，把比较器和对象一起传递过去就可以比大小了， 并且在Comparator 里面用户可以自己实现复杂的可以通用的逻辑，使其可以匹配一些比较简单的对象，那样就可以节省很多重复劳动了。</p><h4 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h4><h4 id="四、Cookie和Session"><a href="#四、Cookie和Session" class="headerlink" title="四、Cookie和Session"></a>四、Cookie和Session</h4><h5 id="1、存储位置"><a href="#1、存储位置" class="headerlink" title="1、存储位置"></a>1、存储位置</h5><p>​    1、cookie存储在客户端，session存储在服务器</p><h5 id="2、生成方式"><a href="#2、生成方式" class="headerlink" title="2、生成方式"></a>2、生成方式</h5><p>​    1、第一次访问服务端时候，会创建一个session对象，并指定id为Jsessionid（Tomcat），然后响应给客户端，后续访问cookie里携带Jsessionid，服务端识别，判断是不是上次会话，如果是则不会创建session对象。</p><h4 id="五、线程"><a href="#五、线程" class="headerlink" title="五、线程"></a>五、线程</h4><h5 id="1、进程、线程、协程"><a href="#1、进程、线程、协程" class="headerlink" title="1、进程、线程、协程"></a>1、进程、线程、协程</h5><h5 id="2、线程的地址空间"><a href="#2、线程的地址空间" class="headerlink" title="2、线程的地址空间"></a>2、线程的地址空间</h5><h5 id="3、线程池的七个参数"><a href="#3、线程池的七个参数" class="headerlink" title="3、线程池的七个参数"></a>3、线程池的七个参数</h5><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>​    1、ThreadLocal、ThreadLocalMap、Thread区别</p><p>​        (1)ThreadLocal内部类ThreadLocalMap，ThreadLocalMap的内部类Entry，Entry存储的键是ThreadLocal，值是调用ThreadLocal的set方法设置的值Thread有个成员变量ThreadLocalMap， ThreadLocal.ThreadLocalMap threadLocals = null。</p><p>​    2、多线程哪些内存是共享的，哪些不是共享的</p><p>​        (1)Java虚拟机在执行Java程序的时候会把它管理的内存划分为5个不同的区域，其中方法区和堆是线程共享的，而虚拟机栈、程序计数器、本地方法栈是线程不共享的。</p><p>​    3、一个线程能访问到另一个线程的局部变量吗</p><p>​    4、synchronized和volatile区别 </p><h4 id="六、Http"><a href="#六、Http" class="headerlink" title="六、Http"></a>六、Http</h4><h5 id="1、三次握手"><a href="#1、三次握手" class="headerlink" title="1、三次握手"></a>1、三次握手</h5><p>​    1、第一次握手：第一次握手是客户端发送同步报文到服务端，这个时候客户端是知道自己具备发送数据的能力的，但是不知道服务端是否有接收和发送数据的能力。</p><p>​    2、第二次握手：当服务端接收到同步报文后，回复确认同步报文，此时服务端是知道客户端具有发送报文的能力，并且知道自己具有接收和发送数据的能力，但是并不知道客户端是否有接收数据的能力。</p><p>​    3、第三次握手：当客户端收到服务端的确认报文后，知道服务端具备接收和发送数据的能力，但是此时服务端并不知道自己具有接收的能力，所以还需要发送一个确认报文，告知服务端自己是具有接收能力的。</p><h5 id="2、四次挥手"><a href="#2、四次挥手" class="headerlink" title="2、四次挥手"></a>2、四次挥手</h5><p>​    1、第一次挥手客户端发起关闭连接的请求给服务端。</p><p>​    2、第二次挥手：服务端收到关闭请求的时候可能这个时候数据还没发送完，所以服务端会先回复一个确认报文，表示自己知道客户端想要关闭连接了，但是因为数据还没传输完，所以还需要等待。</p><p>​    3、第三次挥手：当数据传输完了，服务端会主动发送一个 FIN 报文，告诉客户端，表示数据已经发送完了，服务端这边准备关闭连接了。</p><p>​    4、第四次挥手：当客户端收到服务端的 FIN 报文过后，会回复一个 ACK 报文，告诉服务端自己`知道了，再等待一会就关闭连接。</p><h5 id="3、Http状态码"><a href="#3、Http状态码" class="headerlink" title="3、Http状态码"></a>3、Http状态码</h5><h5 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h5><p>​    1、为什么握手要三次，挥手却要四次呢</p><p>​            那是因为握手的时候并没有数据传输，所以服务端的 SYN 和 ACK 报文可以一起发送，但是挥手的时候有数据在传输，所以 ACK 和 FIN 报文不能同时发送，需要分两步，所以会比握手多一步。</p><p>​    2、为什么客户端在第四次挥手后还会等待 2MSL</p><p>​            等待2MSL是因为保证服务端接收到了ACK报文，因为网络是复杂了，很有可能ACK报文丢失了，如果服务端没接收到ACK报文的话，会重新发送FIN报文，只有当客户端等待了2MSL都没有收到重发的FIN报文时就表示服务端是正常收到了ACK报文，那么这个时候客户端就可以关闭了。</p><p>​    3、浏览器输入一个url发生了什么</p><p>​            输入网址、解析域名、建立Tcp连接、发送请求报文、响应数据报文、关闭Tcp连接、渲染页面。</p><p>​    4、get和post区别</p><p>​            (1)GET在浏览器回退时是无害的，而POST会再次提交请求数据</p><p>​            (2)GET参数通过URL传递，POST放在Request body中</p><p>​            (3)GET请求会被浏览器主动缓存，而POST不会，除非手动设置</p><p>​            (4)GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留</p><p>​            (5)GET请求在URL中传送的参数是有长度限制的，而POST没有</p><p>​            (6)最大区别，get请求发送一个tcp数据包，post请求发送两个tcp数据包</p><h4 id="七、GC"><a href="#七、GC" class="headerlink" title="七、GC"></a>七、GC</h4><h4 id="八、数据在内存中存放的位置"><a href="#八、数据在内存中存放的位置" class="headerlink" title="八、数据在内存中存放的位置"></a>八、数据在内存中存放的位置</h4><h4 id="九、BIO、NIO、AIO"><a href="#九、BIO、NIO、AIO" class="headerlink" title="九、BIO、NIO、AIO"></a>九、BIO、NIO、AIO</h4><h4 id="十、对称加密和非对称加密"><a href="#十、对称加密和非对称加密" class="headerlink" title="十、对称加密和非对称加密"></a>十、对称加密和非对称加密</h4><h4 id="十一、final、finally、finalize"><a href="#十一、final、finally、finalize" class="headerlink" title="十一、final、finally、finalize"></a>十一、final、finally、finalize</h4><p>1、final 可以用来修饰类、方法、变量，分别有不同的意义，final 修饰的 class 代表不可以继承扩展，比如 String 类</p><p>2、final 的变量是不可以修改的；Java 里用 final 修饰符去修饰一个方法的唯一正确用途就是表达：这个方法原本是一个虚方法，现在通</p><p>过 final 来声明这个方法不允许在派生类中进一步被覆写（override）。</p><p>3、finally 是 Java 保证重点代码一定要被执行的一种机制。可以使用 try-finally 或者 try-catch-finally 来进行关闭资源、保证 unlock 锁等</p><p>动作。</p><p>4、finalize 是基础类 java.lang.Object 的一个方法，设计目的是保证对象在被垃圾收集前完成特定资源的回收。</p><p>5、finalize 机制现在已经不推荐使用，并且在 JDK 9 开始被标记为 deprecated</p><p>6、final修饰的变量必须初始化赋值或者构造方法里面赋值</p><p>7、static final修饰的变量必须初始化赋值或者在静态代码块里面赋值</p><h4 id="十二、访问修饰符"><a href="#十二、访问修饰符" class="headerlink" title="十二、访问修饰符"></a>十二、访问修饰符</h4><p>1、public : 对所有类可见。使用对象：类、接口、变量、方法</p><p>2、protected: 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></p><p>3、default (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</p><p>4、private : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></p><h4 id="十三、枚举"><a href="#十三、枚举" class="headerlink" title="十三、枚举"></a>十三、枚举</h4><p>1、每个枚举 其实都是class，且所有的枚举值都是 public static final 的，可用javap xxx.class查看。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Color</span><span class="token punctuation">{</span>    RED<span class="token punctuation">,</span> GREEN<span class="token punctuation">,</span> BLUE<span class="token punctuation">;</span><span class="token punctuation">}</span>通过javap <span class="token punctuation">.</span>/<span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token keyword">class</span>查看<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Color</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Color</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Color</span> RED<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Color</span> GREEN<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Color</span> BLUE<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Color</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Color</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>和<span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法<span class="token keyword">enum</span> 定义的枚举类默认继承了<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Enum</span>类，并实现了<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Serializable</span>和<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Comparable</span>两个接口。<span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 和 <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法位于<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Enum</span> 类中：<span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>返回枚举类中所有的值。<span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法可以找到每个枚举常量的索引，就像数组索引一样。<span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法返回指定字符串值的枚举常量。枚举类中的抽象方法实现，需要枚举类中的每个对象都对其进行实现。</code></pre><h4 id="十四、序列化"><a href="#十四、序列化" class="headerlink" title="十四、序列化"></a>十四、序列化</h4><h4 id="十五、SPI、factories"><a href="#十五、SPI、factories" class="headerlink" title="十五、SPI、factories"></a>十五、SPI、factories</h4><h5 id="1、SPI介绍"><a href="#1、SPI介绍" class="headerlink" title="1、SPI介绍"></a>1、SPI介绍</h5><p>​        SPI（Service Provider Interface），是JDK内置的一种服务提供发现机制，可以用来启用框架扩展和替换组件。JDK的spi机制提供了 ServiceLoader 类用于加载、解析spi接口的配置文件，ServiceLoader实现了Iterable接口，可迭代，但只能以迭代器的方式进行操作。使用 hasNext() 时才会加载解析 META-INF/services 下对应的接口配置文件，使用 next() 时才会通过实现类的 Class 对象newInstance() 方法（实质是通过反射调用无参构造器）创建实例。</p><h5 id="2、使用教程"><a href="#2、使用教程" class="headerlink" title="2、使用教程"></a>2、使用教程</h5><p>​        在模块本身的resources下新建目录 META-INF/services，services目录下新建文件，以服务接口的全限定接口名作为文件名，文件中指定该服务接口要使用的具体实现类。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> service<span class="token punctuation">,</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">)</span></code></pre><h5 id="3、Spring-factories"><a href="#3、Spring-factories" class="headerlink" title="3、Spring factories"></a>3、Spring factories</h5><h5 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h5><p>​        factories可以看做是spring结合自身需要提供的一种spi机制，设计思想和jdk的spi机制差不多。factories机制在spring家族中广泛使用spring、springboot、springcloud中都大量使用了factories机制。spring体系的很多扩展配置都是通过spring.factories 指定的，比如应用初始化器 ApplicationContextInitializer、应用监听器ApplicationListener。注解本质是一种特殊接口，也可以用 factories 指定实现类，比如springboot中的 @EnableAutoConfiguration 注解就使用了factories指定要应用的实现类。</p><h5 id="4、使用教程"><a href="#4、使用教程" class="headerlink" title="4、使用教程"></a>4、使用教程</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">SpringFactoriesLoader</span><span class="token punctuation">.</span><span class="token function">loadFactories</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> factoryType<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span><span class="token class-name">SpringFactoriesLoader</span><span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> factoryType<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span></code></pre><h5 id="5、区别"><a href="#5、区别" class="headerlink" title="5、区别"></a>5、区别</h5><p>​        jdk的spi机制，一个配置文件只能指定一个接口要使用的实现类；spring的factories机制，一个配置文件可以指定多个接口要使用的实现类。</p><h4 id="十六、数据类型"><a href="#十六、数据类型" class="headerlink" title="十六、数据类型"></a>十六、数据类型</h4><p>1、基本类型(四类八种)</p><p>​    1、byte：占一个字节，一个字节占八位，所以范围按2*位算，例如byte最小值-2^7，最大值2^7-1</p><p>​    2、short：两个字节</p><p>​    3、int：四个字节</p><p>​    4、long：八个字节</p><p>​    5、float：四个字节，使用4字节存储，精度可以精确到小数点后7位有效数字，在多数情况下，float类型精度很难满足需要。</p><p>​    6、double：八个字节，采用双精度存储，精度是float的2倍，绝大部分应用程序采用float类型。</p><p>​    7、char：UTF-8编码，一个字符占两个字节，GBK编码，一个字符占三个字节</p><p>​        (1)example：字节和字符转换</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 97</span></code></pre><p>​    8、boolean：Java虚拟机规范给出4个字节，1个字节、4个字节都是有可能的。这其实是运算效率和存储空间之间的博弈，两者都⾮常的重要。</p><p>2、引用类型</p><h4 id="十七、多肽"><a href="#十七、多肽" class="headerlink" title="十七、多肽"></a>十七、多肽</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dad</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"父"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ownName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名称"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Dad</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"子"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ownName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名称"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token class-name">Dad</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出子类</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出父</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出子</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">ownName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出名称子</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出30</span></code></pre><p>​    （1）多肽写法，对象只能调用父类中存在的方法、变量。若子类重写方法则调用子类的方法。</p><p>​    （2）d对象只能调用父类中的方法，如果子类中重写过该方法，则调用子类的方法。</p><p>​    （3）子类成员变量和父类相同时，d.name输出父类定义的名称，d.getName()优先输出子类的名称，因为getName()方法重写了。</p><p>​    （4）d.ownName()输出名称子，方法中的name优先选择自己类中的变量。</p><p>​    （5）d.getNum()输出30，先调用父类getNum()，然后调用子类getI()。</p><h4 id="十八、修饰符代表的数字"><a href="#十八、修饰符代表的数字" class="headerlink" title="十八、修饰符代表的数字"></a>十八、修饰符代表的数字</h4><table><thead><tr><th align="center">修饰符</th><th align="center">public</th><th align="center">private</th><th align="center">protected</th><th align="center">static</th><th align="center">final</th><th align="center">synchronized</th></tr></thead><tbody><tr><td align="center">值</td><td align="center">1</td><td align="center">2</td><td align="center">4</td><td align="center">8</td><td align="center">16</td><td align="center">32</td></tr><tr><td align="center"><strong>修饰符</strong></td><td align="center"><strong>volatile</strong></td><td align="center"><strong>transient</strong></td><td align="center"><strong>native</strong></td><td align="center"><strong>interface</strong></td><td align="center"><strong>abstract</strong></td><td align="center"><strong>strict</strong></td></tr><tr><td align="center">值</td><td align="center">64</td><td align="center">128</td><td align="center">256</td><td align="center">512</td><td align="center">1024</td><td align="center">2048</td></tr></tbody></table><p>​        通过反射获取的单个变量、方法、构造器，可以调用getModifiers()返回修饰符表示的值，针对单个修饰符可以通过 &amp; 来判断修饰符类型，如果存在多个修饰符则值表示各个修饰符相加。</p><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Java" scheme="https://nty99.gitee.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>博客更新记录</title>
    <link href="https://nty99.gitee.io/2022/08/22/blogRecord/"/>
    <id>https://nty99.gitee.io/2022/08/22/blogRecord/</id>
    <published>2022-08-22T06:00:00.000Z</published>
    <updated>2022-09-22T15:27:25.961Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="v0-0-8"><a href="#v0-0-8" class="headerlink" title="v0.0.8"></a>v0.0.8</h4><p>1、时间</p><p>2022年9月22日 23:26:00</p><p>2、迭代记录</p><pre class="language-none"><code class="language-none">1、新增博客静止时彩带显示2、更新Linux文章2、新增Maven文章</code></pre><h4 id="v0-0-7"><a href="#v0-0-7" class="headerlink" title="v0.0.7"></a>v0.0.7</h4><p>1、时间</p><p>2022年9月18日 20:50:00</p><p>2、迭代记录</p><pre class="language-none"><code class="language-none">1、调整文章目录结构2、新增Git文章</code></pre><h4 id="v0-0-6"><a href="#v0-0-6" class="headerlink" title="v0.0.6"></a>v0.0.6</h4><p>1、时间</p><p>2022年9月14日 00:06:00</p><p>2、迭代记录</p><pre class="language-none"><code class="language-none">1、新增文章目录二级标题2、修正部分文章排版问题、补充部分文章内容3、添加部分乖乖照片至相册</code></pre><h4 id="v0-0-5"><a href="#v0-0-5" class="headerlink" title="v0.0.5"></a>v0.0.5</h4><p>1、时间</p><p>2022年9月12日 22:30:00</p><p>2、迭代记录</p><pre class="language-none"><code class="language-none">1、新增文章摘要2、优化文章中代码块显示3、新增主页背景视频展示、调整全局页面动画效果4、主页新增音乐、视频功能5、更新关于页面相册照片6、博客文章更细致拆分7、修改友情链接内容</code></pre><h4 id="v0-0-4"><a href="#v0-0-4" class="headerlink" title="v0.0.4"></a>v0.0.4</h4><p>1、时间</p><p>2022年9月1日 11:08:00</p><p>2、迭代记录</p><pre class="language-none"><code class="language-none">1、修复主页地址问题2、优化文章url路径2、修复中文文章链接显示问题3、仓库迁移</code></pre><h4 id="v0-0-3"><a href="#v0-0-3" class="headerlink" title="v0.0.3"></a>v0.0.3</h4><p>1、时间</p><p>2022年8月31日 09:23:00</p><p>2、迭代记录</p><pre class="language-none"><code class="language-none">1、新增评论功能2、新增腾讯蛙互动功能</code></pre><h4 id="v0-0-2"><a href="#v0-0-2" class="headerlink" title="v0.0.2"></a>v0.0.2</h4><p>1、时间</p><p>2022年8月29日 09:23:00</p><p>2、迭代记录</p><pre class="language-none"><code class="language-none">1、新增博客内容全局搜索2、新增在线聊天功能，对接微信小程序提醒接口</code></pre><h4 id="v0-0-1"><a href="#v0-0-1" class="headerlink" title="v0.0.1"></a>v0.0.1</h4><p>1、时间</p><p>2022年8月26日 14:55:20</p><p>2、迭代记录</p><pre class="language-none"><code class="language-none">1、初始化Gitee仓库、初始化博客配置信息、初始化文章信息</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
